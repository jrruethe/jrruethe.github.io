<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Identity | Morning Musings]]></title>
  <link href="http://jrruethe.github.io/blog/categories/identity/atom.xml" rel="self"/>
  <link href="http://jrruethe.github.io/"/>
  <updated>2016-05-15T20:19:05-04:00</updated>
  <id>http://jrruethe.github.io/</id>
  <author>
    <name><![CDATA[Joe Ruether]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Physical Blockchain Identity Card]]></title>
    <link href="http://jrruethe.github.io/blog/2015/03/27/physical-blockchain-identity-card/"/>
    <updated>2015-03-27T18:28:47-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/03/27/physical-blockchain-identity-card</id>
    <content type="html"><![CDATA[<p>In a <a href="http://jrruethe.github.io/blog/2015/02/28/blockchain-identity/">previous post</a>, I walked through the steps to create a digitial Blockchain Identity.
Now, it is time to turn that into an physical identity card.</p>

<p><!--more--><div class='more'></div></p>

<p>You will need the following:</p>

<ul>
<li><a href="http://www.amazon.com/gp/product/B0010JEJPC/ref=od_aui_detailpages00?ie=UTF8&amp;psc=1">Laminator</a></li>
<li><a href="http://www.amazon.com/gp/product/B004XJC1UQ/ref=od_aui_detailpages00?ie=UTF8&amp;psc=1">10 mil Teslin Paper</a></li>
<li><a href="http://www.amazon.com/gp/product/B004UJC730/ref=ox_sc_act_title_2?ie=UTF8&amp;psc=1&amp;smid=A1GYMVIZIMSYWM">10 mil Butterfly Pouch Laminates</a></li>
<li>A color inkjet printer</li>
</ul>


<p>You will also need the following software:</p>

<ul>
<li>Inkscape</li>
<li>QtQr</li>
<li>gLabels</li>
</ul>


<p>There is no standard template for your ID card; you can design it however you wish. The general idea is that it displays the necessary information to be a link between your government issued identification document and your GPG key. It is also a convienient place to put some contact information.</p>

<p>The most important item it must contain is the QR code containing your key.json.asc information. Remember, only the hash of this file is stored in the blockchain, so you need to make the data available for verification. For this reason, it is also recommended to include the hash and the Bitcoin transaction ID on your card. Finally, a link to your Keybase.io account is recommended.</p>

<p>To prove your identity, one would scan the QR code containing your key.json.asc information to obtain the ASCII text, and use your Keybase.io account to verify it&rsquo;s authenticity. Then, the hash of that data can be calculated and compared against the Bitcoin transaction. All the information needed (besides keybase.io and blockchain.info) are stored on your physical card; no need for your personal computer. Furthermore, the information can be validated with a smart phone; no full PC is needed.</p>

<p>Below you will find the template I designed using Inkscape. It isn&rsquo;t very flashy, but it does it&rsquo;s job well.</p>

<p><div class='img-outer-div'><div class='img-inner-div'><span class='caption-wrapper' style='width:100%;'><a class='fancybox' rel='group' href='./01.png'><img class='caption' src='./01.png' width='100%' title='My ID Card Template' alt=''></a><span class='caption-text'>My ID Card Template</span></span></div></div></p>

<p>Do note that I let the edges overlap a little bit to ensure the color covers the entire border.<br/>
Here is the back, and containing the most important part of the document:</p>

<p><div class='img-outer-div'><div class='img-inner-div'><span class='caption-wrapper' style='width:100%;'><a class='fancybox' rel='group' href='./02.png'><img class='caption' src='./02.png' width='100%' title='Digital ID on the Blockchain' alt=''></a><span class='caption-text'>Digital ID on the Blockchain</span></span></div></div></p>

<p>Scanning that will reveal the key.json.asc data.</p>

<p>Next, this card needs to be layed out on the Teslin paper properly. For this, I used gLabels and created a custom template. It took some trial and error to get everything lined up correctly, but here are the settings I ended up using:</p>

<ol>
<li>Width: 87.6 mm</li>
<li>Height: 56.0 mm</li>
<li>Round: 3.0 mm</li>
<li>Horizontal Waste: 1.0 mm</li>
<li>Vertical Waste: 1.0 mm</li>
<li>Margin: 1.0 mm</li>
</ol>


<p>and:</p>

<ul>
<li>nx: 2</li>
<li>ny: 4</li>
<li>x0: 15.9 mm</li>
<li>y0: 15.9 mm</li>
<li>dx: 97.0 mm</li>
<li>dy: 64.0 mm</li>
</ul>


<p>Here are the steps:</p>

<ol>
<li>Once you create your card in Inkscape, export it to a png.</li>
<li>Open gLabels and use your png to create a card.</li>
<li>Print it onto the Teslin paper at the highest quality your printer allows.</li>
<li>Let it dry, then pop the card out and place it inside of a butterfly pouch.

<ul>
<li>Do note that the glossy side goes out, the matte side is glue that should be up against the Teslin paper.</li>
<li>Also, the folded edge should be at the bottom of the card.</li>
<li>Be careful not to get fingerprints on the inside of the pouch.</li>
</ul>
</li>
<li>Warm up the laminator and feed the butterfly pouch containing the card folded edge first into the laminator.</li>
<li>When it comes out, flip it over and run it through again (on the other side).

<ul>
<li>You may need to run it through each side twice, for a total of four times.</li>
</ul>
</li>
<li>Let it cool, and enjoy your finished product!</li>
</ol>


<p>The result will look and feel like a real ID card. Below is an image of mine, with some stuff blurred out.</p>

<p><div class='img-outer-div'><div class='img-inner-div'><span class='caption-wrapper' style='width:100%;'><a class='fancybox' rel='group' href='./03.jpg'><img class='caption' src='./03.jpg' width='100%' title='Completed Blockchain ID Card' alt=''></a><span class='caption-text'>Completed Blockchain ID Card</span></span></div></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blockchain Identity]]></title>
    <link href="http://jrruethe.github.io/blog/2015/02/28/blockchain-identity/"/>
    <updated>2015-02-28T15:24:25-05:00</updated>
    <id>http://jrruethe.github.io/blog/2015/02/28/blockchain-identity</id>
    <content type="html"><![CDATA[<p>I stumbled upon Christopher Ellis' <a href="https://github.com/MrChrisJ/World-Citizenship">&ldquo;World Citizenship&rdquo; Blockchain ID</a> concept and was immediately intrigued.
His idea is to create proof of an individual&rsquo;s existence by storing their PGP identity in the blockchain.</p>

<p>The trick is that the blockchain acts as an immutable database that includes full history tracking, meaning that a record can be proven to exist in some state at some time. These services are similar to this concept:</p>

<ul>
<li><a href="http://www.proofofexistence.com/about">Proof of Existence</a></li>
<li><a href="http://www.cryptograffiti.info/">Cryptograffiti</a></li>
<li><a href="https://www.btproof.com/">BTProof</a></li>
</ul>


<p>This post will detail how to create a Blockchain Identity.</p>

<p><!--more--><div class='more'></div></p>

<h1>Requirements</h1>

<p>To begin, you will need:</p>

<ul>
<li>GPG key with signing abilities</li>
<li>Bitcoin wallet with a small balance</li>
<li>Keybase.io account</li>
</ul>


<p>Keybase.io is currently alpha, and you need an invite to get an account, but you can probably snag an invite from Reddit (that&rsquo;s where I got mine).</p>

<p>I will be using Debian Linux for this tutorial. I recommend the following packages:</p>

<ul>
<li>gpg : For signing files</li>
<li>electrum : For managing bitcoins</li>
<li>ruby : For running the scripts below</li>
</ul>


<p>First you need to create a GPG key and an Electrum Bitcoin wallet. I won&rsquo;t dive into the details of how to create these in this post. The reason we are using Electrum is because it has the ability to choose the address to send funds from, unlike some other wallets. We will need to know this sending address later.</p>

<p>You also need to get a small amount of Bitcoin into your Electrum wallet (at least 0.0003 BTC)</p>

<h1>Gathering the Data</h1>

<p>Time to collect the data. Open up a text editor and create a Yaml file named key.yml</p>

<p>First, lets get the GPG key details. Run the following, substituting your UID:</p>

<pre><code>gpg --fingerprint jrruethe
pub   4096R/40B935FE 2014-06-14 [expires: 2015-06-14]
      Key fingerprint = 4F40 99F8 276B DBA5 475A  8446 4630 BEDC 40B9 35FE
uid                  Joseph Ruether &lt;jrruethe@gmail.com&gt;
</code></pre>

<p>Fill out your key.yml file like so:</p>

<pre><code>Name: Joseph Ruether
Email: jrruethe@gmail.com
Type: RSA
Size: 4096
Created: 2014-06-14
Fingerprint: 4F40 99F8 276B DBA5 475A 8446 4630 BEDC 40B9 35FE
</code></pre>

<p>Next, go to your Electrum wallet and pick an address that contains a small amount of funds. You will need at least 0.0003 BTC. Add this address to your yaml file:</p>

<pre><code>Address: 1LXWthRW8aqQSBddifWxwTDGPycT6Lom2Q
</code></pre>

<p>Go to <a href="https://blockchain.info">Blockchain.info</a> and find the latest block that has been added to the main chain. Add the block number and Merkle Root to your yaml file:</p>

<pre><code>Block: 345546
Merkle Root: ea31869aa04e3608450b45068b257ee396a6d2f6724f96593cd8d2c7f30a39d9
</code></pre>

<p>At this point, your yaml file has all of your GPG key metadata, the address you will use to store the data in the blockchain, and a random number that proves this entry could not have been created earlier in time.</p>

<h1>Preparing the Data</h1>

<p>Now we need to put this data into a standard, machine readable format and sign it. First, use the following script to convert your yaml file into a normalized json file:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><figcaption><span> (yaml-to-normalized-json.rb)</span><a href='/downloads/code/yaml-to-normalized-json.rb' title='Download code'> download</a></figcaption><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># yaml-to-normalized-json.rb</span>
</span><span class='line'><span class="c1"># Copyright (C) 2015 Joe Ruether jrruethe@gmail.com</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c1"># it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c1"># the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c1"># (at your option) any later version.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c1"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c1"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c1"># GNU General Public License for more details.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c1"># along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;yaml&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1"># Add a snakecase function to the String class</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">snakecase</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/[:\-]/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">,</span> <span class="s2">&quot;_&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1"># Strip spaces and downcase</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">normalize</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/[: \-]/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1"># Check if a string is a hex value</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">is_hex?</span>
</span><span class='line'>      <span class="sr">/^[0-9A-F]+$/i</span> <span class="o">===</span> <span class="nb">self</span><span class="o">.</span><span class="n">normalize</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Load the yaml file</span>
</span><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Convert all keys to snakecase</span>
</span><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">[</span><span class="n">h</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="o">[</span><span class="n">k</span><span class="o">.</span><span class="n">snakecase</span><span class="p">,</span> <span class="n">v</span><span class="o">]</span> <span class="p">}</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Normalize all hex values</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span>
</span><span class='line'>   <span class="k">if</span> <span class="n">v</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">String</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">v</span><span class="o">.</span><span class="n">is_hex?</span>
</span><span class='line'>      <span class="n">h</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">normalize</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Sort the keys</span>
</span><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">[*</span><span class="n">h</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">flatten</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Pretty print</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">JSON</span><span class="o">.</span><span class="n">pretty_generate</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>Run it like so:</p>

<pre><code>./yaml-to-normalized-json.rb key.yml &gt; key.json
</code></pre>

<p>Then use GPG to clearsign this file:</p>

<pre><code>gpg --clearsign key.json
</code></pre>

<p>The result should look something like this:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><figcaption><span> (key.json.asc)</span><a href='/downloads/code/key.json.asc' title='Download code'> download</a></figcaption><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">-----BEGIN PGP SIGNED MESSAGE-----</span>
</span><span class='line'><span class="l-Scalar-Plain">Hash</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">SHA256</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">{</span>
</span><span class='line'>  <span class="s">&quot;address&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;1LXWthRW8aqQSBddifWxwTDGPycT6Lom2Q&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>  <span class="s">&quot;block&quot;</span><span class="p-Indicator">:</span> <span class="nv">345546</span><span class="p-Indicator">,</span>
</span><span class='line'>  <span class="s">&quot;created&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;2014-06-14&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>  <span class="s">&quot;email&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;jrruethe@gmail.com&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>  <span class="s">&quot;fingerprint&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;4f4099f8276bdba5475a84464630bedc40b935fe&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>  <span class="s">&quot;merkle_root&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;ea31869aa04e3608450b45068b257ee396a6d2f6724f96593cd8d2c7f30a39d9&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>  <span class="s">&quot;name&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;Joseph</span><span class="nv"> </span><span class="s">Ruether&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>  <span class="s">&quot;size&quot;</span><span class="p-Indicator">:</span> <span class="nv">4096</span><span class="p-Indicator">,</span>
</span><span class='line'>  <span class="s">&quot;type&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;RSA&quot;</span>
</span><span class='line'><span class="p-Indicator">}</span>
</span><span class='line'><span class="l-Scalar-Plain">-----BEGIN PGP SIGNATURE-----</span>
</span><span class='line'><span class="l-Scalar-Plain">Version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">GnuPG v2</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">iQEcBAEBCAAGBQJU8dS0AAoJEB7MsgHDevApMCEH/3yFMcNErb92AtEdwShsvb1v</span>
</span><span class='line'><span class="l-Scalar-Plain">IVWxL4aTqrs8AD7CxHEUNhxcZ56C2AyFW/8HkOMSCpbq9wG4Jxk8pohIiyQKYfTl</span>
</span><span class='line'><span class="l-Scalar-Plain">TGGEYGELNDPgx/Pvlhb0jLBh8McnE8XdYseH2OXa3lfq4xOCqYKNiBOIcUmNZSar</span>
</span><span class='line'><span class="l-Scalar-Plain">9fk4i3/Z47oN1Nwg7NohsCkoqNo9JBKH3Dc3ec2mlLktl83TQ7OcOfBCazdOaHOR</span>
</span><span class='line'><span class="l-Scalar-Plain">+kk3WZb0wTyG+B6u5Kl8e0VJh+inDB83ol96hli/Ofhuvf29280VP3n784nDpLwY</span>
</span><span class='line'><span class="l-Scalar-Plain">vg6pukSc3STD3em4hYOYU7OuBydbRe27I5w//E6IwntPoOG+dahzNPJcpFfvD4A=</span>
</span><span class='line'><span class="l-Scalar-Plain">=/daq</span>
</span><span class='line'><span class="l-Scalar-Plain">-----END PGP SIGNATURE-----</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<h1>Sending the Data to the Blockchain</h1>

<p>Now that we have our signed data file, we want to send it to the blockchain. It is important to note that the blockchain will only contain the sha256 hash of your key.json.asc, therefore you need to keep the original data around for validation. Later on, we will create an identification card with a QR code containing the original data.</p>

<p>There is a clever trick we are going to use. If you look at the <a href="https://en.bitcoin.it/wiki/Technical_background_of_Bitcoin_addresses">Technical Background of Bitcoin Addresses</a>, you will see that the address is generated from the hash of the public key. We can replace that hash (at step 3) with the hash of our file before continuing to generate the address. By sending Bitcoins to the address we create, we store the file&rsquo;s hash in the blockchain. Of course, those coins will be lost forever, because the private key for that address does not exist. That is why we only send a small amount.</p>

<p>Now, use the following script to obtain the Bitcoin address that is associated with the hash of your signed key.json:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><figcaption><span> (file-to-address.rb)</span><a href='/downloads/code/file-to-address.rb' title='Download code'> download</a></figcaption><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># file-to-address.rb</span>
</span><span class='line'><span class="c1"># Copyright (C) 2015 Joe Ruether jrruethe@gmail.com</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c1"># it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c1"># the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c1"># (at your option) any later version.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c1"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c1"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c1"># GNU General Public License for more details.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c1"># along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;digest&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Get the filename</span>
</span><span class='line'><span class="n">filename</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Hash the file</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="ss">Digest</span><span class="p">:</span><span class="ss">:SHA256</span><span class="o">.</span><span class="n">hexdigest</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span> <span class="n">filename</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Take only the first 20 bytes</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="nb">hash</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">39</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Prepend 0x00 to the hash</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="s2">&quot;00&quot;</span> <span class="o">+</span> <span class="nb">hash</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Calculate the checksum</span>
</span><span class='line'><span class="n">checksum</span> <span class="o">=</span> <span class="ss">Digest</span><span class="p">:</span><span class="ss">:SHA256</span><span class="o">.</span><span class="n">hexdigest</span> <span class="o">[</span><span class="nb">hash</span><span class="o">].</span><span class="n">pack</span><span class="p">(</span><span class="s2">&quot;H*&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">checksum</span> <span class="o">=</span> <span class="ss">Digest</span><span class="p">:</span><span class="ss">:SHA256</span><span class="o">.</span><span class="n">hexdigest</span> <span class="o">[</span><span class="n">checksum</span><span class="o">].</span><span class="n">pack</span><span class="p">(</span><span class="s2">&quot;H*&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Pull out the first 4 bytes</span>
</span><span class='line'><span class="n">checksum</span> <span class="o">=</span> <span class="n">checksum</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">7</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">encode_base58</span><span class="p">(</span><span class="n">hex</span><span class="p">)</span>
</span><span class='line'>   <span class="n">int_val</span> <span class="o">=</span> <span class="n">hex</span><span class="o">.</span><span class="n">to_i</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>   <span class="n">alpha</span> <span class="o">=</span> <span class="s2">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span>
</span><span class='line'>   <span class="n">base58_val</span><span class="p">,</span> <span class="n">base</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">alpha</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>   <span class="k">while</span> <span class="n">int_val</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">int_val</span><span class="p">,</span> <span class="n">remainder</span> <span class="o">=</span> <span class="n">int_val</span><span class="o">.</span><span class="n">divmod</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>      <span class="n">base58_val</span> <span class="o">=</span> <span class="n">alpha</span><span class="o">[</span><span class="n">remainder</span><span class="o">]</span> <span class="o">+</span> <span class="n">base58_val</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>   <span class="n">leading_zero_bytes</span>  <span class="o">=</span> <span class="p">(</span><span class="n">hex</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/^([0]+)/</span><span class="p">)</span> <span class="p">?</span> <span class="vg">$1</span> <span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">size</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>   <span class="p">(</span><span class="s2">&quot;1&quot;</span><span class="o">*</span><span class="n">leading_zero_bytes</span><span class="p">)</span> <span class="o">+</span> <span class="n">base58_val</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Generate the address</span>
</span><span class='line'><span class="n">address</span> <span class="o">=</span> <span class="n">encode_base58</span><span class="p">(</span><span class="nb">hash</span> <span class="o">+</span> <span class="n">checksum</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">address</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>Run it like this:</p>

<pre><code>./file-to-address.rb key.json.asc
1BESV3iP1x1HAMDGhsYiQE3do6aiywGZ3K
</code></pre>

<p>For some basic sanity checks, visit this website: <a href="http://lenschulwitz.com/base58">Base58 Decoder</a><br/>
Here you can validate that the Bitcoin address is legitimate, as well as decode the address to hex. Here is what I get:</p>

<pre><code>00703BF01D7DF0A110C9B2CE1E8984F545831BFFAA5556057E
</code></pre>

<p>Next, get the sha256 hash of key.json.asc:</p>

<pre><code>sha256sum key.json.asc 
703bf01d7df0a110c9b2ce1e8984f545831bffaa08042e78b470b3b1464faada  key.json.asc
</code></pre>

<p>Compare the two outputs to make sure they match:</p>

<pre><code>00 703BF01D7DF0A110C9B2CE1E8984F545831BFFAA 5556057E
   703bf01d7df0a110c9b2ce1e8984f545831bffaa 08042e78b470b3b1464faada
</code></pre>

<p>All that is left to do is send some bitcoin to that address. Use <a href="https://blockchain.info/">Blockchain.info</a> to capture the transaction details as proof of the file&rsquo;s existence:</p>

<p><a href="https://blockchain.info/tx/68cbd46b5b1b5ac4ce3369c04a0366da733182b6a7b329317aa1c87feb46f96d">Transaction: 68cbd46b5b1b5ac4ce3369c04a0366da733182b6a7b329317aa1c87feb46f96d</a></p>
]]></content>
  </entry>
  
</feed>
