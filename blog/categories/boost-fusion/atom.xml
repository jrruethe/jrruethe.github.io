<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Boost Fusion | Morning Musings]]></title>
  <link href="http://jrruethe.github.io/blog/categories/boost-fusion/atom.xml" rel="self"/>
  <link href="http://jrruethe.github.io/"/>
  <updated>2016-05-15T20:27:43-04:00</updated>
  <id>http://jrruethe.github.io/</id>
  <author>
    <name><![CDATA[Joe Ruether]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Yaml De/Serialization With Boost Fusion]]></title>
    <link href="http://jrruethe.github.io/blog/2015/08/17/yaml-de-slash-serialization-with-boost-fusion/"/>
    <updated>2015-08-17T20:17:35-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/08/17/yaml-de-slash-serialization-with-boost-fusion</id>
    <content type="html"><![CDATA[<p>In a <a href="">previous post</a> I did a rather lengthy walkthrough of how to create a Json pretty printer for any object using Boost Fusion. This time I will be doing the same thing, only with Yaml.</p>

<p>This method relies on a third party library<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, but the end result is much cleaner. This method supports both serialization and deserialization. As a bonus, it can also work with Json!</p>

<p><!--more--><div class='more'></div></p>

<p>To run the following code, you will need these libraries installed:</p>

<ul>
<li>libboost-all-dev</li>
<li>libyaml-cpp-dev</li>
</ul>


<p>I am using yaml-cpp version 0.5.1, and some internals are exposed. There is a possibility that this method would not work with a future version.</p>

<p>The first part is similar to before; creating some wrappers around the Boost Fusion / MPL calls for ease of use. Hopefully the comments and names are straightforward:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">sequence</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// Point to the first element</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">begin</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Point to the element after the last element in the sequence</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">size</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Point to the first element</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">first</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Point to the second element (for pairs)</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">1</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">second</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Point to the last element in the sequence</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">prior</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">end</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span> <span class="n">last</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Number of elements in the sequence</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">size</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Get a range representing the size of the structure</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">range_c</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">size</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">value</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">indices</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>     <span class="k">typename</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">element_at</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// Type of the element at this index</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">value_at</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Previous element</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">prior</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span> <span class="n">previous</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Next element</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">next</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Member name of the element at this index</span>
</span><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">extension</span><span class="o">::</span><span class="n">struct_member_name</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">::</span><span class="n">value</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">call</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Type name of the element at this index</span>
</span><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">type_name</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">units</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">demangle</span><span class="p">(</span><span class="k">typeid</span><span class="p">(</span><span class="n">type</span><span class="p">).</span><span class="n">name</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Access the element</span>
</span><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">at</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span> <span class="k">const</span><span class="p">,</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span> <span class="n">get</span><span class="p">(</span><span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">at</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">type</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// Return the string name of the type</span>
</span><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">units</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">demangle</span><span class="p">(</span><span class="k">typeid</span><span class="p">(</span><span class="n">T</span><span class="p">).</span><span class="n">name</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>We need two functors:</p>

<ul>
<li>One to insert items into a Yaml node</li>
<li>One to extract items from a Yaml node</li>
</ul>


<h1>Inserter</h1>

<p>The constructor will take in a Yaml node to insert into, and <code>operator()</code> will take in a Zip element. A Zip element is a tuple created by boost::fusion::for_each that is used to zip together two lists. The concept is the same as in Python:</p>

<p>``` python</p>

<blockquote><p>a = [1, 2, 3]</p>

<p>b = [4, 5, 6]</p>

<p>zip(a, b)
[(1, 4), (2, 5), (3, 6)]</p></blockquote>

<p>```</p>

<p>The code performs the following operations:</p>

<ol>
<li>Grabs the index from the zip</li>
<li>Gets the name of that field using reflection</li>
<li>Gets the type of that field</li>
<li>Aliases the member for convenience</li>
<li>Stores the member under its name in the Yaml node</li>
</ol>


<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number marked'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">inserter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">T</span> <span class="n">Type</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="n">inserter</span><span class="p">(</span><span class="n">YAML</span><span class="o">::</span><span class="n">Node</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">subroot</span><span class="p">)</span> <span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">mSubroot</span><span class="p">(</span><span class="n">subroot</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="p">{}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Zip</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="kt">void</span> <span class="k">operator</span><span class="p">()(</span><span class="n">Zip</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">zip</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">remove_const</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span>
</span><span class='line'>             <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">remove_reference</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span>
</span><span class='line'>                <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">at_c</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Zip</span><span class="p">,</span> <span class="mi">0</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span>
</span><span class='line'>             <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span>
</span><span class='line'>          <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span> <span class="n">Index</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Get the field name as a string using reflection</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">field_name</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Type</span><span class="p">,</span> <span class="n">Index</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">name</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Get the field type</span>
</span><span class='line marked start end'>  <span class="k">typedef</span> <span class="n">BOOST_TYPEOF</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">at_c</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">1</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">zip</span><span class="p">))</span> <span class="n">FieldType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Alias the member</span>
</span><span class='line'>  <span class="n">FieldType</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">member</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">at_c</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">1</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">zip</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Store this field in the yaml node</span>
</span><span class='line'>  <span class="n">mSubroot</span><span class="p">[</span><span class="n">field_name</span><span class="p">]</span> <span class="o">=</span> <span class="n">member</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>   <span class="n">YAML</span><span class="o">::</span><span class="n">Node</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">mSubroot</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<h1>Extractor</h1>

<p>The extractor is the same concept, but it is slightly more difficult for three reasons:</p>

<ol>
<li>Parsing a file can fail, and <code>yaml-cpp</code> is not very good at reporting useful errors.</li>
<li><code>boost::fusion::for_each</code> requires the zip and <code>operator()</code> to be const.</li>
<li><code>boost::fusion::for_each</code> requires <code>operator()</code> to return void.</li>
</ol>


<p>To solve these issues, we use the reflection capabilities to identify the field we are trying to load, and can report that on failure. Maintaining an item count also provides useful information for the error reporting. Using <code>const_cast</code> gets around the const requirements in an ugly manner. Finally, instead of returning <code>false</code> on error, we throw an exception that needs to be caught later.</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number marked'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">extractor</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">T</span> <span class="n">Type</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="n">extractor</span><span class="p">(</span><span class="n">YAML</span><span class="o">::</span><span class="n">Node</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">subroot</span><span class="p">)</span> <span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">mSubroot</span><span class="p">(</span><span class="n">subroot</span><span class="p">),</span>
</span><span class='line'>  <span class="n">mItem</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Zip</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="kt">void</span> <span class="k">operator</span><span class="p">()(</span><span class="n">Zip</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">zip</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">remove_const</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span>
</span><span class='line'>             <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">remove_reference</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span>
</span><span class='line'>                <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">at_c</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Zip</span><span class="p">,</span> <span class="mi">0</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span>
</span><span class='line'>             <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span>
</span><span class='line'>          <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span> <span class="n">Index</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Get the field name as a string using reflection</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">field_name</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Type</span><span class="p">,</span> <span class="n">Index</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">name</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Get the field native type</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">BOOST_TYPEOF</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">at_c</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">1</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">zip</span><span class="p">))</span> <span class="n">FieldType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Alias the member</span>
</span><span class='line'>  <span class="c1">// We need to const cast this because &quot;boost::fusion::for_each&quot;</span>
</span><span class='line'>  <span class="c1">// requires that zip be const, however we want to modify it.</span>
</span><span class='line'>  <span class="n">FieldType</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">const_member</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">at_c</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">1</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">zip</span><span class="p">);</span>
</span><span class='line'>  <span class="n">FieldType</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">member</span> <span class="o">=</span> <span class="k">const_cast</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">FieldType</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">const_member</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// We need to const cast this because &quot;boost::fusion::for_each&quot;</span>
</span><span class='line'>  <span class="c1">// requires that operator() be const, however we want to modify</span>
</span><span class='line'>  <span class="c1">// the object. This item number is used for error reporting.</span>
</span><span class='line'>  <span class="kt">int</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">const_item</span> <span class="o">=</span> <span class="n">mItem</span><span class="p">;</span>
</span><span class='line marked start end'>  <span class="kt">int</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">item</span> <span class="o">=</span> <span class="k">const_cast</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">const_item</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Try to load the value from the file</span>
</span><span class='line'>  <span class="k">try</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>     <span class="c1">// Extract this field from the yaml node</span>
</span><span class='line'>     <span class="n">member</span> <span class="o">=</span> <span class="n">mSubroot</span><span class="p">[</span><span class="n">field_name</span><span class="p">].</span><span class="n">as</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">FieldType</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;();</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// This item number helps us find issues when loading incomplete yaml files</span>
</span><span class='line'>     <span class="o">++</span><span class="n">item</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// Catch any exceptions</span>
</span><span class='line'>  <span class="k">catch</span><span class="p">(</span><span class="n">YAML</span><span class="o">::</span><span class="n">Exception</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>     <span class="c1">// Print out some helpful information to find the error in the yaml file</span>
</span><span class='line'>     <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">type_name</span> <span class="o">=</span> <span class="n">type</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">FieldType</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">name</span><span class="p">();</span>
</span><span class='line'>     <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;Error loading item &quot;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">item</span>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot; : &quot;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">type_name</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot; &quot;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">field_name</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// &quot;boost::fusion::for_each&quot; requires operator() to return void,</span>
</span><span class='line'>     <span class="c1">// so the only way to signal that an error occurred is to throw</span>
</span><span class='line'>     <span class="c1">// an exception.</span>
</span><span class='line'>     <span class="k">throw</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>   <span class="n">YAML</span><span class="o">::</span><span class="n">Node</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">mSubroot</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">mItem</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>Pay attention to the highlighted lines in the above <code>inserter</code> and <code>extractor</code>.<br/>
The call to <code>operator=</code> in the inserter leads to this code being run inside the <code>yaml-cpp</code> library:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><figcaption><span>&ldquo;yaml-cpp/node/impl.h&rdquo; </span></figcaption><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number marked'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">void</span> <span class="n">Node</span><span class="o">::</span><span class="n">Assign</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">rhs</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line marked start end'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">m_isValid</span><span class="p">)</span>
</span><span class='line'>    <span class="k">throw</span> <span class="n">InvalidNode</span><span class="p">();</span>
</span><span class='line'><span class="n">AssignData</span><span class="p">(</span><span class="n">convert</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">encode</span><span class="p">(</span><span class="n">rhs</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>The call to <code>as</code> in the extractor leads to this code being run inside the <code>yaml-cpp</code> library:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><figcaption><span>&ldquo;yaml-cpp/node/impl.h&rdquo; </span></figcaption><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number marked'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// template helpers</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">as_if</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">explicit</span> <span class="n">as_if</span><span class="p">(</span><span class="k">const</span> <span class="n">Node</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">node_</span><span class="p">)</span><span class="o">:</span> <span class="n">node</span><span class="p">(</span><span class="n">node_</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'><span class="k">const</span> <span class="n">Node</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="n">T</span> <span class="k">operator</span><span class="p">()(</span><span class="k">const</span> <span class="n">S</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">fallback</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">node</span><span class="p">.</span><span class="n">m_pNode</span><span class="p">)</span>
</span><span class='line marked start end'>        <span class="k">return</span> <span class="n">fallback</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">T</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">convert</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">decode</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">t</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">fallback</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>The documentation states that user specified data types can specialize the <code>YAML::convert&lt;&gt;</code> class to handle encoding and decoding properly. Below is a screenshot of the documentation about this:</p>

<p><div class='img-outer-div'><div class='img-inner-div'><span class='caption-wrapper' style='width:100%;'><a class='fancybox' rel='group' href='./01.png'><img class='caption' src='./01.png' width='100%' title='Yaml-cpp Documentation' alt=''></a><span class='caption-text'>Yaml-cpp Documentation</span></span></div></div></p>

<p>However, there is a small obstacle when trying to specialize the <code>convert</code> structure for our fusion sequence:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number marked'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">namespace</span> <span class="n">YAML</span>
</span><span class='line marked start end'><span class="p">{</span>
</span><span class='line'>   <span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">struct</span> <span class="n">convert</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">???&gt;</span>
</span><span class='line'>   <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">static</span> <span class="n">Node</span> <span class="n">encode</span><span class="p">(</span><span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">rhs</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">static</span> <span class="kt">bool</span> <span class="n">decode</span><span class="p">(</span><span class="n">Node</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">node</span><span class="p">,</span> <span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">rhs</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>We can&rsquo;t specialize in a general sense because <code>???</code> would either have to be a template parameter, or we would need one of these for every <code>BOOST_FUSION_ADAPT_STRUCT</code> we create.
Normally in this type of situation, we could use partial specialization if there was a second template parameter, even if it was a dummy variable that allowed us to use <code>boost::enable_if</code>.</p>

<p>Digging around the source a little more, we find this gem, and the answer to our problems:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><figcaption><span>&ldquo;yaml-cpp/node/node.h&rdquo; </span></figcaption><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>112</span>
<span class='line-number'>113</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">convert</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>Thats right! The convert structure is only forward declared, it is never actually defined! This means <em>we</em> can define it to be whatever we want!</p>

<p>Time to use some <code>boost::enable_if</code> magic. We add a dummy variable to both <code>encode</code> and <code>decode</code> that only enable those functions if the template parameter is a <code>boost::fusion</code> sequence. This allows the signatures of everything to match. Whenever a type <code>T</code> is not specialized by the library, the compiler will try to use our definition, which will only take effect if the type is a sequence. Otherwise, a compiler error will be thrown just as it would have before. In addition, this method still allows one to specialize for their type if they need extra functionality.</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">namespace</span> <span class="n">YAML</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">struct</span> <span class="n">convert</span>
</span><span class='line'>   <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="c1">// This function will only be available if the template parameter is a boost fusion sequence</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">Node</span> <span class="n">encode</span><span class="p">(</span><span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">rhs</span><span class="p">,</span>
</span><span class='line'>                     <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">enable_if</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">traits</span><span class="o">::</span><span class="n">is_sequence</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span><span class="o">*</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// This function will only be available if the template parameter is a boost fusion sequence</span>
</span><span class='line'>  <span class="k">static</span> <span class="kt">bool</span> <span class="n">decode</span><span class="p">(</span><span class="n">Node</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">node</span><span class="p">,</span> <span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">rhs</span><span class="p">,</span>
</span><span class='line'>                     <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">enable_if</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">traits</span><span class="o">::</span><span class="n">is_sequence</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span><span class="o">*</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="p">};</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>For the <code>encode</code> method, we iterate over every field in the sequence using the inserter, which will recurse through all the sub-sequences until we hit the &ldquo;bottom&rdquo;. Every sequence is made up of primitive at some level, so eventually the recursion will stop as specializations of <code>encode</code> get called instead of the one we defined.</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// This function will only be available if the template parameter is a boost fusion sequence</span>
</span><span class='line'><span class="k">static</span> <span class="n">Node</span> <span class="n">encode</span><span class="p">(</span><span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">rhs</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>               <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">enable_if</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">traits</span><span class="o">::</span><span class="n">is_sequence</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span><span class="o">*</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>   <span class="c1">// For each item in T</span>
</span><span class='line'>   <span class="c1">// Call inserter recursively</span>
</span><span class='line'>   <span class="c1">// Every sequence is made up of primitives at some level&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="c1">// Get a range representing the size of the structure</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">yaml</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">sequence</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">indices</span> <span class="n">indices</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="c1">// Make a root node to insert into</span>
</span><span class='line'>   <span class="n">YAML</span><span class="o">::</span><span class="n">Node</span> <span class="n">root</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="c1">// Create an inserter for the root node</span>
</span><span class='line'>   <span class="n">yaml</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">inserter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">inserter</span><span class="p">(</span><span class="n">root</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="c1">// Insert each member of the structure</span>
</span><span class='line'>   <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">zip</span><span class="p">(</span><span class="n">indices</span><span class="p">(),</span> <span class="n">rhs</span><span class="p">),</span> <span class="n">inserter</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="k">return</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>The <code>decode</code> method works the same way, using the <code>extractor</code>. Remember that the extractor throws on error, so the exception needs to be caught.</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// This function will only be available if the template parameter is a boost fusion sequence</span>
</span><span class='line'><span class="k">static</span> <span class="kt">bool</span> <span class="n">decode</span><span class="p">(</span><span class="n">Node</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">node</span><span class="p">,</span> <span class="n">T</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">rhs</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>               <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">enable_if</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">traits</span><span class="o">::</span><span class="n">is_sequence</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span><span class="o">*</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>   <span class="c1">// For each item in T</span>
</span><span class='line'>   <span class="c1">// Call extractor recursively</span>
</span><span class='line'>   <span class="c1">// Every sequence is made up of primitives at some level&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="c1">// Get a range representing the size of the structure</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">yaml</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">sequence</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">indices</span> <span class="n">indices</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="c1">// Create an extractor for the root node</span>
</span><span class='line'>   <span class="c1">// Yaml-cpp requires node to be const&amp;amp;, but the extractor makes</span>
</span><span class='line'>   <span class="c1">// non-const calls to it.</span>
</span><span class='line'>   <span class="n">Node</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">writable_node</span> <span class="o">=</span> <span class="k">const_cast</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Node</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&gt;</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>   <span class="n">yaml</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">extractor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">extractor</span><span class="p">(</span><span class="n">writable_node</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="c1">// Extract each member of the structure</span>
</span><span class='line'>   <span class="k">try</span>
</span><span class='line'>   <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="c1">// An exception is thrown if any item in the loop cannot be read</span>
</span><span class='line'>  <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">zip</span><span class="p">(</span><span class="n">indices</span><span class="p">(),</span> <span class="n">rhs</span><span class="p">),</span> <span class="n">extractor</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="p">}</span>
</span><span class='line'>   <span class="c1">// Catch all exceptions and prevent them from propagating</span>
</span><span class='line'>   <span class="k">catch</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;)</span>
</span><span class='line'>   <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="c1">// If we made it here, all fields were read correctly</span>
</span><span class='line'>   <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<h1>Mixin</h1>

<p>Ok! All the pieces and parts are completed. Time to make a mixin to wrap it all up. We want objects to have method to convert to and from Yaml and Json (remember that Json is a subset of Yaml, so the yaml parser gives us both abilities for free!). All we need to do is kickstart the recursion using the <code>inserter</code> and <code>extractor</code>.</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">namespace</span> <span class="n">yaml</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">class</span> <span class="nc">Yaml</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>   <span class="k">public</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">typedef</span> <span class="n">T</span> <span class="n">Base</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Convert this object to yaml</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">to_yaml</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>     <span class="c1">// Create an emitter</span>
</span><span class='line'>     <span class="n">YAML</span><span class="o">::</span><span class="n">Emitter</span> <span class="n">emitter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// Emit yaml</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">emit</span><span class="p">(</span><span class="n">emitter</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Convert this object to json</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">to_json</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>     <span class="c1">// Create an emitter</span>
</span><span class='line'>     <span class="n">YAML</span><span class="o">::</span><span class="n">Emitter</span> <span class="n">emitter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// Set the emitter manipulators for json</span>
</span><span class='line'>     <span class="n">emitter</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">YAML</span><span class="o">::</span><span class="n">Flow</span><span class="p">;</span>
</span><span class='line'>     <span class="n">emitter</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">YAML</span><span class="o">::</span><span class="n">DoubleQuoted</span><span class="p">;</span>
</span><span class='line'>     <span class="n">emitter</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">YAML</span><span class="o">::</span><span class="n">TrueFalseBool</span><span class="p">;</span>
</span><span class='line'>     <span class="n">emitter</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">YAML</span><span class="o">::</span><span class="n">EscapeNonAscii</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// Emit json</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">emit</span><span class="p">(</span><span class="n">emitter</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Load yaml into this object</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">from_yaml</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">yaml_string</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>     <span class="c1">// Create a root node to load into</span>
</span><span class='line'>     <span class="n">YAML</span><span class="o">::</span><span class="n">Node</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">try</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Try loading the root node</span>
</span><span class='line'>        <span class="n">root</span> <span class="o">=</span> <span class="n">YAML</span><span class="o">::</span><span class="n">Load</span><span class="p">(</span><span class="n">yaml_string</span><span class="p">);</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="k">catch</span><span class="p">(...)</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>        <span class="c1">// The yaml couldn&#39;t be parsed</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;Invalid yaml&quot;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// Get a range representing the size of the structure</span>
</span><span class='line'>     <span class="k">typedef</span> <span class="k">typename</span> <span class="n">detail</span><span class="o">::</span><span class="n">sequence</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Base</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">indices</span> <span class="n">indices</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// Create an extractor for the root node</span>
</span><span class='line'>     <span class="n">detail</span><span class="o">::</span><span class="n">extractor</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Base</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">extractor</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// Extract each member of the structure</span>
</span><span class='line'>     <span class="k">try</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>        <span class="c1">// An exception is thrown if any item in the loop cannot be read</span>
</span><span class='line'>        <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">zip</span><span class="p">(</span><span class="n">indices</span><span class="p">(),</span> <span class="n">self</span><span class="p">()),</span> <span class="n">extractor</span><span class="p">);</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="c1">// Catch all exceptions and prevent them from propagating</span>
</span><span class='line'>     <span class="k">catch</span><span class="p">(...)</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// If we made it here, all fields were read correctly</span>
</span><span class='line'>     <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The yaml parser can also parse json</span>
</span><span class='line'>  <span class="kr">inline</span> <span class="kt">bool</span> <span class="n">from_json</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">json_string</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">from_yaml</span><span class="p">(</span><span class="n">json_string</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="k">protected</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">emit</span><span class="p">(</span><span class="n">YAML</span><span class="o">::</span><span class="n">Emitter</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">emitter</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>     <span class="c1">// Get a range representing the size of the structure</span>
</span><span class='line'>     <span class="k">typedef</span> <span class="k">typename</span> <span class="n">detail</span><span class="o">::</span><span class="n">sequence</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Base</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">indices</span> <span class="n">indices</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// Make a root node to insert into</span>
</span><span class='line'>     <span class="n">YAML</span><span class="o">::</span><span class="n">Node</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// Create an inserter for the root node</span>
</span><span class='line'>     <span class="n">detail</span><span class="o">::</span><span class="n">inserter</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Base</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">inserter</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// Insert each member of the structure</span>
</span><span class='line'>     <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">zip</span><span class="p">(</span><span class="n">indices</span><span class="p">(),</span> <span class="n">self</span><span class="p">()),</span> <span class="n">inserter</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// Emit yaml</span>
</span><span class='line'>     <span class="n">emitter</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// Return string representation</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">emitter</span><span class="p">.</span><span class="n">c_str</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="k">private</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="c1">// Cast ourselves to our CRTP base</span>
</span><span class='line'>  <span class="n">Base</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">self</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="k">static_cast</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Base</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="o">*</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="p">};</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<h1>Testing</h1>

<p>Time to test it. First we create some test structures with different types and containers, and adapt them into sequences:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number marked'>13</span>
<span class='line-number'>14</span>
<span class='line-number marked'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number marked'>30</span>
<span class='line-number marked'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number marked'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">sstream</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">map</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">vector</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">iostream</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line marked start end'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">yaml</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line marked start end'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">namespace</span> <span class="n">test</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">struct</span> <span class="n">One</span>
</span><span class='line'>   <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">friend</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">extension</span><span class="o">::</span><span class="n">access</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">One</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>     <span class="n">two</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>     <span class="n">three</span><span class="p">(</span><span class="mf">0.0</span><span class="p">),</span>
</span><span class='line'>     <span class="n">four</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">One</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">c</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>     <span class="n">two</span><span class="p">(</span><span class="n">a</span><span class="p">),</span>
</span><span class='line marked start'>     <span class="n">three</span><span class="p">(</span><span class="n">b</span><span class="p">),</span>
</span><span class='line marked end'>     <span class="n">four</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{}</span>
</span><span class='line'>
</span><span class='line marked start end'>  <span class="kt">int</span> <span class="n">two</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">three</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="k">private</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="kt">bool</span> <span class="n">four</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="k">struct</span> <span class="n">Five</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Yaml</span><span class="o">&lt;</span><span class="n">Five</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="p">,</span> <span class="n">One</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Map_t</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Map_t</span> <span class="n">six</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">One</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Vector_t</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Vector_t</span> <span class="n">seven</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">eight</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">double</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Matrix_t</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Matrix_t</span> <span class="n">nine</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="p">};</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">BOOST_FUSION_ADAPT_STRUCT</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>   <span class="n">test</span><span class="o">::</span><span class="n">One</span><span class="p">,</span>
</span><span class='line'>   <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="n">two</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="kt">double</span><span class="p">,</span> <span class="n">three</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="n">four</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">BOOST_FUSION_ADAPT_STRUCT</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>   <span class="n">test</span><span class="o">::</span><span class="n">Five</span><span class="p">,</span>
</span><span class='line'>   <span class="p">(</span><span class="n">test</span><span class="o">::</span><span class="n">Five</span><span class="o">::</span><span class="n">Map_t</span><span class="p">,</span> <span class="n">six</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="n">test</span><span class="o">::</span><span class="n">Five</span><span class="o">::</span><span class="n">Vector_t</span><span class="p">,</span> <span class="n">seven</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">eight</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="n">test</span><span class="o">::</span><span class="n">Five</span><span class="o">::</span><span class="n">Matrix_t</span><span class="p">,</span> <span class="n">nine</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>A couple things to note here. First off, a default constructor is required for decoding. Secondly, if you want to adapt private or protected members, your class must befriend the <code>boost::fusion::extension::access</code> class. Finally, the top-level structure that you want to serialize / deserialize must inherit from the <code>Yaml&lt;&gt;</code> mixin.</p>

<p>To try it out, populate the structure and output it as Yaml and Json. Then try parsing a different Yaml string and make sure the structure was populated accordingly:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">test</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">Five</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>   <span class="n">v</span><span class="p">.</span><span class="n">six</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="mi">123</span><span class="p">,</span> <span class="n">One</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mf">6.6</span><span class="p">,</span> <span class="kc">true</span><span class="p">)));</span>
</span><span class='line'>   <span class="n">v</span><span class="p">.</span><span class="n">six</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="mi">456</span><span class="p">,</span> <span class="n">One</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mf">8.8</span><span class="p">,</span> <span class="kc">false</span><span class="p">)));</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="n">v</span><span class="p">.</span><span class="n">seven</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">One</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mf">1.1</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span>
</span><span class='line'>   <span class="n">v</span><span class="p">.</span><span class="n">seven</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">One</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mf">2.2</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="n">v</span><span class="p">.</span><span class="n">eight</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">eight</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>   <span class="n">temp</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mf">2.3</span><span class="p">);</span>
</span><span class='line'>   <span class="n">temp</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mf">4.5</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="n">v</span><span class="p">.</span><span class="n">nine</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
</span><span class='line'>   <span class="n">v</span><span class="p">.</span><span class="n">nine</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">v</span><span class="p">.</span><span class="n">to_yaml</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">v</span><span class="p">.</span><span class="n">to_json</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="c1">///////////////////////////////////////////</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">==============&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">ss</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="n">ss</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">six:</span>            <span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;  234:          </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;    two: 4      </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;    three: 5.5  </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;    four: true  </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;  345:          </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;    two: 6      </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;    three: 7.7  </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;    four: false </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;seven:          </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;  - two: 8      </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;    three: 9.9  </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;    four: true  </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;  - two: 2      </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;    three: 3.3  </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;    four: true  </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;eight: nine     </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;nine:           </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;  -             </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;    - 3.4       </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;    - 5.6       </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;  -             </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;    - 7.8       </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;    - 9.0       </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="n">v</span><span class="p">.</span><span class="n">from_yaml</span><span class="p">(</span><span class="n">ss</span><span class="p">.</span><span class="n">str</span><span class="p">());</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">v</span><span class="p">.</span><span class="n">to_yaml</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>The output is:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">six</span><span class="p">:</span>
</span><span class='line'>  <span class="mi">123</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">two</span><span class="p">:</span> <span class="mi">3</span>
</span><span class='line'><span class="n">three</span><span class="p">:</span> <span class="mf">6.6</span>
</span><span class='line'><span class="n">four</span><span class="p">:</span> <span class="n">true</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="mi">456</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">two</span><span class="p">:</span> <span class="mi">4</span>
</span><span class='line'><span class="n">three</span><span class="p">:</span> <span class="mf">8.800000000000001</span>
</span><span class='line'><span class="n">four</span><span class="p">:</span> <span class="n">false</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">seven</span><span class="p">:</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="n">two</span><span class="p">:</span> <span class="mi">5</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">three</span><span class="p">:</span> <span class="mf">1.1</span>
</span><span class='line'><span class="n">four</span><span class="p">:</span> <span class="n">true</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">two</span><span class="p">:</span> <span class="mi">5</span>
</span><span class='line'><span class="n">three</span><span class="p">:</span> <span class="mf">2.2</span>
</span><span class='line'><span class="n">four</span><span class="p">:</span> <span class="n">true</span>
</span><span class='line'><span class="n">eight</span><span class="p">:</span> <span class="n">eight</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="n">nine</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="mf">2.3</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="mf">4.5</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="mf">2.3</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="mf">4.5</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="p">{</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">six</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">456</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">two</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">4</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">three</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">8.800000000000001</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">four</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">false</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;},</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">123</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">three</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">6.6</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">four</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">true</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">two</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">3</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;}},</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">seven</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">[{</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">two</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">5</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">three</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">1.1</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">four</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">true</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;},</span> <span class="p">{</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">two</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">5</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">three</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">2.2</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">four</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">true</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;}],</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">eight</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">eight</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">nine</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">[[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">2.3</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">4.5</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;],</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">2.3</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">4.5</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;]]}</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">eight</span><span class="p">:</span> <span class="n">nine</span>
</span><span class='line'><span class="n">six</span><span class="p">:</span>
</span><span class='line'><span class="mi">234</span><span class="p">:</span>
</span><span class='line'><span class="n">three</span><span class="p">:</span> <span class="mf">5.5</span>
</span><span class='line'><span class="n">four</span><span class="p">:</span> <span class="n">true</span>
</span><span class='line'><span class="n">two</span><span class="p">:</span> <span class="mi">4</span>
</span><span class='line'><span class="mi">345</span><span class="p">:</span>
</span><span class='line'><span class="n">two</span><span class="p">:</span> <span class="mi">6</span>
</span><span class='line'><span class="n">three</span><span class="p">:</span> <span class="mf">7.7</span>
</span><span class='line'><span class="n">four</span><span class="p">:</span> <span class="n">false</span>
</span><span class='line'><span class="n">seven</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">three</span><span class="p">:</span> <span class="mf">9.9</span>
</span><span class='line'><span class="n">two</span><span class="p">:</span> <span class="mi">8</span>
</span><span class='line'><span class="n">four</span><span class="p">:</span> <span class="n">true</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">three</span><span class="p">:</span> <span class="mf">3.3</span>
</span><span class='line'><span class="n">two</span><span class="p">:</span> <span class="mi">2</span>
</span><span class='line'><span class="n">four</span><span class="p">:</span> <span class="n">true</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="n">nine</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="mf">3.4</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="mf">5.6</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="mf">7.8</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="mi">9</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://github.com/jbeder/yaml-cpp">Yaml-cpp</a> &ndash; Jesse Beder<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Boost Fusion Json Serializer]]></title>
    <link href="http://jrruethe.github.io/blog/2015/05/21/boost-fusion-json-serializer/"/>
    <updated>2015-05-21T19:21:50-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/05/21/boost-fusion-json-serializer</id>
    <content type="html"><![CDATA[<p>In this post, I am going to walkthrough the creation of a C++ mixin that will allow any structure to serialize itself to Json, using the magical power of Boost::Fusion.</p>

<p><!--more--><div class='more'></div></p>

<p>To do this, you will need the following installed:</p>

<ul>
<li>libboost-dev</li>
</ul>


<p>The Json serializer will support any structure composed of the following:</p>

<ul>
<li>Primitives</li>
<li>Arrays</li>
<li>Containers</li>
<li>Nested Structures</li>
</ul>


<p>First, we need a test structure that we want to serialize to Json. It needs to include some arrays, containers, and nested structures to test all the abilities of the serializer:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">inner</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">double</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">bool</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">vec_t</span><span class="p">;</span>
</span><span class='line'>   <span class="n">vec_t</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">outer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">one</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">double</span> <span class="n">two</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">bool</span> <span class="n">three</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">inner</span> <span class="n">array_t</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>   <span class="n">array_t</span> <span class="n">array</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">set_t</span><span class="p">;</span>
</span><span class='line'>   <span class="n">set_t</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">map_t</span><span class="p">;</span>
</span><span class='line'>   <span class="n">map_t</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>Boost::Fusion is a library that enables reflection in C++ with only a small amount of boilerplate. Pay careful attention to the use of <code>()</code> instead of <code>{}</code>, and the placement of the <code>,</code>:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">BOOST_FUSION_ADAPT_STRUCT</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>   <span class="n">inner</span><span class="p">,</span>
</span><span class='line'>   <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="kt">double</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="n">inner</span><span class="o">::</span><span class="n">vec_t</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_FUSION_ADAPT_STRUCT</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>   <span class="n">outer</span><span class="p">,</span>
</span><span class='line'>   <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="n">one</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="kt">double</span><span class="p">,</span> <span class="n">two</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="n">three</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="n">outer</span><span class="o">::</span><span class="n">array_t</span><span class="p">,</span> <span class="n">array</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="n">outer</span><span class="o">::</span><span class="n">set_t</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="n">outer</span><span class="o">::</span><span class="n">map_t</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>Next, we define a serializer for each meta-type that needs to be supported. Each serializer will take a reference to an output stream that will be appended to, a type to serialize, and the current recursion depth. The depth is useful for pretty-printing with the proper indentation. All four will start off following the same pattern before we complete the implementation:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">primitive_serializer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">primitive_serializer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">array_serializer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">array_serializer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">container_serializer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">container_serializer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">struct_serializer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">struct_serializer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>The <code>primitive_serializer</code> is the simplest one to implement, so lets start with that one. It will enclose the value in quotation marks and append it to the stream:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">primitive_serializer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">primitive_serializer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">os</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>         <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">t</span>
</span><span class='line'>         <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>Next, lets implement the <code>array_serializer</code>. We need to get the size of the array, and iterate over it while serializing each element. Notice the use of newlines and tabs, and the increase in the recursion depth; we want the Json output to be pretty, as opposed to compressed (Switching to a compressed version is as simple as removing the newlines, tabs, and whitespace). Finally, we want to insert commas between each element, but we don&rsquo;t want a comma trailing after the final element:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// Helper method for generating a tab as 3 spaces</span>
</span><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">tab</span><span class="p">(</span><span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">retval</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">depth</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span><span class="n">retval</span> <span class="o">+=</span> <span class="s">&quot;   &quot;</span><span class="p">;}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">retval</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">array_serializer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">array_serializer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// If T is an array type then removes the top level array qualifier from T, otherwise leaves T unchanged. </span>
</span><span class='line'>   <span class="c1">// For example &quot;int[2][3]&quot; becomes &quot;int[3]&quot;.</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">remove_bounds</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span> <span class="n">slice_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Determine the size of the array by dividing out the size of its elements</span>
</span><span class='line'>   <span class="k">static</span> <span class="k">const</span> <span class="n">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">slice_t</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Indent the stream</span>
</span><span class='line'>      <span class="n">os</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;[&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// For each element in the array</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">size</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="c1">// Serialize the element</span>
</span><span class='line'>         <span class="n">json_serializer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">slice_t</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// As long as we are not after the last element</span>
</span><span class='line'>         <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Add a comma separator</span>
</span><span class='line'>            <span class="n">os</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Close the array representation</span>
</span><span class='line'>      <span class="n">os</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>The container serializer is very similar; we use <code>BOOST_FOREACH</code> to do the iteration, and pull the <code>value_type</code> out of the container, but everything else is the same:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">container_serializer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">container_serializer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">os</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;[&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Use the container&#39;s size method</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// STL containers all have a &quot;value_type&quot; typedef</span>
</span><span class='line'>      <span class="n">BOOST_FOREACH</span><span class="p">(</span><span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">value_type</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">v</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="c1">// Serialize each value</span>
</span><span class='line'>         <span class="n">json_serializer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">value_type</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">!=</span> <span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="n">os</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Keep track of the count so we can tell when a comma separator is needed</span>
</span><span class='line'>         <span class="o">++</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">os</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>The last serializer is the <code>struct_serializer</code>. This one is trickier. Structures are adapted as <code>Boost::Fusion</code> sequences by the boilerplate we defined above. A sequence is basically a vector, except each element can have a different type. In this case, the type/value pairs correspond directly with the members of the structure, and we can iterate over these members. We will accomplish this through recursion.</p>

<p>Before we get to the serializer, lets define some wrappers for interacting with the sequences in a friendlier way. We can get properties of the sequence as a whole, or we can get properties of a certain element in the sequence by using it&rsquo;s index. You can even get an element&rsquo;s member name and member type as a string (which is very handy when writing an XML serializer):</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">sequence</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// Point to the first element</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">begin</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Point to the element after the last element in the sequence</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">size</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Point to the first element</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">first</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Point to the second element (for pairs)</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">1</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">second</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Point to the last element in the sequence</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">prior</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">end</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span> <span class="n">last</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Number of elements in the sequence</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">size</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span>
</span><span class='line'>         <span class="k">typename</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">element_at</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// Type of the element at this index</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">value_at</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Previous element</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">prior</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span> <span class="n">previous</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Next element</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">next</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Member name of the element at this index</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">extension</span><span class="o">::</span><span class="n">struct_member_name</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">::</span><span class="n">value</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">call</span><span class="p">();</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Type name of the element at this index</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">type_name</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">units</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">demangle</span><span class="p">(</span><span class="k">typeid</span><span class="p">(</span><span class="n">type</span><span class="p">).</span><span class="n">name</span><span class="p">());</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Access the element</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">at</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span> <span class="k">const</span><span class="p">,</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span> <span class="n">get</span><span class="p">(</span><span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">at</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>Next we define the recursive struct serializer. The layout is similar to our other serializers, except this time there are two template parameters: the sequence and the element index.</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">struct_serializer_recursive</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>Using the above sequence helpers, we can obtain the type of the current element, and the index of the next element. We can also get the name of the element being serialized, it&rsquo;s type, and it&rsquo;s value:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// Current element</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span> <span class="n">current_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Next element</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">next</span> <span class="n">next_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Name of current element</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">name</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Value of current element</span>
</span><span class='line'><span class="n">current_t</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">get</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>Structures will be represented as key/value pairs separated by commas. Each value might be an array, container, or nested structure; therefore we need to call the <code>json_serializer</code> on each element. The final step is to recurse to the next element of the sequence. So a complete implementation would look like this:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">struct_serializer_recursive</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// Get the current and next elements</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span> <span class="n">current_t</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">next</span> <span class="n">next_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// The name of the element is the key</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">name</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// The element itself is the value</span>
</span><span class='line'>      <span class="n">current_t</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">get</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Output the key</span>
</span><span class='line'>      <span class="n">os</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>         <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">name</span>
</span><span class='line'>         <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s"> : &quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Recursively output the value</span>
</span><span class='line'>      <span class="n">json_serializer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">current_t</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">depth</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Add a separator for the next element</span>
</span><span class='line'>      <span class="c1">// (Pay attention to this, we will revisit it later)</span>
</span><span class='line'>      <span class="n">os</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Perform a recursive call to the next element</span>
</span><span class='line'>      <span class="n">struct_serializer_recursive</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="n">next_t</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">depth</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>We need to define the base case to stop the recursion. To do this, we use template specialization for the last element of the sequence. Then, we initiate the recursion by calling into the first element of the sequence:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// Specialize on the last element in the sequence</span>
</span><span class='line'><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">struct_serializer_recursive</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">end</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// No output</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Initiate the recursion by calling into the first element</span>
</span><span class='line'><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">struct_serializer_initiate</span> <span class="o">:</span> <span class="n">struct_serializer_recursive</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">begin</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>With the help of these pieces, we can implement the <code>struct_serializer</code>:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">struct_serializer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">struct_serializer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Begin recursing into the structure sequence</span>
</span><span class='line'>      <span class="n">os</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;{&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">struct_serializer_initiate</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="n">os</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>Now that all four serializers are implemented, we need a way to determine which one to use. To do this, we will utilize Boost&rsquo;s <code>type traits</code> to determine the properties of each type. Boost provides type traits for arrays and classes (which we have adapted into sequences), as well as a hidden one that identifies containers. Anything left over is treated as a primitive. This can be accomplished with some metaprogramming magic and a series of if-then-else statements:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">choose_serializer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// Very large typedef, indented to show the different nested levels</span>
</span><span class='line'>   <span class="k">typedef</span>
</span><span class='line'>   <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">eval_if</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">boost</span><span class="o">::</span><span class="n">is_array</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;,</span>                                                                                      <span class="c1">// If the type is an array,</span>
</span><span class='line'>                                <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">identity</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">array_serializer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;,</span>                                                              <span class="c1">// use the array serializer</span>
</span><span class='line'>                                <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">eval_if</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">boost</span><span class="o">::</span><span class="n">spirit</span><span class="o">::</span><span class="n">traits</span><span class="o">::</span><span class="n">is_container</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;,</span>                                     <span class="c1">// Otherwise, check to see if it is a container (using the hidden type-trait)</span>
</span><span class='line'>                                                             <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">identity</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">container_serializer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;,</span>                             <span class="c1">// If so, use the container serializer</span>
</span><span class='line'>                                                             <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">eval_if</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">boost</span><span class="o">::</span><span class="n">is_class</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;,</span>                            <span class="c1">// Otherwise, check to see if it is a structure</span>
</span><span class='line'>                                                                                          <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">identity</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">struct_serializer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;,</span>   <span class="c1">// If so, use the structure serializer</span>
</span><span class='line'>                                                                                          <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">identity</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">primitive_serializer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="c1">// If all else fails, treat it as a primitive.</span>
</span><span class='line'>                                                                                         <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>                                                            <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>                               <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span>
</span><span class='line'>   <span class="n">type</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>The last piece is to wrap all this code up into a <code>json_serializer</code> and utilize it with a mixin. The mixin uses <code>CRTP</code> in which a structure inherits from the mixin and passes itself in as the template parameter. The mixin can then cast itself to the class type and begin iterating over itself:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// The json serializer adapts itself to the top level type</span>
</span><span class='line'><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">json_serializer</span> <span class="o">:</span> <span class="k">public</span> <span class="n">choose_serializer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This is the mixin to inherit from</span>
</span><span class='line'><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">json</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// Returns the json representation of this class</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">to_json</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Serialize to a stringstream, convert booleans to strings. Start at a depth of 0.</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">ss</span><span class="p">;</span>
</span><span class='line'>      <span class="n">json_serializer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">serialize</span><span class="p">(</span><span class="n">ss</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">std</span><span class="o">::</span><span class="n">boolalpha</span><span class="p">,</span> <span class="n">self</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ss</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Cast ourselves to the template parameter since this is a mixin via CRTP</span>
</span><span class='line'>   <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">self</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">*</span><span class="k">static_cast</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span> <span class="k">const</span><span class="o">*&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>Time to test it out! Instantiate the structure and populate it. Remember to apply the mixin via inheritance (<code>struct outer : public json&lt;outer&gt;</code>):</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">outer</span> <span class="n">o</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">one</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">two</span> <span class="o">=</span> <span class="mf">2.2</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">three</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">b</span> <span class="o">=</span> <span class="mf">4.4</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">c</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">d</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">11</span><span class="p">);</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">d</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">22</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">b</span> <span class="o">=</span> <span class="mf">6.6</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">c</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">d</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">33</span><span class="p">);</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">d</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">44</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">s</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">55</span><span class="p">);</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">s</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">66</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">77</span><span class="p">]</span> <span class="o">=</span> <span class="mi">88</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">99</span><span class="p">]</span> <span class="o">=</span> <span class="mi">111</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">o</span><span class="p">.</span><span class="n">to_json</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>The resulting Json printed out looks like this:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;pre&gt;&lt;code&gt;</span><span class="p">{</span>
</span><span class='line'>   <span class="nt">&quot;one&quot;</span> <span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;two&quot;</span> <span class="p">:</span> <span class="s2">&quot;2.2&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;three&quot;</span> <span class="p">:</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;array&quot;</span> <span class="p">:</span>
</span><span class='line'>   <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="nt">&quot;a&quot;</span> <span class="p">:</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;b&quot;</span> <span class="p">:</span> <span class="s2">&quot;4.4&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;c&quot;</span> <span class="p">:</span> <span class="s2">&quot;true&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;d&quot;</span> <span class="p">:</span>
</span><span class='line'>         <span class="p">[</span><span class="s2">&quot;11&quot;</span><span class="p">,</span> <span class="s2">&quot;22&quot;</span>
</span><span class='line'>         <span class="p">],</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="nt">&quot;a&quot;</span> <span class="p">:</span> <span class="s2">&quot;5&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;b&quot;</span> <span class="p">:</span> <span class="s2">&quot;6.6&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;c&quot;</span> <span class="p">:</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;d&quot;</span> <span class="p">:</span>
</span><span class='line'>         <span class="p">[</span><span class="s2">&quot;33&quot;</span><span class="p">,</span> <span class="s2">&quot;44&quot;</span>
</span><span class='line'>         <span class="p">],</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">],</span>
</span><span class='line'>   <span class="nt">&quot;s&quot;</span> <span class="p">:</span>
</span><span class='line'>   <span class="p">[</span><span class="s2">&quot;55&quot;</span><span class="p">,</span> <span class="s2">&quot;66&quot;</span>
</span><span class='line'>   <span class="p">],</span>
</span><span class='line'>   <span class="nt">&quot;m&quot;</span> <span class="p">:</span>
</span><span class='line'>   <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="nt">&quot;first&quot;</span> <span class="p">:</span> <span class="s2">&quot;77&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;second&quot;</span> <span class="p">:</span> <span class="s2">&quot;88&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="nt">&quot;first&quot;</span> <span class="p">:</span> <span class="s2">&quot;99&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;second&quot;</span> <span class="p">:</span> <span class="s2">&quot;111&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">],</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>Close, but not quite. There are multiple issues:</p>

<ul>
<li>Arrays are formatted goofy (lines 12, 20, 25)</li>
<li>Trailing commas (lines 21, 37)</li>
<li>The map is represented as an array of pairs (lines 29-36)</li>
</ul>


<p>Fortunately, these issues are easily fixed.</p>

<p>The first issue is caused by the <code>primitive_serializer</code> not adding newlines for array values. This can be fixed with an extra boolean parameter that gets set when calling it from the <code>array_serializer</code>. You will find that you also want to set this extra parameter to true when calling from the <code>container_serializer</code>, since the containers are formatted as arrays. Note that all the serializer signatures need to be updated so they match, as well as each call to the serializer.:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">primitive_serializer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">primitive_serializer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Put in tabs if this is a value from an array (called from an array serializer)</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">array_value</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">os</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">t</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">os</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">t</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>Fixing the second issue (trailing commas) involves a little more template magic. The problem is caused by the comma being added inside <code>struct_serializer_recursive</code>. A comma is added just before the recursion hits the base case and stops. Instead, we should conditionally add this comma, but skip that step on the last element. To do this, we outsource the comma-insertion to a functor and specialize it for the last element:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// Return a proper comma separator for any element in the sequence.</span>
</span><span class='line'><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span>
</span><span class='line'>         <span class="k">typename</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">separator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">comma</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="s">&quot;,&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Specialize on the last element and prevent a comma from being returned.</span>
</span><span class='line'><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">separator</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">last</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">comma</span><span class="p">()</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>Now <code>os &lt;&lt; ", ";</code> can be replaced with <code>os &lt;&lt; separator&lt;S, N&gt;::comma();</code>.</p>

<p>The third issue is caused by the map container&rsquo;s value_type being a pair. Boost is kind enough to adapt pairs into structures for us, but the output isn&rsquo;t quite the way we want it. Instead, we want <code>first</code> to be treated as the key, and <code>second</code> to be treated as the value. To fix this, we make a modified copy of <code>struct_serializer_recursive</code> for pairs that doesn&rsquo;t access the member name&hellip;</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">pair_serializer_recursive</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span> <span class="n">current_t</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">next</span> <span class="n">next_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// For pairs, the member name will be &quot;first&quot; or &quot;second&quot;.</span>
</span><span class='line'>      <span class="c1">// Instead, treat the value of &quot;first&quot; as the key</span>
</span><span class='line'>      <span class="n">current_t</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">get</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">os</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>         <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">t</span>
</span><span class='line'>         <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s"> : &quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Then recurse and treat the value of &quot;second&quot; as the value</span>
</span><span class='line'>      <span class="n">pair_serializer_recursive</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="n">next_t</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Specialize on the second element of the pair to stop the recursion</span>
</span><span class='line'><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">pair_serializer_recursive</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">second</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">second</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">type</span> <span class="n">current_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">current_t</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">S</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">second</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">get</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Mimic the primitive serializer</span>
</span><span class='line'>      <span class="n">os</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>         <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">t</span>
</span><span class='line'>         <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Initiate the recursion</span>
</span><span class='line'><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">pair_serializer_initiate</span> <span class="o">:</span> <span class="k">public</span> <span class="n">pair_serializer_recursive</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">begin</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>&hellip;specialize the <code>container_serializer</code> for <code>std::map</code> to change the boolean flags being set on the serializer&hellip;</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// Specialize the container serializer on std::map</span>
</span><span class='line'><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">K</span><span class="p">,</span> <span class="k">typename</span> <span class="n">V</span><span class="p">,</span> <span class="k">typename</span> <span class="n">C</span><span class="p">,</span> <span class="k">typename</span> <span class="n">A</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">container_serializer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">A</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">A</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">container_serializer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">os</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;{&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">BOOST_FOREACH</span><span class="p">(</span><span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">value_type</span> <span class="n">v</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="c1">// This will end up calling the structure serializer, but we set the &quot;pair&quot; flag to true</span>
</span><span class='line'>         <span class="n">json_serializer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">value_type</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">!=</span> <span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="n">os</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="o">++</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">os</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>&hellip;and conditonally use the <code>pair_serializer</code> inside the <code>struct_serializer</code>:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">struct_serializer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">struct_serializer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// If being called from the std::map specialization of the container serializer,</span>
</span><span class='line'>      <span class="c1">// we should treat the values as pairs, so forward to the appropriate serializer</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">pair</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">pair_serializer_initiate</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">os</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;{&quot;</span><span class="p">;</span>
</span><span class='line'>         <span class="n">struct_serializer_initiate</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>         <span class="n">os</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>Unfortunately, this means we needed to add another boolean parameter for our serialize function (and all serializers must do this so the signatures all match). After all that, we get the following Json output:</p>

<p><!--escape--><div class='escape-wrapper'><notextile><!--content--><figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;pre&gt;&lt;code&gt;</span><span class="p">{</span>
</span><span class='line'>   <span class="nt">&quot;one&quot;</span> <span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;two&quot;</span> <span class="p">:</span> <span class="s2">&quot;2.2&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;three&quot;</span> <span class="p">:</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;array&quot;</span> <span class="p">:</span>
</span><span class='line'>   <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="nt">&quot;a&quot;</span> <span class="p">:</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;b&quot;</span> <span class="p">:</span> <span class="s2">&quot;4.4&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;c&quot;</span> <span class="p">:</span> <span class="s2">&quot;true&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;d&quot;</span> <span class="p">:</span>
</span><span class='line'>         <span class="p">[</span>
</span><span class='line'>            <span class="s2">&quot;11&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;22&quot;</span>
</span><span class='line'>         <span class="p">]</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="nt">&quot;a&quot;</span> <span class="p">:</span> <span class="s2">&quot;5&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;b&quot;</span> <span class="p">:</span> <span class="s2">&quot;6.6&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;c&quot;</span> <span class="p">:</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;d&quot;</span> <span class="p">:</span>
</span><span class='line'>         <span class="p">[</span>
</span><span class='line'>            <span class="s2">&quot;33&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;44&quot;</span>
</span><span class='line'>         <span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">],</span>
</span><span class='line'>   <span class="nt">&quot;s&quot;</span> <span class="p">:</span>
</span><span class='line'>   <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;55&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;66&quot;</span>
</span><span class='line'>   <span class="p">],</span>
</span><span class='line'>   <span class="nt">&quot;m&quot;</span> <span class="p">:</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;77&quot;</span> <span class="p">:</span> <span class="s2">&quot;88&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;99&quot;</span> <span class="p">:</span> <span class="s2">&quot;111&quot;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure><!--end-content--></notextile></div><!--end-escape--></p>

<p>It validates! While it is quite a bit, the nice thing is that all a user needs to do is perform the fusion adaption of their structure and inherit from the mixin; the rest is hidden behind the scenes.
Hopefully you learned some cool C++ tricks from this.</p>

<hr />

<p>This post was inspired by <a href="http://andres.senac.es/2011/04/generic-json-serializer.html">Andres Senac</a>.</p>
]]></content>
  </entry>
  
</feed>
