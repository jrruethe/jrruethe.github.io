<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Morning Musings]]></title>
  <link href="http://jrruethe.github.io/atom.xml" rel="self"/>
  <link href="http://jrruethe.github.io/"/>
  <updated>2015-06-28T16:57:56-04:00</updated>
  <id>http://jrruethe.github.io/</id>
  <author>
    <name><![CDATA[Joe Ruether]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Boost Fusion Json Serializer]]></title>
    <link href="http://jrruethe.github.io/blog/2015/05/21/boost-fusion-json-serializer/"/>
    <updated>2015-05-21T19:21:50-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/05/21/boost-fusion-json-serializer</id>
    <content type="html"><![CDATA[<p>In this post, I am going to walkthrough the creation of a C++ mixin that will allow any structure to serialize itself to Json, using the magical power of Boost::Fusion.</p>

<p>To do this, you will need the following installed:</p>

<ul>
<li>libboost-dev</li>
</ul>


<p>The Json serializer will support any structure composed of the following:</p>

<ul>
<li>Primitives</li>
<li>Arrays</li>
<li>Containers</li>
<li>Nested Structures</li>
</ul>


<p>First, we need a test structure that we want to serialize to Json. It needs to include some arrays, containers, and nested structures to test all the abilities of the serializer:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="k">struct</span> <span class="n">inner</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>       <span class="kt">double</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>       <span class="kt">bool</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vec_t</span><span class="p">;</span>
</span><span class='line'>       <span class="n">vec_t</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">struct</span> <span class="n">outer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="kt">int</span> <span class="n">one</span><span class="p">;</span>
</span><span class='line'>       <span class="kt">double</span> <span class="n">two</span><span class="p">;</span>
</span><span class='line'>       <span class="kt">bool</span> <span class="n">three</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">inner</span> <span class="n">array_t</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>       <span class="n">array_t</span> <span class="n">array</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">set_t</span><span class="p">;</span>
</span><span class='line'>       <span class="n">set_t</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">map_t</span><span class="p">;</span>
</span><span class='line'>       <span class="n">map_t</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Boost::Fusion is a library that enables reflection in C++ with only a small amount of boilerplate. Pay careful attention to the use of <code>()</code> instead of <code>{}</code>, and the placement of the <code>,</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="n">BOOST_FUSION_ADAPT_STRUCT</span>
</span><span class='line'>    <span class="p">(</span>
</span><span class='line'>       <span class="n">inner</span><span class="p">,</span>
</span><span class='line'>       <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="kt">double</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="n">inner</span><span class="o">::</span><span class="n">vec_t</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">BOOST_FUSION_ADAPT_STRUCT</span>
</span><span class='line'>    <span class="p">(</span>
</span><span class='line'>       <span class="n">outer</span><span class="p">,</span>
</span><span class='line'>       <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="n">one</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="kt">double</span><span class="p">,</span> <span class="n">two</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="n">three</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="n">outer</span><span class="o">::</span><span class="n">array_t</span><span class="p">,</span> <span class="n">array</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="n">outer</span><span class="o">::</span><span class="n">set_t</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="n">outer</span><span class="o">::</span><span class="n">map_t</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we define a serializer for each meta-type that needs to be supported. Each serializer will take a reference to an output stream that will be appended to, a type to serialize, and the current recursion depth. The depth is useful for pretty-printing with the proper indentation. All four will start off following the same pattern before we complete the implementation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">primitive_serializer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">primitive_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">array_serializer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">array_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">container_serializer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">container_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">struct_serializer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">struct_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>primitive_serializer</code> is the simplest one to implement, so lets start with that one. It will enclose the value in quotation marks and append it to the stream:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">primitive_serializer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">primitive_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>             <span class="o">&lt;&lt;</span> <span class="n">t</span>
</span><span class='line'>             <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, lets implement the <code>array_serializer</code>. We need to get the size of the array, and iterate over it while serializing each element. Notice the use of newlines and tabs, and the increase in the recursion depth; we want the Json output to be pretty, as opposed to compressed (Switching to a compressed version is as simple as removing the newlines, tabs, and whitespace). Finally, we want to insert commas between each element, but we don&rsquo;t want a comma trailing after the final element:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="c1">// Helper method for generating a tab as 3 spaces</span>
</span><span class='line'>    <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">tab</span><span class="p">(</span><span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">retval</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">depth</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span><span class="n">retval</span> <span class="o">+=</span> <span class="s">&quot;   &quot;</span><span class="p">;}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">retval</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">array_serializer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">array_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// If T is an array type then removes the top level array qualifier from T, otherwise leaves T unchanged. </span>
</span><span class='line'>       <span class="c1">// For example &quot;int[2][3]&quot; becomes &quot;int[3]&quot;.</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">remove_bounds</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">slice_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Determine the size of the array by dividing out the size of its elements</span>
</span><span class='line'>       <span class="k">static</span> <span class="k">const</span> <span class="n">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">slice_t</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="c1">// Indent the stream</span>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;[&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// For each element in the array</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="c1">// Serialize the element</span>
</span><span class='line'>             <span class="n">json_serializer</span><span class="o">&lt;</span><span class="n">slice_t</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>             <span class="c1">// As long as we are not after the last element</span>
</span><span class='line'>             <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>             <span class="p">{</span>
</span><span class='line'>                <span class="c1">// Add a comma separator</span>
</span><span class='line'>                <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>             <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Close the array representation</span>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The container serializer is very similar; we use <code>BOOST_FOREACH</code> to do the iteration, and pull the <code>value_type</code> out of the container, but everything else is the same:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">container_serializer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">container_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;[&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Use the container&#39;s size method</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// STL containers all have a &quot;value_type&quot; typedef</span>
</span><span class='line'>          <span class="n">BOOST_FOREACH</span><span class="p">(</span><span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">value_type</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">v</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="c1">// Serialize each value</span>
</span><span class='line'>             <span class="n">json_serializer</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">value_type</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>             <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">!=</span> <span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>             <span class="p">{</span>
</span><span class='line'>                <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>             <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>             <span class="c1">// Keep track of the count so we can tell when a comma separator is needed</span>
</span><span class='line'>             <span class="o">++</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last serializer is the <code>struct_serializer</code>. This one is trickier. Structures are adapted as <code>Boost::Fusion</code> sequences by the boilerplate we defined above. A sequence is basically a vector, except each element can have a different type. In this case, the type/value pairs correspond directly with the members of the structure, and we can iterate over these members. We will accomplish this through recursion.</p>

<p>Before we get to the serializer, lets define some wrappers for interacting with the sequences in a friendlier way. We can get properties of the sequence as a whole, or we can get properties of a certain element in the sequence by using it&rsquo;s index. You can even get an element&rsquo;s member name and member type as a string (which is very handy when writing an XML serializer):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sequence</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="c1">// Point to the first element</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">begin</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Point to the element after the last element in the sequence</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">size</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Point to the first element</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">first</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Point to the second element (for pairs)</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span> <span class="n">second</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Point to the last element in the sequence</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">prior</span><span class="o">&lt;</span><span class="n">end</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">last</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Number of elements in the sequence</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">size</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span>
</span><span class='line'>             <span class="k">typename</span> <span class="n">N</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">element_at</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="c1">// Type of the element at this index</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">value_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Previous element</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">prior</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">previous</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Next element</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">next</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Member name of the element at this index</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">extension</span><span class="o">::</span><span class="n">struct_member_name</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">::</span><span class="n">value</span><span class="o">&gt;::</span><span class="n">call</span><span class="p">();</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Type name of the element at this index</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">type_name</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">units</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">demangle</span><span class="p">(</span><span class="k">typeid</span><span class="p">(</span><span class="n">type</span><span class="p">).</span><span class="n">name</span><span class="p">());</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Access the element</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">at</span><span class="o">&lt;</span><span class="n">S</span> <span class="k">const</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">get</span><span class="p">(</span><span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">at</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we define the recursive struct serializer. The layout is similar to our other serializers, except this time there are two template parameters: the sequence and the element index.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">N</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">struct_serializer_recursive</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the above sequence helpers, we can obtain the type of the current element, and the index of the next element. We can also get the name of the element being serialized, it&rsquo;s type, and it&rsquo;s value:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="c1">// Current element</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">current_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Next element</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">next</span> <span class="n">next_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Name of current element</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">name</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Value of current element</span>
</span><span class='line'>    <span class="n">current_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">get</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Structures will be represented as key/value pairs separated by commas. Each value might be an array, container, or nested structure; therefore we need to call the <code>json_serializer</code> on each element. The final step is to recurse to the next element of the sequence. So a complete implementation would look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">N</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">struct_serializer_recursive</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="c1">// Get the current and next elements</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">current_t</span><span class="p">;</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">next</span> <span class="n">next_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="c1">// The name of the element is the key</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">name</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// The element itself is the value</span>
</span><span class='line'>          <span class="n">current_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">get</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Output the key</span>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>             <span class="o">&lt;&lt;</span> <span class="n">name</span>
</span><span class='line'>             <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s"> : &quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Recursively output the value</span>
</span><span class='line'>          <span class="n">json_serializer</span><span class="o">&lt;</span><span class="n">current_t</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">depth</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Add a separator for the next element</span>
</span><span class='line'>          <span class="c1">// (Pay attention to this, we will revisit it later)</span>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Perform a recursive call to the next element</span>
</span><span class='line'>          <span class="n">struct_serializer_recursive</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">next_t</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">depth</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>We need to define the base case to stop the recursion. To do this, we use template specialization for the last element of the sequence. Then, we initiate the recursion by calling into the first element of the sequence:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="c1">// Specialize on the last element in the sequence</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">struct_serializer_recursive</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">end</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="c1">// No output</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Initiate the recursion by calling into the first element</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">struct_serializer_initiate</span> <span class="o">:</span> <span class="n">struct_serializer_recursive</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">begin</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the help of these pieces, we can implement the <code>struct_serializer</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">struct_serializer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">struct_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="c1">// Begin recursing into the structure sequence</span>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;{&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">struct_serializer_initiate</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that all four serializers are implemented, we need a way to determine which one to use. To do this, we will utilize Boost&rsquo;s <code>type traits</code> to determine the properties of each type. Boost provides type traits for arrays and classes (which we have adapted into sequences), as well as a hidden one that identifies containers. Anything left over is treated as a primitive. This can be accomplished with some metaprogramming magic and a series of if-then-else statements:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">choose_serializer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="c1">// Very large typedef, indented to show the different nested levels</span>
</span><span class='line'>       <span class="k">typedef</span>
</span><span class='line'>       <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">eval_if</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">is_array</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">,</span>                                                                                      <span class="c1">// If the type is an array,</span>
</span><span class='line'>                                    <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">identity</span><span class="o">&lt;</span><span class="n">array_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">,</span>                                                              <span class="c1">// use the array serializer</span>
</span><span class='line'>                                    <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">eval_if</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">spirit</span><span class="o">::</span><span class="n">traits</span><span class="o">::</span><span class="n">is_container</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">,</span>                                     <span class="c1">// Otherwise, check to see if it is a container (using the hidden type-trait)</span>
</span><span class='line'>                                                                 <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">identity</span><span class="o">&lt;</span><span class="n">container_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">,</span>                             <span class="c1">// If so, use the container serializer</span>
</span><span class='line'>                                                                 <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">eval_if</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">is_class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">,</span>                            <span class="c1">// Otherwise, check to see if it is a structure</span>
</span><span class='line'>                                                                                              <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">identity</span><span class="o">&lt;</span><span class="n">struct_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">,</span>   <span class="c1">// If so, use the structure serializer</span>
</span><span class='line'>                                                                                              <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">identity</span><span class="o">&lt;</span><span class="n">primitive_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="c1">// If all else fails, treat it as a primitive.</span>
</span><span class='line'>                                                                                             <span class="o">&gt;</span>
</span><span class='line'>                                                                <span class="o">&gt;</span>
</span><span class='line'>                                   <span class="o">&gt;::</span><span class="n">type</span>
</span><span class='line'>       <span class="n">type</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last piece is to wrap all this code up into a <code>json_serializer</code> and utilize it with a mixin. The mixin uses <code>CRTP</code> in which a structure inherits from the mixin and passes itself in as the template parameter. The mixin can then cast itself to the class type and begin iterating over itself:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="c1">// The json serializer adapts itself to the top level type</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">json_serializer</span> <span class="o">:</span> <span class="k">public</span> <span class="n">choose_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// This is the mixin to inherit from</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">json</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="c1">// Returns the json representation of this class</span>
</span><span class='line'>       <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">to_json</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="c1">// Serialize to a stringstream, convert booleans to strings. Start at a depth of 0.</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">ss</span><span class="p">;</span>
</span><span class='line'>          <span class="n">json_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">boolalpha</span><span class="p">,</span> <span class="n">self</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">ss</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Cast ourselves to the template parameter since this is a mixin via CRTP</span>
</span><span class='line'>       <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">self</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">*</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="n">T</span> <span class="k">const</span><span class="o">*&gt;</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Time to test it out! Instantiate the structure and populate it. Remember to apply the mixin via inheritance (<code>struct outer : public json&lt;outer&gt;</code>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="n">outer</span> <span class="n">o</span><span class="p">;</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">one</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">two</span> <span class="o">=</span> <span class="mf">2.2</span><span class="p">;</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">three</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">b</span> <span class="o">=</span> <span class="mf">4.4</span><span class="p">;</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">c</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">d</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">11</span><span class="p">);</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">d</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">22</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">b</span> <span class="o">=</span> <span class="mf">6.6</span><span class="p">;</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">c</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">d</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">33</span><span class="p">);</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">d</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">44</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">s</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">55</span><span class="p">);</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">s</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">66</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">77</span><span class="p">]</span> <span class="o">=</span> <span class="mi">88</span><span class="p">;</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">99</span><span class="p">]</span> <span class="o">=</span> <span class="mi">111</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">o</span><span class="p">.</span><span class="n">to_json</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The resulting Json printed out looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="nt">&quot;one&quot;</span> <span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;two&quot;</span> <span class="p">:</span> <span class="s2">&quot;2.2&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;three&quot;</span> <span class="p">:</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;array&quot;</span> <span class="p">:</span>
</span><span class='line'>       <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="nt">&quot;a&quot;</span> <span class="p">:</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;b&quot;</span> <span class="p">:</span> <span class="s2">&quot;4.4&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;c&quot;</span> <span class="p">:</span> <span class="s2">&quot;true&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;d&quot;</span> <span class="p">:</span>
</span><span class='line'>             <span class="p">[</span><span class="s2">&quot;11&quot;</span><span class="p">,</span> <span class="s2">&quot;22&quot;</span>
</span><span class='line'>             <span class="p">],</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="nt">&quot;a&quot;</span> <span class="p">:</span> <span class="s2">&quot;5&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;b&quot;</span> <span class="p">:</span> <span class="s2">&quot;6.6&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;c&quot;</span> <span class="p">:</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;d&quot;</span> <span class="p">:</span>
</span><span class='line'>             <span class="p">[</span><span class="s2">&quot;33&quot;</span><span class="p">,</span> <span class="s2">&quot;44&quot;</span>
</span><span class='line'>             <span class="p">],</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>       <span class="p">],</span>
</span><span class='line'>       <span class="nt">&quot;s&quot;</span> <span class="p">:</span>
</span><span class='line'>       <span class="p">[</span><span class="s2">&quot;55&quot;</span><span class="p">,</span> <span class="s2">&quot;66&quot;</span>
</span><span class='line'>       <span class="p">],</span>
</span><span class='line'>       <span class="nt">&quot;m&quot;</span> <span class="p">:</span>
</span><span class='line'>       <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="nt">&quot;first&quot;</span> <span class="p">:</span> <span class="s2">&quot;77&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;second&quot;</span> <span class="p">:</span> <span class="s2">&quot;88&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="nt">&quot;first&quot;</span> <span class="p">:</span> <span class="s2">&quot;99&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;second&quot;</span> <span class="p">:</span> <span class="s2">&quot;111&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>       <span class="p">],</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Close, but not quite. There are multiple issues:</p>

<ul>
<li>Arrays are formatted goofy (lines 12, 20, 25)</li>
<li>Trailing commas (lines 21, 37)</li>
<li>The map is represented as an array of pairs (lines 29-36)</li>
</ul>


<p>Fortunately, these issues are easily fixed.</p>

<p>The first issue is caused by the <code>primitive_serializer</code> not adding newlines for array values. This can be fixed with an extra boolean parameter that gets set when calling it from the <code>array_serializer</code>. You will find that you also want to set this extra parameter to true when calling from the <code>container_serializer</code>, since the containers are formatted as arrays. Note that all the serializer signatures need to be updated so they match, as well as each call to the serializer.:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">primitive_serializer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">primitive_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="c1">// Put in tabs if this is a value from an array (called from an array serializer)</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">array_value</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>                <span class="o">&lt;&lt;</span> <span class="n">t</span>
</span><span class='line'>                <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>                <span class="o">&lt;&lt;</span> <span class="n">t</span>
</span><span class='line'>                <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fixing the second issue (trailing commas) involves a little more template magic. The problem is caused by the comma being added inside <code>struct_serializer_recursive</code>. A comma is added just before the recursion hits the base case and stops. Instead, we should conditionally add this comma, but skip that step on the last element. To do this, we outsource the comma-insertion to a functor and specialize it for the last element:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="c1">// Return a proper comma separator for any element in the sequence.</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span>
</span><span class='line'>             <span class="k">typename</span> <span class="n">N</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">separator</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">comma</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>           <span class="k">return</span> <span class="s">&quot;,&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Specialize on the last element and prevent a comma from being returned.</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">separator</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">last</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">comma</span><span class="p">()</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now <code>os &lt;&lt; ", ";</code> can be replaced with <code>os &lt;&lt; separator&lt;S, N&gt;::comma();</code>.</p>

<p>The third issue is caused by the map container&rsquo;s value_type being a pair. Boost is kind enough to adapt pairs into structures for us, but the output isn&rsquo;t quite the way we want it. Instead, we want <code>first</code> to be treated as the key, and <code>second</code> to be treated as the value. To fix this, we make a modified copy of <code>struct_serializer_recursive</code> for pairs that doesn&rsquo;t access the member name&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">N</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">pair_serializer_recursive</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">current_t</span><span class="p">;</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">next</span> <span class="n">next_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="c1">// For pairs, the member name will be &quot;first&quot; or &quot;second&quot;.</span>
</span><span class='line'>          <span class="c1">// Instead, treat the value of &quot;first&quot; as the key</span>
</span><span class='line'>          <span class="n">current_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">get</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>             <span class="o">&lt;&lt;</span> <span class="n">t</span>
</span><span class='line'>             <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s"> : &quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Then recurse and treat the value of &quot;second&quot; as the value</span>
</span><span class='line'>          <span class="n">pair_serializer_recursive</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">next_t</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Specialize on the second element of the pair to stop the recursion</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">pair_serializer_recursive</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">second</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">second</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">current_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="n">current_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">second</span><span class="o">&gt;::</span><span class="n">get</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Mimic the primitive serializer</span>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>             <span class="o">&lt;&lt;</span> <span class="n">t</span>
</span><span class='line'>             <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Initiate the recursion</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">pair_serializer_initiate</span> <span class="o">:</span> <span class="k">public</span> <span class="n">pair_serializer_recursive</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">begin</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;specialize the <code>container_serializer</code> for <code>std::map</code> to change the boolean flags being set on the serializer&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="c1">// Specialize the container serializer on std::map</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">K</span><span class="p">,</span> <span class="k">typename</span> <span class="n">V</span><span class="p">,</span> <span class="k">typename</span> <span class="n">C</span><span class="p">,</span> <span class="k">typename</span> <span class="n">A</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">container_serializer</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">A</span><span class="o">&gt;</span> <span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">A</span><span class="o">&gt;</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">container_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;{&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">BOOST_FOREACH</span><span class="p">(</span><span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">value_type</span> <span class="n">v</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="c1">// This will end up calling the structure serializer, but we set the &quot;pair&quot; flag to true</span>
</span><span class='line'>             <span class="n">json_serializer</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">value_type</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>             <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">!=</span> <span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>             <span class="p">{</span>
</span><span class='line'>                <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>             <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>             <span class="o">++</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;and conditonally use the <code>pair_serializer</code> inside the <code>struct_serializer</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">struct_serializer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">struct_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="c1">// If being called from the std::map specialization of the container serializer,</span>
</span><span class='line'>          <span class="c1">// we should treat the values as pairs, so forward to the appropriate serializer</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">pair</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="n">pair_serializer_initiate</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;{&quot;</span><span class="p">;</span>
</span><span class='line'>             <span class="n">struct_serializer_initiate</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>             <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, this means we needed to add another boolean parameter for our serialize function (and all serializers must do this so the signatures all match). After all that, we get the following Json output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="nt">&quot;one&quot;</span> <span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;two&quot;</span> <span class="p">:</span> <span class="s2">&quot;2.2&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;three&quot;</span> <span class="p">:</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;array&quot;</span> <span class="p">:</span>
</span><span class='line'>       <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="nt">&quot;a&quot;</span> <span class="p">:</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;b&quot;</span> <span class="p">:</span> <span class="s2">&quot;4.4&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;c&quot;</span> <span class="p">:</span> <span class="s2">&quot;true&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;d&quot;</span> <span class="p">:</span>
</span><span class='line'>             <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;11&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;22&quot;</span>
</span><span class='line'>             <span class="p">]</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="nt">&quot;a&quot;</span> <span class="p">:</span> <span class="s2">&quot;5&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;b&quot;</span> <span class="p">:</span> <span class="s2">&quot;6.6&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;c&quot;</span> <span class="p">:</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;d&quot;</span> <span class="p">:</span>
</span><span class='line'>             <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;33&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;44&quot;</span>
</span><span class='line'>             <span class="p">]</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>       <span class="p">],</span>
</span><span class='line'>       <span class="nt">&quot;s&quot;</span> <span class="p">:</span>
</span><span class='line'>       <span class="p">[</span>
</span><span class='line'>          <span class="s2">&quot;55&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;66&quot;</span>
</span><span class='line'>       <span class="p">],</span>
</span><span class='line'>       <span class="nt">&quot;m&quot;</span> <span class="p">:</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;77&quot;</span> <span class="p">:</span> <span class="s2">&quot;88&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;99&quot;</span> <span class="p">:</span> <span class="s2">&quot;111&quot;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It validates! Below is the final form of the code. While it is quite a bit, the nice thing is that all a user needs to do is perform the fusion adaption of their structure and inherit from the mixin; the rest is hidden behind the scenes.</p>

<figure class='code'><figcaption><span> (json.cpp)</span> <a href='http://jrruethe.github.io/downloads/code/json.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// json.cpp</span>
</span><span class='line'><span class="c1">// Copyright (C) 2015 Joe Ruether jrruethe@gmail.com</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c1">// it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c1">// the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c1">// (at your option) any later version.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c1">// GNU General Public License for more details.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c1">// along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;boost/foreach.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/adapted.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/include/at.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/include/size.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/include/value_at.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/mpl.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/sequence/intrinsic/at.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/sequence/intrinsic/size.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/sequence/intrinsic/value_at.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/mpl/eval_if.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/mpl/identity.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/mpl/next_prior.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/spirit/home/support/container.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/type_traits.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/units/detail/utility.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">sequence</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// Point to the first element</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">begin</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Point to the element after the last element in the sequence</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">size</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Point to the first element</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">first</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Point to the second element (for pairs)</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span> <span class="n">second</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Point to the last element in the sequence</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">prior</span><span class="o">&lt;</span><span class="n">end</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">last</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Number of elements in the sequence</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">size</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span>
</span><span class='line'>          <span class="k">typename</span> <span class="n">N</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">element_at</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// Type of the element at this index</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">value_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Previous element</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">prior</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">previous</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Next element</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">next</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Member name of the element at this index</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">extension</span><span class="o">::</span><span class="n">struct_member_name</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">::</span><span class="n">value</span><span class="o">&gt;::</span><span class="n">call</span><span class="p">();</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Type name of the element at this index</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">type_name</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">units</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">demangle</span><span class="p">(</span><span class="k">typeid</span><span class="p">(</span><span class="n">type</span><span class="p">).</span><span class="n">name</span><span class="p">());</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Access the element</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">at</span><span class="o">&lt;</span><span class="n">S</span> <span class="k">const</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">get</span><span class="p">(</span><span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">at</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Insert a comma into the stream</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span>
</span><span class='line'>         <span class="k">typename</span> <span class="n">N</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">separator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">comma</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="s">&quot;,&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Specialize for the last element in the sequence</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">separator</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">last</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">comma</span><span class="p">()</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Forward</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">json_serializer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">tab</span><span class="p">(</span><span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">retval</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">depth</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span><span class="n">retval</span> <span class="o">+=</span> <span class="s">&quot;   &quot;</span><span class="p">;}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">retval</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Occurs at every element of the sequence</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">N</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">struct_serializer_recursive</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">current_t</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">next</span> <span class="n">next_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">name</span><span class="p">();</span>
</span><span class='line'>      <span class="n">current_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">get</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>         <span class="o">&lt;&lt;</span> <span class="n">name</span>
</span><span class='line'>         <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s"> : &quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">json_serializer</span><span class="o">&lt;</span><span class="n">current_t</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">separator</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">comma</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">struct_serializer_recursive</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">next_t</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">struct_serializer_recursive</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">end</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// No output</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">struct_serializer_initiate</span> <span class="o">:</span> <span class="n">struct_serializer_recursive</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">begin</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">N</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">pair_serializer_recursive</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">current_t</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">next</span> <span class="n">next_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">current_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">get</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>         <span class="o">&lt;&lt;</span> <span class="n">t</span>
</span><span class='line'>         <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s"> : &quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">pair_serializer_recursive</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">next_t</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">pair_serializer_recursive</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">second</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">second</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">current_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">current_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">second</span><span class="o">&gt;::</span><span class="n">get</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>         <span class="o">&lt;&lt;</span> <span class="n">t</span>
</span><span class='line'>         <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">pair_serializer_initiate</span> <span class="o">:</span> <span class="k">public</span> <span class="n">pair_serializer_recursive</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">begin</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">array_serializer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">array_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">remove_bounds</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">slice_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="k">const</span> <span class="n">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">slice_t</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;[&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">json_serializer</span><span class="o">&lt;</span><span class="n">slice_t</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">container_serializer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">container_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;[&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">BOOST_FOREACH</span><span class="p">(</span><span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">value_type</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">v</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">json_serializer</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">value_type</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">!=</span> <span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="o">++</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">K</span><span class="p">,</span> <span class="k">typename</span> <span class="n">V</span><span class="p">,</span> <span class="k">typename</span> <span class="n">C</span><span class="p">,</span> <span class="k">typename</span> <span class="n">A</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">container_serializer</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">A</span><span class="o">&gt;</span> <span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">A</span><span class="o">&gt;</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">container_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;{&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">BOOST_FOREACH</span><span class="p">(</span><span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">value_type</span> <span class="n">v</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">json_serializer</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">value_type</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">!=</span> <span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="o">++</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">struct_serializer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">struct_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">pair</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">pair_serializer_initiate</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;{&quot;</span><span class="p">;</span>
</span><span class='line'>         <span class="n">struct_serializer_initiate</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>         <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">primitive_serializer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">primitive_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">array_value</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>            <span class="o">&lt;&lt;</span> <span class="n">t</span>
</span><span class='line'>            <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>            <span class="o">&lt;&lt;</span> <span class="n">t</span>
</span><span class='line'>            <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">choose_serializer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span>
</span><span class='line'>   <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">eval_if</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">is_array</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">identity</span><span class="o">&lt;</span><span class="n">array_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>                                <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">eval_if</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">spirit</span><span class="o">::</span><span class="n">traits</span><span class="o">::</span><span class="n">is_container</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>                                                             <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">identity</span><span class="o">&lt;</span><span class="n">container_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>                                                             <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">eval_if</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">is_class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>                                                                                          <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">identity</span><span class="o">&lt;</span><span class="n">struct_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>                                                                                          <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">identity</span><span class="o">&lt;</span><span class="n">primitive_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&gt;</span>
</span><span class='line'>                                                                                         <span class="o">&gt;</span>
</span><span class='line'>                                                            <span class="o">&gt;</span>
</span><span class='line'>                               <span class="o">&gt;::</span><span class="n">type</span>
</span><span class='line'>   <span class="n">type</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">json_serializer</span> <span class="o">:</span> <span class="k">public</span> <span class="n">choose_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">json</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">to_json</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">ss</span><span class="p">;</span>
</span><span class='line'>      <span class="n">json_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">boolalpha</span><span class="p">,</span> <span class="n">self</span><span class="p">(),</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ss</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">self</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">*</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="n">T</span> <span class="k">const</span><span class="o">*&gt;</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">////////////////////////////////////////////////////////////////////////////////</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">inner</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">double</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">bool</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vec_t</span><span class="p">;</span>
</span><span class='line'>   <span class="n">vec_t</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">outer</span> <span class="o">:</span> <span class="k">public</span> <span class="n">json</span><span class="o">&lt;</span><span class="n">outer</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">one</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">double</span> <span class="n">two</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">bool</span> <span class="n">three</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">inner</span> <span class="n">array_t</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>   <span class="n">array_t</span> <span class="n">array</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">set_t</span><span class="p">;</span>
</span><span class='line'>   <span class="n">set_t</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">map_t</span><span class="p">;</span>
</span><span class='line'>   <span class="n">map_t</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_FUSION_ADAPT_STRUCT</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>  <span class="n">inner</span><span class="p">,</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">double</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="n">inner</span><span class="o">::</span><span class="n">vec_t</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_FUSION_ADAPT_STRUCT</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>  <span class="n">outer</span><span class="p">,</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="n">one</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">double</span><span class="p">,</span> <span class="n">two</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="n">three</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="n">outer</span><span class="o">::</span><span class="n">array_t</span><span class="p">,</span> <span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="n">outer</span><span class="o">::</span><span class="n">set_t</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="n">outer</span><span class="o">::</span><span class="n">map_t</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">outer</span> <span class="n">o</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">one</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">two</span> <span class="o">=</span> <span class="mf">2.2</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">three</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">b</span> <span class="o">=</span> <span class="mf">4.4</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">c</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">d</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">11</span><span class="p">);</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">d</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">22</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">b</span> <span class="o">=</span> <span class="mf">6.6</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">c</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">d</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">33</span><span class="p">);</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">d</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">44</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">s</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">55</span><span class="p">);</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">s</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">66</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">77</span><span class="p">]</span> <span class="o">=</span> <span class="mi">88</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">99</span><span class="p">]</span> <span class="o">=</span> <span class="mi">111</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">o</span><span class="p">.</span><span class="n">to_json</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hopefully you learned some cool C++ tricks from this.</p>

<hr />

<p>This post was inspired by <a href="http://andres.senac.es/2011/04/generic-json-serializer.html">Andres Senac</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Temporary Security Mirror]]></title>
    <link href="http://jrruethe.github.io/blog/2015/05/02/temporary-security-mirror/"/>
    <updated>2015-05-02T15:31:12-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/05/02/temporary-security-mirror</id>
    <content type="html"><![CDATA[<p>Sometimes you need to perform a task in a secure way that leaves no trace on your computer. The traditional way of accomplishing this is to boot from a live CD like <a href="https://tails.boum.org/">Tails</a>. The problem with this is that you might need the software, drivers, or setup you have on your main operating system to accomplish the task. An example of this might be creating a Bitcoin Paper Wallet with a proprietary printer; it might be too difficult to set up the printer on a live CD for a one-off task.</p>

<p>Below is a script that help for these specialized cases. It creates a secure mirror of your system that never touches the disk; anything you do is wiped away on shutdown. Best part is, you can use this from an already running system.</p>

<p>This script will:</p>

<ul>
<li>Disable swap</li>
<li>Do a read only bind mount of root</li>
<li>Apply a tmpfs aufs layer over the read only root view</li>
<li>Start an X server and chroot into the root view</li>
</ul>


<p>The end result is a temporary secure mirror of your running system.<br/>
You need the following installed for this to work:</p>

<ul>
<li>aufs-tools</li>
<li>Xephyr</li>
<li>fluxbox</li>
</ul>


<p>Simply run <code>tsm.sh</code> and you will get a window of your running system, where anything you do is forgotten when closed. You will have access to all your files and devices. For more security, close any applications and disconnect your internet before running this script. When finished, close the window and restart your computer.</p>

<figure class='code'><figcaption><span> (tsm.sh)</span> <a href='http://jrruethe.github.io/downloads/code/tsm.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># tsm.sh</span>
</span><span class='line'><span class="c"># Copyright (C) 2015 Joe Ruether jrruethe@gmail.com</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c"># it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c"># the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c"># (at your option) any later version.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c"># GNU General Public License for more details.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c"># along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Stop on any error</span>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'>
</span><span class='line'><span class="c"># Declare an array of tasks to perform on exit</span>
</span><span class='line'><span class="nb">declare</span> -a on_exit_items
</span><span class='line'>
</span><span class='line'><span class="c"># This function is run on exit</span>
</span><span class='line'><span class="k">function </span>on_exit<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="k">for </span>i in <span class="s2">&quot;${on_exit_items[@]}&quot;</span>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'><span class="k">        </span><span class="nb">eval</span> <span class="nv">$i</span>
</span><span class='line'>    <span class="k">done</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Add to the list of tasks to run on exit</span>
</span><span class='line'><span class="k">function </span>add_on_exit_reverse<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nv">on_exit_items</span><span class="o">=(</span><span class="s2">&quot;$*&quot;</span> <span class="s2">&quot;${on_exit_items[@]}&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$n</span> -eq 0 <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">trap </span>on_exit EXIT
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Check to make sure we are running as root</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$EUID</span> -ne 0 <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">   </span><span class="nb">echo</span> <span class="s2">&quot;This script must be run as root&quot;</span>
</span><span class='line'>   <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Define variables</span>
</span><span class='line'><span class="nv">insecure_root</span><span class="o">=</span>insecure_root
</span><span class='line'><span class="nv">tmpfs_redirect</span><span class="o">=</span>tmpfs_redirect
</span><span class='line'><span class="nv">secure_root</span><span class="o">=</span>secure_root
</span><span class='line'>
</span><span class='line'><span class="c"># Disable Swap</span>
</span><span class='line'>swapoff -a
</span><span class='line'>
</span><span class='line'><span class="c"># Create the mount points</span>
</span><span class='line'>mkdir -p <span class="nv">$insecure_root</span>
</span><span class='line'>mkdir -p <span class="nv">$tmpfs_redirect</span>
</span><span class='line'>mkdir -p <span class="nv">$secure_root</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Clean up the mount points</span>
</span><span class='line'>add_on_exit_reverse rmdir <span class="nv">$insecure_root</span>
</span><span class='line'>add_on_exit_reverse rmdir <span class="nv">$tmpfs_redirect</span>
</span><span class='line'>add_on_exit_reverse rmdir <span class="nv">$secure_root</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Bind mount the root directory</span>
</span><span class='line'>mount --bind / <span class="nv">$insecure_root</span>
</span><span class='line'>add_on_exit_reverse umount <span class="nv">$insecure_root</span> <span class="o">||</span> umount -lf <span class="nv">$insecure_root</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Remount the root directory as read only</span>
</span><span class='line'>mount -o remount,ro,bind <span class="nv">$insecure_root</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Create a tmpfs filesystem</span>
</span><span class='line'>mount -t tmpfs tmpfs <span class="nv">$tmpfs_redirect</span>
</span><span class='line'>add_on_exit_reverse umount <span class="nv">$tmpfs_redirect</span> <span class="o">||</span> umount -lf <span class="nv">$tmpfs_redirect</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Aufs mount to redirect all </span>
</span><span class='line'>mount -t aufs -o <span class="nv">br</span><span class="o">=</span><span class="nv">$tmpfs_redirect</span><span class="o">=</span>rw:<span class="nv">$insecure_root</span><span class="o">=</span>ro none <span class="nv">$secure_root</span>
</span><span class='line'>add_on_exit_reverse umount <span class="nv">$secure_root</span> <span class="o">||</span> umount -lf <span class="nv">$secure_root</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Mount the necessary filesystems in the chroot</span>
</span><span class='line'>mount --bind /dev <span class="nv">$secure_root</span>/dev
</span><span class='line'>mount -t proc none <span class="nv">$secure_root</span>/proc
</span><span class='line'>mount -t sysfs none <span class="nv">$secure_root</span>/sys
</span><span class='line'>mount -t devpts none <span class="nv">$secure_root</span>/dev/pts
</span><span class='line'>
</span><span class='line'>add_on_exit_reverse umount <span class="nv">$secure_root</span>/dev <span class="o">||</span> umount -lf <span class="nv">$secure_root</span>/dev
</span><span class='line'>add_on_exit_reverse umount <span class="nv">$secure_root</span>/proc <span class="o">||</span> umount -lf <span class="nv">$secure_root</span>/proc
</span><span class='line'>add_on_exit_reverse umount <span class="nv">$secure_root</span>/sys <span class="o">||</span> umount -lf <span class="nv">$secure_root</span>/sys
</span><span class='line'>add_on_exit_reverse umount <span class="nv">$secure_root</span>/dev/pts <span class="o">||</span> umount -lf <span class="nv">$secure_root</span>/dev/pts
</span><span class='line'>
</span><span class='line'><span class="c"># Everything is set up, enter the chroot</span>
</span><span class='line'><span class="nb">set</span> +e
</span><span class='line'>
</span><span class='line'><span class="c"># Start the nested X server</span>
</span><span class='line'>Xephyr -screen 1024x768 -name <span class="s2">&quot;Temporary Security Mirror&quot;</span> -title <span class="s2">&quot;Temporary Security Mirror&quot;</span> :1 &amp;
</span><span class='line'>
</span><span class='line'><span class="c"># Wait for the X server to start</span>
</span><span class='line'>sleep 5
</span><span class='line'>
</span><span class='line'><span class="c"># Chroot in and startx</span>
</span><span class='line'>chroot <span class="nv">$secure_root</span> env <span class="nv">DISPLAY</span><span class="o">=</span>localhost:1 /usr/bin/fluxbox
</span><span class='line'>
</span><span class='line'><span class="c"># Wait for things to settle down</span>
</span><span class='line'>sleep 5
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Simple Bitcoin Analogy]]></title>
    <link href="http://jrruethe.github.io/blog/2015/04/26/bitcoin-analogy/"/>
    <updated>2015-04-26T12:59:49-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/04/26/bitcoin-analogy</id>
    <content type="html"><![CDATA[<p>Imagine there are a group of lockers in a public place. Each locker has the following:</p>

<ul>
<li>A lock that requires a key</li>
<li>A window to see inside</li>
<li>A slot that money can be put in</li>
<li>An identifying number</li>
</ul>


<p>A group of these lockers might look like this:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/04/26/bitcoin-analogy/01.jpg"><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>These lockers are secure. The windows are unbreakable, the locks cannot be picked, the metal cannot be cut, and the entire group is bolted to the ground. Furthermore, there is only one copy of the key, and it is in possession of that locker&rsquo;s owner; Nobody else is able to get inside without that key.</p>

<p>Each locker is free of charge. A person may claim any unused locker, upon which they get the only copy of the key. A person may have as many lockers as they choose; there is no shortage of lockers. People use &ldquo;wallets&rdquo; (which are more like keychains in this case) to keep track of all the lockers they own and their associated keys. If anyone loses their wallet, they lose the ability to open any of their lockers, and that money is inaccessible forever.</p>

<p>Because the group of lockers is in a public place, and each locker has a window, anyone is able to see how much money is in each locker. They can see the identifying numbers on the locker, but they do not know who the owner of the locker is.</p>

<p>This group of lockers represents the Blockchain, and the contents of each locker represent Bitcoins.</p>

<p>Alice is selling a chair that Bob wants to buy. Bob calls up Alice to make a deal:</p>

<blockquote><p>Bob: I&rsquo;d like to buy the chair you are selling. How much do you want for it?<br/>
Alice: I&rsquo;ll give it to you for 0.2 Bitcoins<br/>
Bob: Sounds great! Which locker number is yours?</p></blockquote>

<p>Alice goes to the group of lockers, sees that #412 is unclaimed, and claims it. She heads home with the key.</p>

<blockquote><p>Alice: Put the money in locker 412 please!</p></blockquote>

<p>Bob goes to the lockers, finds #412 and peeks inside. He can see that it is empty. Bob goes to his locker (#387), pulls out some money, and sticks it in the slot on locker #412. He then goes back home.</p>

<blockquote><p>Bob: I put the money in your locker!</p></blockquote>

<p>Alice goes to the lockers and checks the contents of locker #412 through the window. She sees the 0.2 Bitcoins sitting there. Since Bob is the only person she told about #412, the money must have come from him.</p>

<blockquote><p>Alice: I just checked, and I see the money in my locker. Here is your chair!</p></blockquote>

<p>The entire transaction was done without Alice and Bob ever needing to meet in person. No banks were involved in the transaction, there were no processing delays, there were no fees. Bob is unable to issue a &ldquo;chargeback&rdquo; to void his transaction; the money is already in Alice&rsquo;s locker, and only she can get it back out. Furthermore, anyone checking the contents of the lockers by peeking through the windows could only tell that a transaction was made; they are unable to discover who was involved.</p>

<p>This is the basic premise of Bitcoin. Learn more about Bitcoin <a href="http://www.coindesk.com/information/what-is-bitcoin/">here</a>.</p>

<p><em>This analogy was not my idea, I am paraphrasing <a href="http://thebitcoincatalog.com/safe-analogy/">Henry Romp</a>.</em></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>http://www.storageaspects.co.uk/shop/archive-mobile-shelving-archive-roller-racking/visitor-centre-lockers-with-see-through-doors/<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bitcoin Paper Wallets]]></title>
    <link href="http://jrruethe.github.io/blog/2015/04/23/bitcoin-paper-wallets/"/>
    <updated>2015-04-23T19:18:12-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/04/23/bitcoin-paper-wallets</id>
    <content type="html"><![CDATA[<p>Paper wallets are a form of <em>cold storage</em>, meaning that the private key has never touched a computer with internet access. This is one of the most secure ways to store Bitcoins when done properly. You should never use a paper wallet you did not create yourself. For that reason, this is a tutorial to create a paper wallet in a secure fashion.</p>

<p>A repository of paper wallet generators can be found <a href="https://github.com/jrruethe/paper_wallet">here</a>. You can choose to use my repository directly if you wish, but I recommend going straight to the source.
There are many options with different formats and templates, however I highly recommend bitcoinpaperwallet.com.</p>

<p><em>I am in no way affiliated with bitcoinpaperwallet.com, just a satisfied customer.</em></p>

<hr />

<h3><a href="https://bitcoinpaperwallet.com/">BitcoinPaperWallet.com</a> (<a href="https://github.com/cantonbecker/bitcoinpaperwallet">Github</a>)</h3>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/04/23/bitcoin-paper-wallets/01.jpg"></p>

<p>This is the most secure and well thought out design I have seen. The author has done a great job addressing the various attack vectors. His website is easy to use and provides all the relevant information needed. Furthermore, the generator is based on the popular and trusted <a href="https://www.bitaddress.org">bitaddress.org</a>. This paper wallet is perfect for cold storage and archival, but it takes a little extra work and materials to secure it properly. Fortunately, everything required can be bought right from the website, and you can pay in Bitcoin!</p>

<p>Features:</p>

<ul>
<li>&ldquo;Butterfly&rdquo; design secures the private key</li>
<li>Resistant to candling</li>
<li>Supports <a href="https://github.com/bitcoin/bips/blob/master/bip-0038.mediawiki">BIP38</a> encryption</li>
<li>Private key encoded in <a href="https://en.bitcoin.it/wiki/Wallet_import_format">Wallet Import Format</a></li>
<li>Designed to be printed in landscape mode, but works in portrait mode as well</li>
<li>Double sided</li>
<li>2x wallets per sheet</li>
<li>Notes section on the back</li>
<li>Public key visible when closed</li>
</ul>


<p>Additional Options:</p>

<ul>
<li><a href="https://bitcoinpaperwallet.com/">Security Stickers</a> 2in x .5in (<a href="http://www.amazon.com/gp/product/B00MWCCN7C">Alternative</a>)*</li>
<li><a href="https://bitcoinpaperwallet.com/">Waterproof Bag</a> 6in x 3in (<a href="http://www.amazon.com/Clear-Lock-Bags-Case-1000/dp/B0040003E4">Alternative</a>)</li>
<li><a href="http://www.amazon.com/dp/B004PX7ZTC">Teslin Paper</a> (Inkjet Printers)</li>
<li><a href="http://www.amazon.com/gp/product/B004UI335W/">Revlar Paper</a> (Laser Printers)</li>
<li><a href="http://www.amazon.com/gp/product/B00ENI0NI4">Scratch Off Stickers</a> 1in x 1in</li>
<li><a href="http://www.amazon.com/gp/product/B00BWU3HNY">Laminating Pouches</a> 8.9in x 11.4in</li>
<li><a href="http://www.amazon.com/gp/product/B0010JEJPC">Laminator</a></li>
</ul>


<blockquote><p>*The official security stickers from bitcoinpaperwallet.com are serialized in pairs, meaning you get two of each number. This is best because each paper wallet requires two stickers, so the numbers match. The alternative link only provides one sticker for each number.</p></blockquote>

<p>Dimensions:</p>

<ul>
<li>Landscape: 5.5in x 2.5in (Slightly smaller than a dollar bill)</li>
<li>Portrait: 4in x 2in (Slightly bigger than a standard business card)</li>
<li>QR Codes: 1in x 1in (About the size of a quarter)</li>
</ul>


<p>For additional artworks, check out <a href="http://libertywallet.liberty.me/2015/03/18/liberty-wallet/">Liberty Paper Wallet</a> (<a href="https://github.com/SimonBelmond/libertypaperwallet">Github</a>).</p>

<hr />

<h3>Protecting your paper wallet</h3>

<p>Paper wallets are extremely vulnerable to water.
Consider laminating your paper wallet for extra protection. An alternative could be to vaccuum seal it using a Foodsaver Vaccuum Sealer. At the very least, you should keep the paper wallet in a ziplock bag.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/04/23/bitcoin-paper-wallets/03.jpg"></p>

<p>Paper wallets are also extremely vulnerable to fire.
However, there is not much you can do about this other than keeping multiple backups in different physical locations, such as a safety deposit box.</p>

<blockquote><p>Remember, if you lose your paper wallet, or it is damaged, you lose all the coins stored at that address!</p></blockquote>

<hr />

<h3>How to properly create a paper wallet</h3>

<p>Paper wallets need to be created offline on a secure machine. For this tutorial, I will be using a <a href="https://tails.boum.org/">Tails</a> Live CD. Grab the ISO and burn it to a disk.</p>

<p>Save a <a href="https://github.com/cantonbecker/bitcoinpaperwallet/archive/master.zip">copy of bitcoinpaperwallet</a> onto a USB drive.</p>

<ol>
<li>Shutdown your computer and boot from the CD.</li>
<li>When the Tails welcome box appears, select &ldquo;More Options&rdquo;.</li>
<li>Enter an administrator password of your choice and login.</li>
<li>Wait for tor to become ready.</li>
</ol>


<blockquote><p>For this tutorial, in order to get screenshots I am using a virtual machine. Do not use a virtual machine when doing this for real!</p></blockquote>

<p>Before creating the paper wallet, you will want to ensure that your printer works correctly. You need a printer that is directly connected to your machine; don&rsquo;t use a network printer (you shouldn&rsquo;t be connected to any network). If possible, use a dumb printer, and try to ensure that your printer does not save a copy of printouts to internal memory. Use this time to get any drivers you need from the internet.</p>

<p>From the <code>Applications</code> menu, select <code>System Tools -&gt; Administration -&gt; Printing</code>.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/04/23/bitcoin-paper-wallets/04.png"></p>

<p>Add your printer. Open up Tor Browser and ensure that you can print a webpage.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/04/23/bitcoin-paper-wallets/05.png"></p>

<p>Time to disconnect from the internet. Unplug the ethernet cord, turn off any wireless cards or routers as necessary. Verify that you are not online.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/04/23/bitcoin-paper-wallets/06.png"></p>

<ol>
<li>Insert your usb drive</li>
<li>Copy the github zip file to the <code>Tor Browser</code> folder on the filesystem</li>
<li>Remove the usb drive</li>
<li>Unpack the zip file</li>
</ol>


<p><img class="center" src="http://jrruethe.github.io/blog/2015/04/23/bitcoin-paper-wallets/07.png"></p>

<p>Open up the html file in Tor Browser. Follow the instructions to generate your paper wallet. You have the option of using the built-in random number generator, or supplying your own random numbers using dice or cards. For maximum security, you should use dice or cards. I found that taking a deck of cards, shuffling it seven times, and picking the first 32 cards off the top worked well. Remember to shuffle the cards again after you are done! &ldquo;Brain wallets&rdquo; may seem convenient, however you need to have a very strong passphrase for this to be secure; it is better to use random numbers.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/04/23/bitcoin-paper-wallets/08.png"></p>

<blockquote><p><strong>BIP38 Encryption?</strong><br/>
There are pros and cons to encrypting your paper wallet. Encryption adds an extra layer of security by requiring a passphrase before being able to import the private key again, which is great if the paper wallet ever gets stolen. However if the passphrase is forgotten, the coins are lost forever. The passphrase is one more thing to remember / write down, which means it is one more thing to secure. In addition, some wallet software does not support BIP38, which may make reimporting difficult. Finally, it is important to realize that BIP38 encryption will NOT help if you chose an insecure passphrase for a brain wallet. In general, BIP38 encryption is recommended.</p></blockquote>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/04/23/bitcoin-paper-wallets/09.png"></p>

<p>You will want to print two wallets by spinning the paper after each print. You will end up running the sheet of paper through the printer a total of 4 times.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/04/23/bitcoin-paper-wallets/10.jpg" width="400" height="600"></p>

<p>Now is your chance to verify the paper wallets. Make sure you can scan the QR codes, make sure the private key and public key match, etc.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/04/23/bitcoin-paper-wallets/11.png"></p>

<p>Shutdown your Tails environment. It will wipe your ram for you.</p>

<p>Cut out each design by following the lines on the front. Fold the wallets and apply the stickers.</p>

<blockquote><p>If you have a laser printer, you will want to include a small 1in x 1in square of paper between the private key and the candling pattern when folding the paper. Later on, we will be laminating the paper wallet, and the heat can cause the toner on each side of the fold to fuse together.</p></blockquote>

<p>Sign the back and write the sticker numbers. This prevents someone from simply replacing the stickers or entire wallet without your knowledge.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/04/23/bitcoin-paper-wallets/12.jpg" width="400" height="600"></p>

<p>Put both paper wallets into a laminating pouch and run it through the laminator. Cut out each wallet, and store them in physically separate, secure locations.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/04/23/bitcoin-paper-wallets/13.jpg" width="400" height="600"></p>

<hr />

<h3>How to properly use a paper wallet</h3>

<p>You can scan the public key into Electrum or Mycelium as a watch-only wallet to keep track of your funds. Eventually you will want to spend the funds.</p>

<p>First, you need to delaminate the wallet. Cut a line along the edge closest to the paper where there is a tiny line of air, and peel away the laminate. A technique that worked for me was to cut along the &ldquo;Private Key / Withdraw&rdquo; line, then slide my knife underneath each sticker. Unfold the flap to access the private key. As you can see, it is still safe and legible, even after the lamination process.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/04/23/bitcoin-paper-wallets/14.jpg"></p>

<p>Now comes the important part. The funds must be &ldquo;swept&rdquo; into an electronic wallet. You must take all the funds in one shot; do not attempt to partially spend the funds in a paper wallet. This is due to how Bitcoin Change works.</p>

<blockquote><p><strong>Change?</strong><br/>
When spending Bitcoins, <em>ALL</em> coins from that address are moved to new addresses.
The destination address will get the desired amount, and any remaining amount will be sent to a &ldquo;change&rdquo; address. If no &ldquo;change&rdquo; address is specified, the remaining amount will go to the miner that solves the block. Normally, an electronic wallet manages this for you behind the scenes, however when using a paper wallet directly, you will not have this control. This is why the entire balance of a paper wallet should be &ldquo;swept&rdquo; into an electronic wallet before spending.<br/>
Read more about change <a href="https://en.bitcoin.it/wiki/Change">here</a></p></blockquote>

<p>Once the paper wallet has been swept into the electronic wallet, it should be destroyed and never used again. Shred it or burn it.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/04/23/bitcoin-paper-wallets/15.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generate Hashes]]></title>
    <link href="http://jrruethe.github.io/blog/2015/04/19/generate-hashes/"/>
    <updated>2015-04-19T14:51:57-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/04/19/generate-hashes</id>
    <content type="html"><![CDATA[<p>This is a handy script to recursively generate hashes for a folder tree, in a format that the standard unix tools can use for checking.</p>

<figure class='code'><figcaption><span> (generate_hashes.sh)</span> <a href='http://jrruethe.github.io/downloads/code/generate_hashes.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="c"># generate_hashes.rb</span>
</span><span class='line'><span class="c"># Copyright (C) 2015 Joe Ruether jrruethe@gmail.com</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c"># it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c"># the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c"># (at your option) any later version.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c"># GNU General Public License for more details.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c"># along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Usage: ./generate_hashes.sh [directory] [hash]</span>
</span><span class='line'><span class="c"># Check the result with sha256sum -c &lt;result&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># See if a directory was defined</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$1</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">   </span><span class="nv">DIRECTORY</span><span class="o">=</span><span class="k">${</span><span class="nv">1</span><span class="p">%/</span><span class="k">}</span>
</span><span class='line'>   <span class="nv">REPLACE</span><span class="o">=</span><span class="k">${</span><span class="nv">DIRECTORY</span><span class="k">}</span>/
</span><span class='line'>
</span><span class='line'>   <span class="k">if</span> <span class="o">[</span> ! -d <span class="nv">$DIRECTORY</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="s2">&quot;Directory does not exist: $DIRECTORY&quot;</span>
</span><span class='line'>      <span class="nb">exit </span>1
</span><span class='line'>   <span class="k">fi</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>   <span class="c"># Use the current directory</span>
</span><span class='line'>   <span class="nv">DIRECTORY</span><span class="o">=</span><span class="s1">&#39;.&#39;</span>
</span><span class='line'>   <span class="nv">REPLACE</span><span class="o">=</span><span class="s1">&#39;\./&#39;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Hash type to use</span>
</span><span class='line'><span class="nv">HASH</span><span class="o">=</span><span class="k">${</span><span class="nv">2</span><span class="k">:-</span><span class="nv">sha256</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Generate the output filename</span>
</span><span class='line'><span class="nv">OUTPUT</span><span class="o">=</span>hashes.<span class="nv">$HASH</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Determine which program to use</span>
</span><span class='line'><span class="nv">HASHER</span><span class="o">=</span><span class="k">${</span><span class="nv">HASH</span><span class="k">}</span>sum
</span><span class='line'>
</span><span class='line'><span class="c"># Remove any existing hash file</span>
</span><span class='line'>rm -f <span class="nv">$DIRECTORY</span>/<span class="nv">$OUTPUT</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Find all files in the directory</span>
</span><span class='line'><span class="c"># that do not have the output filename</span>
</span><span class='line'><span class="c"># and hash them. Store the output in the target directory</span>
</span><span class='line'>find <span class="nv">$DIRECTORY</span> -type f ! -name <span class="s2">&quot;$OUTPUT&quot;</span> -exec <span class="nv">$HASHER</span> <span class="o">{}</span> <span class="se">\;</span> &gt;&gt; <span class="nv">$DIRECTORY</span>/<span class="nv">$OUTPUT</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Sort the output on the filename column</span>
</span><span class='line'>sort -u -k2 -o <span class="nv">$DIRECTORY</span>/<span class="nv">$OUTPUT</span> <span class="nv">$DIRECTORY</span>/<span class="nv">$OUTPUT</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Remove the directory from the listings</span>
</span><span class='line'>sed -i <span class="s2">&quot;s@ $REPLACE@@g&quot;</span> <span class="nv">$DIRECTORY</span>/<span class="nv">$OUTPUT</span>
</span></code></pre></td></tr></table></div></figure>


<p>The following will show how to use it. First, we need some files:</p>

<pre><code>$ ls
generate_hashes.sh

$ dd if=/dev/urandom bs=1024k count=1 &gt; 1.txt
1+0 records in
1+0 records out
1048576 bytes (1.0 MB) copied, 0.0787343 s, 13.3 MB/s

$ dd if=/dev/urandom bs=1024k count=1 &gt; 2.txt
1+0 records in
1+0 records out
1048576 bytes (1.0 MB) copied, 0.0862146 s, 12.2 MB/s

$ mkdir -p three/four

$ dd if=/dev/urandom bs=1024k count=1 &gt; three/3.txt
1+0 records in
1+0 records out
1048576 bytes (1.0 MB) copied, 0.0854334 s, 12.3 MB/s

$ dd if=/dev/urandom bs=1024k count=1 &gt; three/four/4.txt
1+0 records in
1+0 records out
1048576 bytes (1.0 MB) copied, 0.0783046 s, 13.4 MB/s

$ ls *
1.txt  2.txt  generate_hashes.sh

three:
3.txt  four
</code></pre>

<p>Calling the script without any arguments will generate the hashes in the current directory. The file is stored as hashes.hashtype, where hashtype defaults to sha256.</p>

<pre><code>$ ./generate_hashes.sh 
$ ls
1.txt  2.txt  generate_hashes.sh  hashes.sha256  three

$ cat hashes.sha256 
3f27f253e357143105f9a29193141db5ad833b56299a4c4e4a30a2d19f4732a8 1.txt
9dee9ed8f2c7a8533e764bc6963615537524d54292875e9fd858e9e0cd9b93b1 2.txt
20a1cbbf5a21773d673c79d4d8e58e31c3766f87c0299aa5a8c669015504c9f0 generate_hashes.sh
a43be65323f68fc6354f34f8fc97efeb28f01b256d9918cecf9981a93eb59aca three/3.txt
bc767948f782a92ebae7d217e04a160c74669dac838b2ccc33cc697e3ebd1ea2 three/four/4.txt

$ sha256sum -c hashes.sha256 
1.txt: OK
2.txt: OK
generate_hashes.sh: OK
three/3.txt: OK
three/four/4.txt: OK
</code></pre>

<p>The first optional argument is the directory to hash. <code>.</code> is allowed.</p>

<pre><code>$ rm hashes.sha256
$ ls
1.txt  2.txt  generate_hashes.sh  three
$ ls three/
3.txt  four

$ ./generate_hashes.sh three/
$ ls three/
3.txt  four  hashes.sha256
$ cat three/hashes.sha256 
a43be65323f68fc6354f34f8fc97efeb28f01b256d9918cecf9981a93eb59aca 3.txt
bc767948f782a92ebae7d217e04a160c74669dac838b2ccc33cc697e3ebd1ea2 four/4.txt
</code></pre>

<p>The second optional argument is the hash type to use:</p>

<ul>
<li>sha1</li>
<li>sha224</li>
<li>sha256 (default)</li>
<li>sha384</li>
<li>sha512</li>
<li>md5</li>
</ul>


<p>Example:</p>

<pre><code>$ ./generate_hashes.sh three/ sha1
$ ls three/
3.txt  four  hashes.sha1  hashes.sha256
$ cat three/hashes.sha1
fffdc438939ae0afa1f19569939dd3996a2d67bb 3.txt
cec823c326525c23bba925d5d85b35a5ebbed62d four/4.txt
deea8794a7aada412518d06df516c804389ef212 hashes.sha256

$ cd three/
$ sha1sum -c hashes.sha1
3.txt: OK
four/4.txt: OK
hashes.sha256: OK
</code></pre>

<p>When distributing a large set of files or directory tree, it is best to generate the hashes in the root of the tree and sign the hashes.sha256 file with GPG.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verified Addresses]]></title>
    <link href="http://jrruethe.github.io/blog/2015/04/11/verified-addresses/"/>
    <updated>2015-04-11T18:48:27-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/04/11/verified-addresses</id>
    <content type="html"><![CDATA[<p>This is a curated list of important websites and services with verified certificates and onion addresses:</p>

<figure class='code'><figcaption><span> (verified_addresses.txt.asc)</span> <a href='http://jrruethe.github.io/downloads/code/verified_addresses.txt.asc'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">-----BEGIN PGP SIGNED MESSAGE-----</span>
</span><span class='line'><span class="l-Scalar-Plain">Hash</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">SHA1</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'> <span class="l-Scalar-Plain">- Name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Blockchain.info</span>
</span><span class='line'>   <span class="l-Scalar-Plain">URL</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://blockchain.info</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Domain</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">blockchain.info</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Certificate</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cert-002.blockchain.info</span>
</span><span class='line'>   <span class="l-Scalar-Plain">SHA1</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">94:10:81:EB:E4:62:B5:BD:7B:03:DE:79:C7:A6:4D:91:30:13:7B:E0</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Onion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://blockchainbdgpzk.onion/</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Proof</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">https://blockchain.info/wallet/anonymity</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">https://blog.blockchain.com/tag/digicert/</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">https://lists.torproject.org/pipermail/tor-talk/2014-December/035841.html</span>
</span><span class='line'><span class="-Error">   </span><span class="l-Scalar-Plain">Email</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">support@blockchain.zendesk.com</span>
</span><span class='line'>
</span><span class='line'><span class="-Error"> </span><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Duck Duck Go</span>
</span><span class='line'>   <span class="l-Scalar-Plain">URL</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://duckduckgo.com/</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Domain</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">duckduckgo.com</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Certificate</span><span class="p-Indicator">:</span> <span class="err">*</span><span class="l-Scalar-Plain">.duckduckgo.com</span>
</span><span class='line'>   <span class="l-Scalar-Plain">SHA1</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">AF:81:DA:50:2D:E7:B8:4E:92:F5:A9:36:1F:A5:89:6F:FE:AC:0F:6F</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Onion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://3g2upl4pq6kufc4m.onion</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Proof</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://duck.co/forum/thread/1762/is-the-duckduckgo-hidden-service-legitimate</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Twitter</span><span class="p-Indicator">:</span> <span class="err">@</span><span class="l-Scalar-Plain">duckduckgo</span>
</span><span class='line'>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Electronic Frontier Foundation</span>
</span><span class='line'>   <span class="l-Scalar-Plain">URL</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://www.eff.org/</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Domain</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">www.eff.org</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Certificate</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">www.eff.org</span>
</span><span class='line'>   <span class="l-Scalar-Plain">SHA1</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1E:F9:6F:18:02:22:26:F6:63:3C:C3:E8:75:FB:8E:7C:31:67:91:DE</span>
</span><span class='line'>   <span class="l-Scalar-Plain">GPG Fingerprint</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">F2F2 1BB8 531E 9DC3 0D40  F68B 11A1 A9C8 4B18 732F</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Email</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">info@eff.org</span>
</span><span class='line'>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Freedom of the Press Foundation</span>
</span><span class='line'>   <span class="l-Scalar-Plain">URL</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://freedom.press/</span>
</span><span class='line'>   <span class="c1"># Domain: freedom.press</span>
</span><span class='line'>   <span class="c1"># Certificate: ssl7272.cloudflare.com</span>
</span><span class='line'>   <span class="c1"># SHA1: 2A:92:0A:71:AE:66:13:4A:D6:E7:FD:40:A8:54:3C:67:82:D7:E1:EB</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Onion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">freepress3xxs3hk.onion</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Proof</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://freedom.press/</span>
</span><span class='line'>   <span class="l-Scalar-Plain">GPG Fingerprint</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">B89A 29DB 2128 160B 8E4B  1B4C BADD E0C7 FC9F 6818</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">734F 6E70 7434 ECA6 C007  E1AE 82BD 6C96 16DA BB79</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Email</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">info@freedom.press</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Twitter</span><span class="p-Indicator">:</span> <span class="err">@</span><span class="l-Scalar-Plain">FreedomofPress</span>
</span><span class='line'>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Gibson Research Corporation</span>
</span><span class='line'>   <span class="l-Scalar-Plain">URL</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://www.grc.com/fingerprints.htm</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Domain</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">www.grc.com</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Certificate</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">grc.com</span>
</span><span class='line'>   <span class="l-Scalar-Plain">SHA1</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">01:56:D3:AC:CF:5A:3F:B8:8F:0F:B4:30:88:2D:F6:72:4E:8C:F2:E0</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Twitter</span><span class="p-Indicator">:</span> <span class="err">@</span><span class="l-Scalar-Plain">GibsonResearch</span>
</span><span class='line'>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">The Original Hidden Wiki</span>
</span><span class='line'>   <span class="l-Scalar-Plain">URL</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://www.kpvz7ki2v5agwt35.onion/wiki/index.php/Main_Page</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Onion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">kpvz7ki2v5agwt35.onion</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Proof</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://web.archive.org/web/20090923122959/http://www.reddit.com/r/onions</span>
</span><span class='line'>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">The New Hidden Wiki</span>
</span><span class='line'>   <span class="l-Scalar-Plain">URL</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://zqktlwi4fecvo6ri.onion/wiki/Main_Page</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Onion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">zqktlwi4fecvo6ri.onion</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Proof</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http://www.reddit.com/r/onions/comments/24uq96/zqktlw_hidden_wiki_admin_here_trying_to_clear_up/</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">https://bitcointalk.org/index.php?topic=511139.0</span>
</span><span class='line'>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">The Intercept Secure Drop</span>
</span><span class='line'>   <span class="l-Scalar-Plain">URL</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://firstlook.org/theintercept/securedrop/</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Domain</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">firstlook.org</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Certificate</span><span class="p-Indicator">:</span> <span class="err">*</span><span class="l-Scalar-Plain">.firstlook.org</span>
</span><span class='line'>   <span class="l-Scalar-Plain">SHA1</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">FA:34:AB:6D:D5:68:0A:CC:38:4F:4E:28:B6:6B:43:9F:D3:0E:C4:3D</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Onion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://y6xjgkgwj47us5ca.onion/</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Proof</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">https://firstlook.org/theintercept/securedrop/</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">https://firstlook.org/theintercept/2015/04/08/securedrop-tor-hidden-service-now-uses-https/</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">https://firstlook.org/theintercept/2015/01/28/how-to-leak-to-the-intercept/</span>
</span><span class='line'>   <span class="l-Scalar-Plain">GPG Fingerprint</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0B14 9192 9806 5962 5470  0155 FD72 0AD9 EBA3 4B1C</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Email</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">tips@theintercept.com</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Twitter</span><span class="p-Indicator">:</span> <span class="err">@</span><span class="l-Scalar-Plain">the_intercept</span>
</span><span class='line'>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Internet Archive</span>
</span><span class='line'>   <span class="l-Scalar-Plain">URL</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://archive.org/index.php</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Domain</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">archive.org</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Certificate</span><span class="p-Indicator">:</span> <span class="err">*</span><span class="l-Scalar-Plain">.archive.org</span>
</span><span class='line'>   <span class="l-Scalar-Plain">SHA1</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">98:8C:12:12:BB:E5:4A:3A:8A:CE:3C:E6:2C:C2:0C:CC:D5:1A:C5:C5</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Email</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">info@archive.org</span>
</span><span class='line'>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Keybase.io</span>
</span><span class='line'>   <span class="l-Scalar-Plain">URL</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://keybase.io/</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Domain</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">keybase.io</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Certificate</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">keybase.io</span>
</span><span class='line'>   <span class="l-Scalar-Plain">SHA1</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">15:03:31:EA:85:6B:C9:76:8D:98:82:AD:01:16:D4:62:85:5F:47:7E</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Onion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://fncuwbiisyh6ak3i.onion</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Proof</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://keybase.io/</span>
</span><span class='line'>   <span class="l-Scalar-Plain">GPG Fingerprint</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">222B 85B0 F90B E2D2 4CFE  B93F 4748 4E50 656D 16C7</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">03E1 46CD AF81 3668 0AD5  6691 2A32 340C EC8C 9492</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">8EFB E2E4 DD56 B352 7363  4E8F 6052 B2AD 31A6 631C</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">94AA 3A5B DBD4 0EA5 49CA  BAF9 FBC0 7D6A 9701 6CB3</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Twitter</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">maxtaco</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="err">@</span><span class="l-Scalar-Plain">malgorithms</span>
</span><span class='line'>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">OneName</span>
</span><span class='line'>   <span class="l-Scalar-Plain">URL</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://onename.com/</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Domain</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">onename.com</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Certificate</span><span class="p-Indicator">:</span> <span class="err">*</span><span class="l-Scalar-Plain">.onename.com</span>
</span><span class='line'>   <span class="l-Scalar-Plain">SHA1</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">E2:C7:66:9A:A7:69:0E:F3:57:22:EA:E5:5D:23:0A:C4:55:41:89:67</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Twitter</span><span class="p-Indicator">:</span> <span class="err">@</span><span class="l-Scalar-Plain">onename</span>
</span><span class='line'>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Reddit</span>
</span><span class='line'>   <span class="l-Scalar-Plain">URL</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://www.reddit.com/</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Domain</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">www.reddit.com</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Certificate</span><span class="p-Indicator">:</span> <span class="err">*</span><span class="l-Scalar-Plain">.reddit.com</span>
</span><span class='line'>   <span class="l-Scalar-Plain">SHA1</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">DB:90:0C:4A:F5:A2:1C:85:CB:DD:3B:2E:11:8C:93:CD:4C:DA:5C:CA</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Email</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">contact@reddit.com</span>
</span><span class='line'>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Riseup</span>
</span><span class='line'>   <span class="l-Scalar-Plain">URL</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://help.riseup.net/en</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Domain</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">help.riseup.net</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Certificate</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">riseup.net</span>
</span><span class='line'>   <span class="l-Scalar-Plain">SHA1</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">F4:6A:41:B5:0D:59:3E:57:2C:5A:E2:9B:17:6A:54:93:10:8A:26:90</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Onion</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">nzh3fv6jc6jskki3.onion</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">https://5jp7xtmox6jyoqd5.onion/</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Proof</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://help.riseup.net/en/security/network-security/tor</span>
</span><span class='line'>   <span class="l-Scalar-Plain">GPG Fingerprint</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">4E07 9126 8F7C 67EA BE88  F1B0 3043 E2B7 139A 768E</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Email</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">collective@riseup.net</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Twitter</span><span class="p-Indicator">:</span> <span class="err">@</span><span class="l-Scalar-Plain">riseupnet</span>
</span><span class='line'>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Tails</span>
</span><span class='line'>   <span class="l-Scalar-Plain">URL</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://tails.boum.org/</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Domain</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">tails.boum.org</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Certificate</span><span class="p-Indicator">:</span> <span class="err">*</span><span class="l-Scalar-Plain">.boum.org</span>
</span><span class='line'>   <span class="l-Scalar-Plain">SHA1</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2E:0F:60:F9:68:9B:B5:CE:D1:5C:82:A0:9D:D9:55:A0:8F:41:EC:70</span>
</span><span class='line'>   <span class="l-Scalar-Plain">GPG Fingerprint</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">A490 D0F4 D311 A415 3E2B  B7CA DBB8 02B2 58AC D84F</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">0D24 B36A A9A2 A651 7878  7645 1202 821C BE2C D9C1</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">1F56 EDD3 0741 0480 35DA  C1C5 EC57 B56E F0C4 3132</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Email</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">tails-support-private@boum.org</span>
</span><span class='line'>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">TorBox Email</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Onion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">torbox3uiot6wchz.onion</span>
</span><span class='line'>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Tor Check</span>
</span><span class='line'>   <span class="l-Scalar-Plain">URL</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://check.torproject.org/</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Domain</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">check.torproject.org</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Certificate</span><span class="p-Indicator">:</span> <span class="err">*</span><span class="l-Scalar-Plain">.torproject.org</span>
</span><span class='line'>   <span class="l-Scalar-Plain">SHA1</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">84:24:56:56:8E:D7:90:43:47:AA:89:AB:77:7D:A4:94:3B:A1:A7:D5</span>
</span><span class='line'>   <span class="l-Scalar-Plain">GPG Fingerprint</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">EF6E 286D DA85 EA2A 4BA7  DE68 4E2C 6E87 9329 8290</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Email</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">help@rt.torproject.org</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Twitter</span><span class="p-Indicator">:</span> <span class="err">@</span><span class="l-Scalar-Plain">TorProject</span>
</span><span class='line'>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">WTFIsMyIP Jabber</span>
</span><span class='line'>   <span class="l-Scalar-Plain">URL</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://wtfismyip.com/jabber/</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Domain</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">wtfismyip.com</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Certificate</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">www.wtfismyip.com</span>
</span><span class='line'>   <span class="l-Scalar-Plain">SHA1</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">C2:C5:C1:7F:30:0E:C9:C8:72:1D:9D:ED:D0:CB:52:A1:F2:12:DB:15</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Onion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ofkztxcohimx34la.onion</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Proof</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://wtfismyip.com/jabber/</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Email</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">support@wtfismyip.com</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">-----BEGIN PGP SIGNATURE-----</span>
</span><span class='line'><span class="l-Scalar-Plain">Version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">GnuPG v1</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">iQEcBAEBAgAGBQJVMYVGAAoJEB7MsgHDevApw48IAJizJrldGsywiy2tqKl4D4LN</span>
</span><span class='line'><span class="l-Scalar-Plain">j24gLbcW0psTIpDdkM5HX1CNIOmdQHUTIKEm4F6G/VpqAK8zIs25Q6W9vcfzIAhH</span>
</span><span class='line'><span class="l-Scalar-Plain">8I+IpECUuKNYpDy/ECuWAp0gDiQaJOkpUklTV/cRfPPho4POX9k2QP5CnNiB+nRd</span>
</span><span class='line'><span class="l-Scalar-Plain">SMmNQUT8YLDAf+lClDTavGPxpRZZ8MuvV0It875hThfsjKSWIHOqwhDAaTtRfyd2</span>
</span><span class='line'><span class="l-Scalar-Plain">UPlj5oyBABT8b7rmKVB1twsq2O4ZuiAOs0DYN3cIF5bXIiJ2tzvkvtrtZnfyQ/GP</span>
</span><span class='line'><span class="l-Scalar-Plain">JKFUhOOU0AMXThFP8tMZiIeOe8TaV0PXpjyhIlNpWlvt0EQWr22JLXVQnd7/QFM=</span>
</span><span class='line'><span class="l-Scalar-Plain">=6Mba</span>
</span><span class='line'><span class="l-Scalar-Plain">-----END PGP SIGNATURE-----</span>
</span></code></pre></td></tr></table></div></figure>


<p>To extract all the GPG keys and import them:</p>

<pre><code>for i in `egrep -o '([0-F]{4} ){5} ([0-F]{4} ){4}[0-F]{4}' verified_addresses.txt.asc | tr -d ' '`;  
do
   gpg --keyserver pool.sks-keyservers.net --recv-keys $i;

   # Sleep needed to prevent spamming the server, it will respond with "connection refused" otherwise       
   sleep 30;
done;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Squashed Truecrypt Archive]]></title>
    <link href="http://jrruethe.github.io/blog/2015/03/30/squashed-truecrypt-archive/"/>
    <updated>2015-03-30T20:32:22-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/03/30/squashed-truecrypt-archive</id>
    <content type="html"><![CDATA[<p>This post presents a script that can create a squashfs filesystem inside of a truecrypt container.<br/>
This has many benefits over encrypted zip files as well as normal truecrypt containers:</p>

<ul>
<li>Resulting file can be mounted and accessed directly

<ul>
<li>No need to &ldquo;unzip&rdquo; to the hard drive</li>
<li>No chance for leaking unencrypted data to the hard drive</li>
</ul>
</li>
<li>Achieve both good compression as well as strong encryption

<ul>
<li>Better compression ratio than NTFS, BTRFS, GZIP, BZIP2</li>
</ul>
</li>
<li>Truecrypt container is only as large as it needs to be

<ul>
<li>No need to guess the approximate size of the compressed result before compressing</li>
</ul>
</li>
<li>Resulting file is immutable

<ul>
<li>Making changes is still possible with an easy workaround, described below</li>
</ul>
</li>
</ul>


<p>First, the script. It is named <code>star</code>, for &ldquo;<strong>S</strong>quashed <strong>T</strong>ruecrypt <strong>AR</strong>chive&rdquo;. You will need the following to run it:</p>

<ul>
<li>squashfs-tools</li>
<li>truecrypt</li>
<li>aufs-tools</li>
</ul>


<figure class='code'><figcaption><span> (star)</span> <a href='http://jrruethe.github.io/downloads/code/star'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># star</span>
</span><span class='line'><span class="c"># Copyright (C) 2015 Joe Ruether jrruethe@gmail.com</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c"># it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c"># the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c"># (at your option) any later version.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c"># GNU General Public License for more details.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c"># along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Creates a squashed truecrypt archive (star)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># $1 = Directory to star</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Stop on any error</span>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'>
</span><span class='line'><span class="c"># Declare an array of tasks to perform on exit</span>
</span><span class='line'><span class="nb">declare</span> -a on_exit_items
</span><span class='line'>
</span><span class='line'><span class="c"># This function is run on exit</span>
</span><span class='line'><span class="k">function </span>on_exit<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="k">for </span>i in <span class="s2">&quot;${on_exit_items[@]}&quot;</span>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'><span class="k">        </span><span class="nb">eval</span> <span class="nv">$i</span>
</span><span class='line'>    <span class="k">done</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Add to the list of tasks to run on exit</span>
</span><span class='line'><span class="k">function </span>add_on_exit<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nb">local </span><span class="nv">n</span><span class="o">=</span><span class="k">${#</span><span class="nv">on_exit_items</span><span class="p">[*]</span><span class="k">}</span>
</span><span class='line'>    on_exit_items<span class="o">[</span><span class="nv">$n</span><span class="o">]=</span><span class="s2">&quot;$*&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$n</span> -eq 0 <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">trap </span>on_exit EXIT
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Make sure enough arguments were specified</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="nv">$1</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">   </span><span class="nb">echo</span> <span class="s2">&quot;Usage: $0 &lt;directory&gt; [name]&quot;</span>
</span><span class='line'>   <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Make sure the first argument is an existing directory</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -d <span class="nv">$1</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">   </span><span class="nb">echo</span> <span class="s2">&quot;Directory does not exist: $1&quot;</span>
</span><span class='line'>   <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Save some variables</span>
</span><span class='line'><span class="nv">directory</span><span class="o">=</span><span class="k">${</span><span class="nv">1</span><span class="p">%/</span><span class="k">}</span>
</span><span class='line'><span class="nv">name</span><span class="o">=</span><span class="k">${</span><span class="nv">2</span><span class="p">-</span><span class="nv">$directory</span><span class="k">}</span>
</span><span class='line'><span class="nv">sfs</span><span class="o">=</span><span class="nv">$name</span>.sfs
</span><span class='line'><span class="nv">star</span><span class="o">=</span><span class="nv">$name</span>.star
</span><span class='line'>
</span><span class='line'><span class="c"># Get the password</span>
</span><span class='line'><span class="nb">echo</span> -n <span class="s1">&#39;Enter the password to use:&#39;</span>
</span><span class='line'><span class="nb">read</span> -s password
</span><span class='line'><span class="nb">echo</span>
</span><span class='line'><span class="nb">echo</span> -n <span class="s1">&#39;Repeat the password:&#39;</span>
</span><span class='line'><span class="nb">read</span> -s password_repeat
</span><span class='line'><span class="nb">echo</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Check that the passwords match</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$password&quot;</span> !<span class="o">=</span> <span class="s2">&quot;$password_repeat&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">   </span><span class="nb">echo</span> <span class="s1">&#39;Passwords do not match&#39;</span>
</span><span class='line'>   <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Squash the directory</span>
</span><span class='line'>mksquashfs <span class="nv">$directory</span> <span class="nv">$sfs</span> -noappend -b 1048576 &gt; /dev/null 2&gt;&amp;1
</span><span class='line'>
</span><span class='line'><span class="c"># Clean this file up on exit</span>
</span><span class='line'>add_on_exit shred -f <span class="nv">$sfs</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Get the size of the squashfs, add 512 blocks of size 512</span>
</span><span class='line'><span class="nv">sfssize</span><span class="o">=</span><span class="sb">`</span>stat --printf<span class="o">=</span><span class="s2">&quot;%s&quot;</span> <span class="nv">$sfs</span><span class="sb">`</span>
</span><span class='line'><span class="nv">starsize</span><span class="o">=</span><span class="sb">`</span>expr <span class="nv">$sfssize</span> + 262144<span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Make a truecrypt volume</span>
</span><span class='line'>sudo truecrypt -t --non-interactive -c <span class="nv">$star</span> --size<span class="o">=</span><span class="nv">$starsize</span> --filesystem<span class="o">=</span>none --encryption<span class="o">=</span>AES --hash<span class="o">=</span>SHA-512 --password<span class="o">=</span><span class="nv">$password</span> &gt; /dev/null 2&gt;&amp;1
</span><span class='line'>
</span><span class='line'><span class="c"># Mount the truecrypt volume</span>
</span><span class='line'>sudo truecrypt -t --non-interactive --filesystem<span class="o">=</span>none --password<span class="o">=</span><span class="nv">$password</span> <span class="nv">$star</span> &gt; /dev/null 2&gt;&amp;1
</span><span class='line'>
</span><span class='line'><span class="c"># Get the truecrypt device name</span>
</span><span class='line'><span class="nv">starloc</span><span class="o">=</span><span class="sb">`</span>readlink -f <span class="nv">$star</span><span class="sb">`</span>
</span><span class='line'><span class="nv">devname</span><span class="o">=</span><span class="sb">`</span>truecrypt -t --non-interactive -l | grep <span class="nv">$starloc</span> | awk <span class="s1">&#39;{print $3}&#39;</span><span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Unmount the volume on exit</span>
</span><span class='line'>add_on_exit sudo truecrypt -t --non-interactive -d <span class="nv">$starloc</span> &gt; /dev/null 2&gt;&amp;1
</span><span class='line'>
</span><span class='line'><span class="c"># Copy the squashfs into the truecrypt volume</span>
</span><span class='line'>sudo dd <span class="k">if</span><span class="o">=</span><span class="nv">$sfs</span> <span class="nv">of</span><span class="o">=</span><span class="nv">$devname</span> <span class="nv">bs</span><span class="o">=</span>64K &gt; /dev/null 2&gt;&amp;1
</span><span class='line'>
</span><span class='line'><span class="c"># Set permissions</span>
</span><span class='line'>sudo chmod 755 <span class="nv">$star</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Synchronize the filesystem</span>
</span><span class='line'>sync
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;Success&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is an example of how to use it:</p>

<pre><code>$ mkdir secret_stuff
$ dd if=/dev/urandom bs=1MB count=10 &gt; secret_stuff/secret_data.bin
10+0 records in
10+0 records out
10000000 bytes (10 MB) copied, 0.741577 s, 13.5 MB/s

$ ls
secret_stuff  star

$ ./star 
Usage: ./star &lt;directory&gt; [name]

$ ./star secret_stuff
Enter the password to use:
Repeat the password:
Success

$ ls
secret_stuff  secret_stuff.star  star

$ mkdir mnt
$ sudo truecrypt -t secret_stuff.star 
Enter mount directory [default]: mnt
Enter password for /home/joe/Downloads/temp/secret_stuff.star: 
Enter keyfile [none]: 
Protect hidden volume (if any)? (y=Yes/n=No) [No]: 

$ ls mnt/
secret_data.bin

$ sha256sum secret_stuff/secret_data.bin 
5342d4e85a221df35c5beda80e7b93b609fca732b908b6fd43febfcc89c324ea  secret_stuff/secret_data.bin
$ sha256sum mnt/secret_data.bin 
5342d4e85a221df35c5beda80e7b93b609fca732b908b6fd43febfcc89c324ea  mnt/secret_data.bin
</code></pre>

<p>The resulting file is immutable. This may seem like a downside at first, but it can be beneficial. For example, it can be mounted by multiple users simultaneously when shared via Dropbox or Bittorrent Sync, and it is easy to version control.</p>

<p>Making secure modifications to the archive is possible because the archive allows direct access via mounting. This is something that cannot be easily done with a normal zip file or tarball. By using a tmpfs filesystem as a writable aufs layer on top of the archive, edits can be made in memory that never touch the hard drive, so your encrypted data stays secure. Then, a new archive can be created from that tmpfs layer.</p>

<p>Layers can be kept separate and treated as diffs (similar to how Docker containers operate), or they can be &ldquo;resquashed&rdquo; together for maximum compression. It all depends on the user&rsquo;s needs.</p>

<p>Here is a script that mounts a tmpfs aufs layer on top of the archive to allow edits.</p>

<figure class='code'><figcaption><span> (mount_star.sh)</span> <a href='http://jrruethe.github.io/downloads/code/mount_star.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># mount_star.sh</span>
</span><span class='line'><span class="c"># Copyright (C) 2015 Joe Ruether jrruethe@gmail.com</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c"># it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c"># the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c"># (at your option) any later version.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c"># GNU General Public License for more details.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c"># along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Mounts a squashed truecrypt archive</span>
</span><span class='line'>
</span><span class='line'><span class="c"># $1 = Star to mount</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Stop on any error</span>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'>
</span><span class='line'><span class="c"># Declare an array of tasks to perform on exit</span>
</span><span class='line'><span class="nb">declare</span> -a on_exit_items
</span><span class='line'>
</span><span class='line'><span class="c"># This function is run on exit</span>
</span><span class='line'><span class="k">function </span>on_exit<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="k">for </span>i in <span class="s2">&quot;${on_exit_items[@]}&quot;</span>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'><span class="k">        </span><span class="nb">eval</span> <span class="nv">$i</span>
</span><span class='line'>    <span class="k">done</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Add to the list of tasks to run on exit</span>
</span><span class='line'><span class="k">function </span>add_on_exit_reverse<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nv">on_exit_items</span><span class="o">=(</span><span class="s2">&quot;$*&quot;</span> <span class="s2">&quot;${on_exit_items[@]}&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$n</span> -eq 0 <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">trap </span>on_exit EXIT
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Make sure enough arguments were specified</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="nv">$1</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">   </span><span class="nb">echo</span> <span class="s2">&quot;Usage: $0 &lt;*.star&gt;&quot;</span>
</span><span class='line'>   <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Make sure the first argument is an existing file</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -f <span class="nv">$1</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">   </span><span class="nb">echo</span> <span class="s2">&quot;File does not exist: $1&quot;</span>
</span><span class='line'>   <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Save some variables</span>
</span><span class='line'><span class="nv">star_file</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="nv">star_name</span><span class="o">=</span><span class="k">${</span><span class="nv">star_file</span><span class="p">%.star</span><span class="k">}</span>
</span><span class='line'><span class="nv">star_old</span><span class="o">=</span><span class="k">${</span><span class="nv">star_name</span><span class="k">}</span>_old
</span><span class='line'><span class="nv">star_changes</span><span class="o">=</span><span class="k">${</span><span class="nv">star_name</span><span class="k">}</span>_changes
</span><span class='line'><span class="nv">star_new</span><span class="o">=</span><span class="k">${</span><span class="nv">star_name</span><span class="k">}</span>_new
</span><span class='line'>
</span><span class='line'><span class="c"># Get the password</span>
</span><span class='line'><span class="nb">echo</span> -n <span class="s1">&#39;Enter the password:&#39;</span>
</span><span class='line'><span class="nb">read</span> -s password
</span><span class='line'><span class="nb">echo</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Make the directories</span>
</span><span class='line'>mkdir -p <span class="nv">$star_old</span>
</span><span class='line'>add_on_exit_reverse rmdir <span class="nv">$star_old</span>
</span><span class='line'>
</span><span class='line'>mkdir -p <span class="nv">$star_changes</span>
</span><span class='line'>add_on_exit_reverse rmdir <span class="nv">$star_changes</span>
</span><span class='line'>
</span><span class='line'>mkdir -p <span class="nv">$star_new</span>
</span><span class='line'>add_on_exit_reverse rmdir <span class="nv">$star_new</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Mount the star file</span>
</span><span class='line'>sudo truecrypt -t --non-interactive --password<span class="o">=</span><span class="nv">$password</span> <span class="nv">$star_file</span> <span class="nv">$star_old</span>
</span><span class='line'>add_on_exit_reverse sudo truecrypt -t --non-interactive -d <span class="nv">$star_old</span> &gt; /dev/null 2&gt;&amp;1
</span><span class='line'>
</span><span class='line'><span class="c"># Mount the tmpfs</span>
</span><span class='line'>sudo mount -t tmpfs tmpfs <span class="nv">$star_changes</span>
</span><span class='line'>add_on_exit_reverse sudo umount -lf <span class="nv">$star_changes</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Mount the aufs</span>
</span><span class='line'>sudo mount -t aufs -o <span class="nb">dirs</span><span class="o">=</span><span class="nv">$star_changes</span><span class="o">=</span>rw:<span class="nv">$star_old</span><span class="o">=</span>ro aufs <span class="nv">$star_new</span>
</span><span class='line'>add_on_exit_reverse sudo umount -lf <span class="nv">$star_new</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Wait for user to continue</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Star is now mounted. Press Enter to unmount and exit&quot;</span>
</span><span class='line'><span class="nb">read</span>
</span></code></pre></td></tr></table></div></figure>


<p>Use it like so:</p>

<pre><code>$ ./mount_star.sh 
Usage: ./mount_star.sh &lt;*.star&gt;

$ ./mount_star.sh ./secret_stuff.star 
Enter the password:
Star is now mounted. Press Enter to unmount and exit
</code></pre>

<p>Now in another terminal, you can interact with the mounted volumes:</p>

<pre><code>$ ls
mount_star.sh  secret_stuff_changes  secret_stuff_old  starsecret_stuff_new  secret_stuff.star

$ touch secret_stuff_old/lala
touch: cannot touch ‘secret_stuff_old/lala’: Read-only file system

$ touch secret_stuff_new/lala

$ ls secret_stuff_new
lala  secret_data.bin

$ ls secret_stuff_changes/
lala
</code></pre>

<p>Creating a new archive is as simple as star&#8217;ing the name_new branch. Creating a &ldquo;patch&rdquo; is as simple as star&#8217;ing the name_changes branch:</p>

<pre><code>$ dd if=/dev/urandom bs=1MB count=10 &gt; secret_stuff_new/new_secret_data.bin10+0 records in
10+0 records out
10000000 bytes (10 MB) copied, 0.756202 s, 13.2 MB/s
$ ls secret_stuff*
secret_stuff.star

secret_stuff_changes:
lala  new_secret_data.bin

secret_stuff_new:
lala  new_secret_data.bin  secret_data.bin

secret_stuff_old:
secret_data.bin

$ ./star secret_stuff_changes/
Enter the password to use:
Repeat the password:
Success

$ ls
mount_star.sh  secret_stuff_changes.star  secret_stuff.star  star
</code></pre>

<p>Patch archives can be applied using aufs layers with the following script:</p>

<figure class='code'><figcaption><span> (patch_star.sh)</span> <a href='http://jrruethe.github.io/downloads/code/patch_star.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># patch_star.sh</span>
</span><span class='line'><span class="c"># Copyright (C) 2015 Joe Ruether jrruethe@gmail.com</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c"># it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c"># the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c"># (at your option) any later version.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c"># GNU General Public License for more details.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c"># along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Mounts a squashed truecrypt archive</span>
</span><span class='line'>
</span><span class='line'><span class="c"># $1 = Star to mount</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Stop on any error</span>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'>
</span><span class='line'><span class="c"># Declare an array of tasks to perform on exit</span>
</span><span class='line'><span class="nb">declare</span> -a on_exit_items
</span><span class='line'>
</span><span class='line'><span class="c"># This function is run on exit</span>
</span><span class='line'><span class="k">function </span>on_exit<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="k">for </span>i in <span class="s2">&quot;${on_exit_items[@]}&quot;</span>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'><span class="k">        </span><span class="nb">eval</span> <span class="nv">$i</span>
</span><span class='line'>    <span class="k">done</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Add to the list of tasks to run on exit</span>
</span><span class='line'><span class="k">function </span>add_on_exit_reverse<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nv">on_exit_items</span><span class="o">=(</span><span class="s2">&quot;$*&quot;</span> <span class="s2">&quot;${on_exit_items[@]}&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$n</span> -eq 0 <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">trap </span>on_exit EXIT
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Make sure enough arguments were specified</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="nv">$1</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">   </span><span class="nb">echo</span> <span class="s2">&quot;Usage: $0 &lt;base *.star&gt; &lt;patch *.star&gt;&quot;</span>
</span><span class='line'>   <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Make sure the first argument is an existing file</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -f <span class="nv">$1</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">   </span><span class="nb">echo</span> <span class="s2">&quot;File does not exist: $1&quot;</span>
</span><span class='line'>   <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Make sure the second argument is an existing file</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -f <span class="nv">$2</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">   </span><span class="nb">echo</span> <span class="s2">&quot;File does not exist: $2&quot;</span>
</span><span class='line'>   <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Save some variables</span>
</span><span class='line'><span class="nv">base_star</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="nv">base_name</span><span class="o">=</span><span class="k">${</span><span class="nv">base_star</span><span class="p">%.star</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Patch directory will be hidden</span>
</span><span class='line'><span class="nv">patch_star</span><span class="o">=</span><span class="nv">$2</span>
</span><span class='line'><span class="nv">patch_name</span><span class="o">=</span>.<span class="k">${</span><span class="nv">patch_star</span><span class="p">%.star</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Get the passwords</span>
</span><span class='line'><span class="nb">echo</span> -n <span class="s2">&quot;Enter the password for $1 :&quot;</span>
</span><span class='line'><span class="nb">read</span> -s base_password
</span><span class='line'><span class="nb">echo</span>
</span><span class='line'><span class="nb">echo</span> -n <span class="s2">&quot;Enter the password for $2 :&quot;</span>
</span><span class='line'><span class="nb">read</span> -s patch_password
</span><span class='line'><span class="nb">echo</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Make the directories</span>
</span><span class='line'>mkdir -p <span class="nv">$base_name</span>
</span><span class='line'>add_on_exit_reverse rmdir <span class="nv">$base_name</span>
</span><span class='line'>
</span><span class='line'>mkdir -p <span class="nv">$patch_name</span>
</span><span class='line'>add_on_exit_reverse rmdir <span class="nv">$patch_name</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Mount the base</span>
</span><span class='line'>sudo truecrypt -t --non-interactive --password<span class="o">=</span><span class="nv">$base_password</span> <span class="nv">$base_star</span> <span class="nv">$base_name</span>
</span><span class='line'>add_on_exit_reverse sudo truecrypt -t --non-interactive -d <span class="nv">$base_name</span> &gt; /dev/null 2&gt;&amp;1
</span><span class='line'>
</span><span class='line'><span class="c"># Mount the patch</span>
</span><span class='line'>sudo truecrypt -t --non-interactive --password<span class="o">=</span><span class="nv">$patch_password</span> <span class="nv">$patch_star</span> <span class="nv">$patch_name</span>
</span><span class='line'>add_on_exit_reverse sudo truecrypt -t --non-interactive -d <span class="nv">$patch_name</span> &gt; /dev/null 2&gt;&amp;1
</span><span class='line'>
</span><span class='line'><span class="c"># Apply the patch</span>
</span><span class='line'>sudo mount -t aufs -o <span class="nb">dirs</span><span class="o">=</span><span class="nv">$patch_name</span><span class="o">=</span>ro:<span class="nv">$base_name</span><span class="o">=</span>ro aufs <span class="nv">$base_name</span>
</span><span class='line'>add_on_exit_reverse sudo umount -lf <span class="nv">$base_name</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Wait for user to continue</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Star is now mounted and patched. Press Enter to unmount and exit&quot;</span>
</span><span class='line'><span class="nb">read</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is how it works:</p>

<pre><code>$ ./patch_star.sh 
Usage: ./patch_star.sh &lt;base *.star&gt; &lt;patch *.star&gt;

$ ./patch_star.sh secret_stuff.star secret_stuff_changes.star 
Enter the password for secret_stuff.star :
Enter the password for secret_stuff_changes.star :
Star is now mounted and patched. Press Enter to unmount and exit

ls
mount_star.sh  patch_star.sh  secret_stuff  secret_stuff_changes.star  secret_stuff.star  star
$ ls secret_stuff
lala  new_secret_data.bin  secret_data.bin
</code></pre>

<p>This can be very handy for transferring small edits to a large archive across the network in a secure manner, without needing to retransfer the whole archive. The layering effect also acts as a poor man&rsquo;s version control. In the future, I would like to expand on this idea and write a script to manage the layers more convieniently and effectively, perhaps in a manner similar to Git or Docker.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protect Yourself Online]]></title>
    <link href="http://jrruethe.github.io/blog/2015/03/29/protect-yourself-online/"/>
    <updated>2015-03-29T11:33:58-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/03/29/protect-yourself-online</id>
    <content type="html"><![CDATA[<p>This is a quick guide to staying secure on the internet.</p>

<h2>Hashes and Signatures</h2>

<p>Hashes and signatures are your primary tool for verifying data and detecting any form of tampering. You need to understand how hashes work and why they are important. Know how to generate hashes and checksums:</p>

<pre><code>$ echo Hello1 &gt; test.txt
$ cat test.txt 
Hello1
$ sha256sum test.txt 
e616a6e0657eb277d4acad697f19d066aaa62cdde2862d0be591f3de8357de4b  test.txt

$ echo Hello2 &gt; test.txt
$ cat test.txt 
Hello2
$ sha256sum test.txt 
f660df71283ecaf2c469cde588dd19e498c61eb1b5f1bcc664b8d9f338c67331  test.txt
</code></pre>

<p>Changing the file by a single character created a completely different hash. Hashes are like fingerprints; they are unique to a particular file, and cannot be spoofed.</p>

<p>Know how to verify hashes:</p>

<pre><code>$ cat test.txt 
Hello2
$ sha256sum test.txt &gt; hashes.sha256sum
$ cat hashes.sha256sum 
f660df71283ecaf2c469cde588dd19e498c61eb1b5f1bcc664b8d9f338c67331  test.txt
$ sha256sum -c hashes.sha256sum 
test.txt: OK
$ echo Hello1 &gt; test.txt 
$ sha256sum -c hashes.sha256sum 
test.txt: FAILED
sha256sum: WARNING: 1 computed checksum did NOT match
</code></pre>

<p>Become familiar with GPG. Know how to verify signatures:</p>

<pre><code>$ ls
test.txt  test.txt.sig
$ cat test.txt
Hello1
$ gpg --verify test.txt.sig 
gpg: assuming signed data in `test.txt'
gpg: Signature made Sun 29 Mar 2015 11:56:47 AM EDT using RSA key ID C37AF029
gpg: Good signature from "Joseph Ruether &lt;jrruethe@gmail.com&gt;"
$ echo Hello2 &gt; test.txt
$ gpg --verify test.txt.sig 
gpg: assuming signed data in `test.txt'
gpg: Signature made Sun 29 Mar 2015 11:56:47 AM EDT using RSA key ID C37AF029
gpg: BAD signature from "Joseph Ruether &lt;jrruethe@gmail.com&gt;"
</code></pre>

<h2>Passwords and Encryption</h2>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/03/29/protect-yourself-online/01.png"><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>With passwords, the longer the better. Complexity does not beat length.<br/>
Use <a href="http://world.std.com/~reinhold/diceware.html">Diceware</a> to generate a 4 or 5 word passphrase and memorize it.</p>

<p>You can also generate random data from the command line:</p>

<pre><code>dd if=/dev/urandom bs=1 count=64 | sha256sum
</code></pre>

<p>Use the mnemonic.py script from <a href="http://jrruethe.github.io/blog/2015/03/27/hex-to-mnemonics/">this</a> post to generate a string of words from the hex.</p>

<p>Get a <a href="https://www.yubico.com/products/yubikey-hardware/yubikey-neo/">Yubikey Neo</a>.<br/>
Use it&rsquo;s static password mode to store your passphrase.<br/>
Follow <a href="http://blog.josefsson.org/2014/06/23/offline-gnupg-master-key-and-subkeys-on-yubikey-neo-smartcard/">these</a> instructions to load your GPG encryption and signing keys.<br/>
Use its NFC capabilities with the <a href="https://play.google.com/store/apps/details?id=com.yubico.yubiclip&amp;hl=en">YubiClip</a> and <a href="https://play.google.com/store/apps/details?id=org.sufficientlysecure.keychain&amp;hl=en">OpenKeychain</a> Android apps to access your static password and GPG keys from the Yubikey on your smartphone.</p>

<p>Use a password manager like <a href="https://www.keepassx.org/">KeepassX</a>. It is open souce and cross platform.<br/>
Use a keyfile along with your master password.<br/>
Use KeepassX to generate long random passwords for all other needs.</p>

<p>Use <a href="https://github.com/jrruethe/truecrypt">Truecrypt</a>. It is open source and cross platform.<br/>
Use a keyfile along with a strong password generated by KeepassX.</p>

<p>Treat the keyfiles as access tokens.<br/>
Do not let them touch the network. Do not upload them to any online service.<br/>
Instead, manually load them onto your various devices using USB.<br/>
Back them up by printing them to paper in Base64 format, and keep the backups in a safe place.</p>

<pre><code>dd if=/dev/urandom bs=1 count=64 | base64 &gt; keyfile.base64
</code></pre>

<p>By keeping a strong password on a hardware token you posess, coupled with a software token that only exists on the devices of your choosing, you have achieved two factor authentication without any third party.<br/>
Both pieces are needed to unlock either your password database or your truecrypt container.</p>

<p>This means you can use a 3rd party synchronization service without being required to trust them; they couldn&rsquo;t access your passwords or data even if they wanted to.<br/>
Bittorrent Sync or Dropbox both work well to keep your passwords and data synced between your devices.</p>

<h2>Browsing</h2>

<p>Always use HTTPS, and be aware of the certificate being used.<br/>
Learn how to check the certificate fingerprints:</p>

<ul>
<li>Chrome: Lock icon &ndash;> Connection tab &ndash;> Certificate information</li>
<li>Firefox: Lock icon &ndash;> More information &ndash;> View Certificate</li>
</ul>


<p>The truely paranoid will want to verify these fingerprints against another channel.<br/>
<a href="https://www.grc.com/fingerprints.htm">This</a> site is a great way to verify the fingerprints.<br/>
GRC&rsquo;s fingerprint is 01:56:D3:AC:CF:5A:3F:B8:8F:0F:B4:30:88:2D:F6:72:4E:8C:F2:E0, write it down somewhere.</p>

<p>Use <a href="https://duckduckgo.com/">Duck Duck Go</a> instead of Google.<br/>
Use Firefox instead of Chrome.<br/>
Consider the following extensions:</p>

<ul>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/adblock-plus/">Adblock Plus</a></li>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/betterprivacy/">BetterPrivacy</a></li>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/donottrackplus/">Blur</a></li>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/disconnect/">Disconnect</a></li>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/http-nowhere/">HTTP Nowhere</a></li>
<li><a href="https://www.eff.org/HTTPS-EVERYWHERE">HTTPS Everywhere</a></li>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/noscript/">NoScript</a></li>
<li><a href="https://www.eff.org/privacybadger">Privacy Badger</a></li>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/requestpolicy/">RequestPolicy</a></li>
</ul>


<h2>Operating System</h2>

<p>Don&rsquo;t use Windows. <a href="https://www.debian.org/">Debian</a> is a stable and secure Linux distribution.<br/>
Alternatively, use <a href="https://tails.boum.org/">Tails</a> or <a href="https://www.whonix.org/">Whonix</a> (Both are based on Debian).<br/>
In addition, Debian supports full disk encryption using LUKS.</p>

<p>For your smartphone, use Android and <a href="http://www.cyanogenmod.org/">CyanogenMod</a> if possible.<br/>
Android also supports full disk encryption with LUKS.</p>

<p>Debian can also be installed to a USB drive and act as a &ldquo;cold boot&rdquo; system.<br/>
Cold boot means that it is never allowed to touch the network; all data transfer to the cold boot system is done with a second USB drive.<br/>
This practice is good for storing GPG private keys and Bitcoin wallets securely.</p>

<h2>More Information</h2>

<p>I highly recommend you read the following pages for more information:</p>

<ul>
<li><a href="https://freedom.press/encryption-works">Encryption Works</a></li>
<li><a href="https://prism-break.org/en/">Prism Break</a></li>
<li><a href="https://www.privacytools.io/">Privacy Tools</a></li>
<li><a href="https://pack.resetthenet.org/">Reset the Net</a></li>
<li><a href="https://ssd.eff.org/">Surveillance Self-Defense</a></li>
<li><a href="https://www.bestvpn.com/the-ultimate-privacy-guide/">Ultimate Privacy Guide</a></li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://xkcd.com/">Randall Munrow, XKCD</a> licensed under CC-BY-NA 2.5<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Physical Blockchain Identity Card]]></title>
    <link href="http://jrruethe.github.io/blog/2015/03/27/physical-blockchain-identity-card/"/>
    <updated>2015-03-27T18:28:47-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/03/27/physical-blockchain-identity-card</id>
    <content type="html"><![CDATA[<p>In a <a href="http://jrruethe.github.io/blog/2015/02/28/blockchain-identity/">previous post</a>, I walked through the steps to create a digitial Blockchain Identity. Now, it is time to turn that into an physical identity card.</p>

<p>You will need the following:</p>

<ul>
<li><a href="http://www.amazon.com/gp/product/B0010JEJPC/ref=od_aui_detailpages00?ie=UTF8&amp;psc=1">Laminator</a></li>
<li><a href="http://www.amazon.com/gp/product/B004XJC1UQ/ref=od_aui_detailpages00?ie=UTF8&amp;psc=1">10 mil Teslin Paper</a></li>
<li><a href="http://www.amazon.com/gp/product/B004UJC730/ref=ox_sc_act_title_2?ie=UTF8&amp;psc=1&amp;smid=A1GYMVIZIMSYWM">10 mil Butterfly Pouch Laminates</a></li>
<li>A color inkjet printer</li>
</ul>


<p>You will also need the following software:</p>

<ul>
<li>Inkscape</li>
<li>QtQr</li>
<li>gLabels</li>
</ul>


<p>There is no standard template for your ID card; you can design it however you wish. The general idea is that it displays the necessary information to be a link between your government issued identification document and your GPG key. It is also a convienient place to put some contact information.</p>

<p>The most important item it must contain is the QR code containing your key.json.asc information. Remember, only the hash of this file is stored in the blockchain, so you need to make the data available for verification. For this reason, it is also recommended to include the hash and the Bitcoin transaction ID on your card. Finally, a link to your Keybase.io account is recommended.</p>

<p>To prove your identity, one would scan the QR code containing your key.json.asc information to obtain the ASCII text, and use your Keybase.io account to verify it&rsquo;s authenticity. Then, the hash of that data can be calculated and compared against the Bitcoin transaction. All the information needed (besides keybase.io and blockchain.info) are stored on your physical card; no need for your personal computer. Furthermore, the information can be validated with a smart phone; no full PC is needed.</p>

<p>Below you will find the template I designed using Inkscape. It isn&rsquo;t very flashy, but it does it&rsquo;s job well.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/03/27/physical-blockchain-identity-card/01.png"></p>

<p>Do note that I let the edges overlap a little bit to ensure the color covers the entire border.<br/>
Here is the back, and containing the most important part of the document:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/03/27/physical-blockchain-identity-card/02.png"></p>

<p>Scanning that will reveal the key.json.asc data.</p>

<p>Next, this card needs to be layed out on the Teslin paper properly. For this, I used gLabels and created a custom template. It took some trial and error to get everything lined up correctly, but here are the settings I ended up using:</p>

<ol>
<li>Width: 87.6 mm</li>
<li>Height: 56.0 mm</li>
<li>Round: 3.0 mm</li>
<li>Horizontal Waste: 1.0 mm</li>
<li>Vertical Waste: 1.0 mm</li>
<li>Margin: 1.0 mm</li>
</ol>


<p>and:</p>

<ul>
<li>nx: 2</li>
<li>ny: 4</li>
<li>x0: 15.9 mm</li>
<li>y0: 15.9 mm</li>
<li>dx: 97.0 mm</li>
<li>dy: 64.0 mm</li>
</ul>


<p>Here are the steps:</p>

<ol>
<li>Once you create your card in Inkscape, export it to a png.</li>
<li>Open gLabels and use your png to create a card.</li>
<li>Print it onto the Teslin paper at the highest quality your printer allows.</li>
<li>Let it dry, then pop the card out and place it inside of a butterfly pouch.

<ul>
<li>Do note that the glossy side goes out, the matte side is glue that should be up against the Teslin paper.</li>
<li>Also, the folded edge should be at the bottom of the card.</li>
<li>Be careful not to get fingerprints on the inside of the pouch.</li>
</ul>
</li>
<li>Warm up the laminator and feed the butterfly pouch containing the card folded edge first into the laminator.</li>
<li>When it comes out, flip it over and run it through again (on the other side).

<ul>
<li>You may need to run it through each side twice, for a total of four times.</li>
</ul>
</li>
<li>Let it cool, and enjoy your finished product!</li>
</ol>


<p>The result will look and feel like a real ID card. Below is an image of mine, with some stuff blurred out.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/03/27/physical-blockchain-identity-card/03.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hex to Mnemonics]]></title>
    <link href="http://jrruethe.github.io/blog/2015/03/27/hex-to-mnemonics/"/>
    <updated>2015-03-27T17:03:46-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/03/27/hex-to-mnemonics</id>
    <content type="html"><![CDATA[<p>Hex values are the common representation for things like hashes, fingerprints, and uuids. They are great for machines,  but clumsy for humans. In this post, you will find two scripts used to convert a hex string to english words. This is useful for memorization or sharing by voice.</p>

<p>The first script comes straight from the Electrum Bitcoin wallet source code. I heard about this idea <a href="http://www.reddit.com/r/Bitcoin/comments/2xggow/where_can_i_turn_my_random_phrase_into_a_12_word/">here</a>. It is used to store the random seed that unlocks a deterministic Bitcoin wallet. Of course, it works nicely for any hex string as well.</p>

<figure class='code'><figcaption><span> (mnemonic.py)</span> <a href='http://jrruethe.github.io/downloads/code/mnemonic.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Electrum - lightweight Bitcoin client</span>
</span><span class='line'><span class="c"># Copyright (C) 2011 thomasv@gitorious</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c"># it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c"># the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c"># (at your option) any later version.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c"># GNU General Public License for more details.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c"># along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># List of words from:</span>
</span><span class='line'><span class="c"># http://en.wiktionary.org/wiki/Wiktionary:Frequency_lists/Contemporary_poetry</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'><span class="s">&quot;like&quot;</span><span class="p">,</span> <span class="s">&quot;just&quot;</span><span class="p">,</span> <span class="s">&quot;love&quot;</span><span class="p">,</span> <span class="s">&quot;know&quot;</span><span class="p">,</span> <span class="s">&quot;never&quot;</span><span class="p">,</span> <span class="s">&quot;want&quot;</span><span class="p">,</span> <span class="s">&quot;time&quot;</span><span class="p">,</span> <span class="s">&quot;out&quot;</span><span class="p">,</span> <span class="s">&quot;there&quot;</span><span class="p">,</span> <span class="s">&quot;make&quot;</span><span class="p">,</span> <span class="s">&quot;look&quot;</span><span class="p">,</span> <span class="s">&quot;eye&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;down&quot;</span><span class="p">,</span> <span class="s">&quot;only&quot;</span><span class="p">,</span> <span class="s">&quot;think&quot;</span><span class="p">,</span> <span class="s">&quot;heart&quot;</span><span class="p">,</span> <span class="s">&quot;back&quot;</span><span class="p">,</span> <span class="s">&quot;then&quot;</span><span class="p">,</span> <span class="s">&quot;into&quot;</span><span class="p">,</span> <span class="s">&quot;about&quot;</span><span class="p">,</span> <span class="s">&quot;more&quot;</span><span class="p">,</span> <span class="s">&quot;away&quot;</span><span class="p">,</span> <span class="s">&quot;still&quot;</span><span class="p">,</span> <span class="s">&quot;them&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;take&quot;</span><span class="p">,</span> <span class="s">&quot;thing&quot;</span><span class="p">,</span> <span class="s">&quot;even&quot;</span><span class="p">,</span> <span class="s">&quot;through&quot;</span><span class="p">,</span> <span class="s">&quot;long&quot;</span><span class="p">,</span> <span class="s">&quot;always&quot;</span><span class="p">,</span> <span class="s">&quot;world&quot;</span><span class="p">,</span> <span class="s">&quot;too&quot;</span><span class="p">,</span> <span class="s">&quot;friend&quot;</span><span class="p">,</span> <span class="s">&quot;tell&quot;</span><span class="p">,</span> <span class="s">&quot;try&quot;</span><span class="p">,</span> <span class="s">&quot;hand&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;thought&quot;</span><span class="p">,</span> <span class="s">&quot;over&quot;</span><span class="p">,</span> <span class="s">&quot;here&quot;</span><span class="p">,</span> <span class="s">&quot;other&quot;</span><span class="p">,</span> <span class="s">&quot;need&quot;</span><span class="p">,</span> <span class="s">&quot;smile&quot;</span><span class="p">,</span> <span class="s">&quot;again&quot;</span><span class="p">,</span> <span class="s">&quot;much&quot;</span><span class="p">,</span> <span class="s">&quot;cry&quot;</span><span class="p">,</span> <span class="s">&quot;been&quot;</span><span class="p">,</span> <span class="s">&quot;night&quot;</span><span class="p">,</span> <span class="s">&quot;ever&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;little&quot;</span><span class="p">,</span> <span class="s">&quot;said&quot;</span><span class="p">,</span> <span class="s">&quot;end&quot;</span><span class="p">,</span> <span class="s">&quot;some&quot;</span><span class="p">,</span> <span class="s">&quot;those&quot;</span><span class="p">,</span> <span class="s">&quot;around&quot;</span><span class="p">,</span> <span class="s">&quot;mind&quot;</span><span class="p">,</span> <span class="s">&quot;people&quot;</span><span class="p">,</span> <span class="s">&quot;girl&quot;</span><span class="p">,</span> <span class="s">&quot;leave&quot;</span><span class="p">,</span> <span class="s">&quot;dream&quot;</span><span class="p">,</span> <span class="s">&quot;left&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;turn&quot;</span><span class="p">,</span> <span class="s">&quot;myself&quot;</span><span class="p">,</span> <span class="s">&quot;give&quot;</span><span class="p">,</span> <span class="s">&quot;nothing&quot;</span><span class="p">,</span> <span class="s">&quot;really&quot;</span><span class="p">,</span> <span class="s">&quot;off&quot;</span><span class="p">,</span> <span class="s">&quot;before&quot;</span><span class="p">,</span> <span class="s">&quot;something&quot;</span><span class="p">,</span> <span class="s">&quot;find&quot;</span><span class="p">,</span> <span class="s">&quot;walk&quot;</span><span class="p">,</span> <span class="s">&quot;wish&quot;</span><span class="p">,</span> <span class="s">&quot;good&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;once&quot;</span><span class="p">,</span> <span class="s">&quot;place&quot;</span><span class="p">,</span> <span class="s">&quot;ask&quot;</span><span class="p">,</span> <span class="s">&quot;stop&quot;</span><span class="p">,</span> <span class="s">&quot;keep&quot;</span><span class="p">,</span> <span class="s">&quot;watch&quot;</span><span class="p">,</span> <span class="s">&quot;seem&quot;</span><span class="p">,</span> <span class="s">&quot;everything&quot;</span><span class="p">,</span> <span class="s">&quot;wait&quot;</span><span class="p">,</span> <span class="s">&quot;got&quot;</span><span class="p">,</span> <span class="s">&quot;yet&quot;</span><span class="p">,</span> <span class="s">&quot;made&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;remember&quot;</span><span class="p">,</span> <span class="s">&quot;start&quot;</span><span class="p">,</span> <span class="s">&quot;alone&quot;</span><span class="p">,</span> <span class="s">&quot;run&quot;</span><span class="p">,</span> <span class="s">&quot;hope&quot;</span><span class="p">,</span> <span class="s">&quot;maybe&quot;</span><span class="p">,</span> <span class="s">&quot;believe&quot;</span><span class="p">,</span> <span class="s">&quot;body&quot;</span><span class="p">,</span> <span class="s">&quot;hate&quot;</span><span class="p">,</span> <span class="s">&quot;after&quot;</span><span class="p">,</span> <span class="s">&quot;close&quot;</span><span class="p">,</span> <span class="s">&quot;talk&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;stand&quot;</span><span class="p">,</span> <span class="s">&quot;own&quot;</span><span class="p">,</span> <span class="s">&quot;each&quot;</span><span class="p">,</span> <span class="s">&quot;hurt&quot;</span><span class="p">,</span> <span class="s">&quot;help&quot;</span><span class="p">,</span> <span class="s">&quot;home&quot;</span><span class="p">,</span> <span class="s">&quot;god&quot;</span><span class="p">,</span> <span class="s">&quot;soul&quot;</span><span class="p">,</span> <span class="s">&quot;new&quot;</span><span class="p">,</span> <span class="s">&quot;many&quot;</span><span class="p">,</span> <span class="s">&quot;two&quot;</span><span class="p">,</span> <span class="s">&quot;inside&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;should&quot;</span><span class="p">,</span> <span class="s">&quot;true&quot;</span><span class="p">,</span> <span class="s">&quot;first&quot;</span><span class="p">,</span> <span class="s">&quot;fear&quot;</span><span class="p">,</span> <span class="s">&quot;mean&quot;</span><span class="p">,</span> <span class="s">&quot;better&quot;</span><span class="p">,</span> <span class="s">&quot;play&quot;</span><span class="p">,</span> <span class="s">&quot;another&quot;</span><span class="p">,</span> <span class="s">&quot;gone&quot;</span><span class="p">,</span> <span class="s">&quot;change&quot;</span><span class="p">,</span> <span class="s">&quot;use&quot;</span><span class="p">,</span> <span class="s">&quot;wonder&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;someone&quot;</span><span class="p">,</span> <span class="s">&quot;hair&quot;</span><span class="p">,</span> <span class="s">&quot;cold&quot;</span><span class="p">,</span> <span class="s">&quot;open&quot;</span><span class="p">,</span> <span class="s">&quot;best&quot;</span><span class="p">,</span> <span class="s">&quot;any&quot;</span><span class="p">,</span> <span class="s">&quot;behind&quot;</span><span class="p">,</span> <span class="s">&quot;happen&quot;</span><span class="p">,</span> <span class="s">&quot;water&quot;</span><span class="p">,</span> <span class="s">&quot;dark&quot;</span><span class="p">,</span> <span class="s">&quot;laugh&quot;</span><span class="p">,</span> <span class="s">&quot;stay&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;forever&quot;</span><span class="p">,</span> <span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="s">&quot;work&quot;</span><span class="p">,</span> <span class="s">&quot;show&quot;</span><span class="p">,</span> <span class="s">&quot;sky&quot;</span><span class="p">,</span> <span class="s">&quot;break&quot;</span><span class="p">,</span> <span class="s">&quot;came&quot;</span><span class="p">,</span> <span class="s">&quot;deep&quot;</span><span class="p">,</span> <span class="s">&quot;door&quot;</span><span class="p">,</span> <span class="s">&quot;put&quot;</span><span class="p">,</span> <span class="s">&quot;black&quot;</span><span class="p">,</span> <span class="s">&quot;together&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;upon&quot;</span><span class="p">,</span> <span class="s">&quot;happy&quot;</span><span class="p">,</span> <span class="s">&quot;such&quot;</span><span class="p">,</span> <span class="s">&quot;great&quot;</span><span class="p">,</span> <span class="s">&quot;white&quot;</span><span class="p">,</span> <span class="s">&quot;matter&quot;</span><span class="p">,</span> <span class="s">&quot;fill&quot;</span><span class="p">,</span> <span class="s">&quot;past&quot;</span><span class="p">,</span> <span class="s">&quot;please&quot;</span><span class="p">,</span> <span class="s">&quot;burn&quot;</span><span class="p">,</span> <span class="s">&quot;cause&quot;</span><span class="p">,</span> <span class="s">&quot;enough&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;touch&quot;</span><span class="p">,</span> <span class="s">&quot;moment&quot;</span><span class="p">,</span> <span class="s">&quot;soon&quot;</span><span class="p">,</span> <span class="s">&quot;voice&quot;</span><span class="p">,</span> <span class="s">&quot;scream&quot;</span><span class="p">,</span> <span class="s">&quot;anything&quot;</span><span class="p">,</span> <span class="s">&quot;stare&quot;</span><span class="p">,</span> <span class="s">&quot;sound&quot;</span><span class="p">,</span> <span class="s">&quot;red&quot;</span><span class="p">,</span> <span class="s">&quot;everyone&quot;</span><span class="p">,</span> <span class="s">&quot;hide&quot;</span><span class="p">,</span> <span class="s">&quot;kiss&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;truth&quot;</span><span class="p">,</span> <span class="s">&quot;death&quot;</span><span class="p">,</span> <span class="s">&quot;beautiful&quot;</span><span class="p">,</span> <span class="s">&quot;mine&quot;</span><span class="p">,</span> <span class="s">&quot;blood&quot;</span><span class="p">,</span> <span class="s">&quot;broken&quot;</span><span class="p">,</span> <span class="s">&quot;very&quot;</span><span class="p">,</span> <span class="s">&quot;pass&quot;</span><span class="p">,</span> <span class="s">&quot;next&quot;</span><span class="p">,</span> <span class="s">&quot;forget&quot;</span><span class="p">,</span> <span class="s">&quot;tree&quot;</span><span class="p">,</span> <span class="s">&quot;wrong&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;air&quot;</span><span class="p">,</span> <span class="s">&quot;mother&quot;</span><span class="p">,</span> <span class="s">&quot;understand&quot;</span><span class="p">,</span> <span class="s">&quot;lip&quot;</span><span class="p">,</span> <span class="s">&quot;hit&quot;</span><span class="p">,</span> <span class="s">&quot;wall&quot;</span><span class="p">,</span> <span class="s">&quot;memory&quot;</span><span class="p">,</span> <span class="s">&quot;sleep&quot;</span><span class="p">,</span> <span class="s">&quot;free&quot;</span><span class="p">,</span> <span class="s">&quot;high&quot;</span><span class="p">,</span> <span class="s">&quot;realize&quot;</span><span class="p">,</span> <span class="s">&quot;school&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;might&quot;</span><span class="p">,</span> <span class="s">&quot;skin&quot;</span><span class="p">,</span> <span class="s">&quot;sweet&quot;</span><span class="p">,</span> <span class="s">&quot;perfect&quot;</span><span class="p">,</span> <span class="s">&quot;blue&quot;</span><span class="p">,</span> <span class="s">&quot;kill&quot;</span><span class="p">,</span> <span class="s">&quot;breath&quot;</span><span class="p">,</span> <span class="s">&quot;dance&quot;</span><span class="p">,</span> <span class="s">&quot;against&quot;</span><span class="p">,</span> <span class="s">&quot;fly&quot;</span><span class="p">,</span> <span class="s">&quot;between&quot;</span><span class="p">,</span> <span class="s">&quot;grow&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;strong&quot;</span><span class="p">,</span> <span class="s">&quot;under&quot;</span><span class="p">,</span> <span class="s">&quot;listen&quot;</span><span class="p">,</span> <span class="s">&quot;bring&quot;</span><span class="p">,</span> <span class="s">&quot;sometimes&quot;</span><span class="p">,</span> <span class="s">&quot;speak&quot;</span><span class="p">,</span> <span class="s">&quot;pull&quot;</span><span class="p">,</span> <span class="s">&quot;person&quot;</span><span class="p">,</span> <span class="s">&quot;become&quot;</span><span class="p">,</span> <span class="s">&quot;family&quot;</span><span class="p">,</span> <span class="s">&quot;begin&quot;</span><span class="p">,</span> <span class="s">&quot;ground&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;real&quot;</span><span class="p">,</span> <span class="s">&quot;small&quot;</span><span class="p">,</span> <span class="s">&quot;father&quot;</span><span class="p">,</span> <span class="s">&quot;sure&quot;</span><span class="p">,</span> <span class="s">&quot;feet&quot;</span><span class="p">,</span> <span class="s">&quot;rest&quot;</span><span class="p">,</span> <span class="s">&quot;young&quot;</span><span class="p">,</span> <span class="s">&quot;finally&quot;</span><span class="p">,</span> <span class="s">&quot;land&quot;</span><span class="p">,</span> <span class="s">&quot;across&quot;</span><span class="p">,</span> <span class="s">&quot;today&quot;</span><span class="p">,</span> <span class="s">&quot;different&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;guy&quot;</span><span class="p">,</span> <span class="s">&quot;line&quot;</span><span class="p">,</span> <span class="s">&quot;fire&quot;</span><span class="p">,</span> <span class="s">&quot;reason&quot;</span><span class="p">,</span> <span class="s">&quot;reach&quot;</span><span class="p">,</span> <span class="s">&quot;second&quot;</span><span class="p">,</span> <span class="s">&quot;slowly&quot;</span><span class="p">,</span> <span class="s">&quot;write&quot;</span><span class="p">,</span> <span class="s">&quot;eat&quot;</span><span class="p">,</span> <span class="s">&quot;smell&quot;</span><span class="p">,</span> <span class="s">&quot;mouth&quot;</span><span class="p">,</span> <span class="s">&quot;step&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;learn&quot;</span><span class="p">,</span> <span class="s">&quot;three&quot;</span><span class="p">,</span> <span class="s">&quot;floor&quot;</span><span class="p">,</span> <span class="s">&quot;promise&quot;</span><span class="p">,</span> <span class="s">&quot;breathe&quot;</span><span class="p">,</span> <span class="s">&quot;darkness&quot;</span><span class="p">,</span> <span class="s">&quot;push&quot;</span><span class="p">,</span> <span class="s">&quot;earth&quot;</span><span class="p">,</span> <span class="s">&quot;guess&quot;</span><span class="p">,</span> <span class="s">&quot;save&quot;</span><span class="p">,</span> <span class="s">&quot;song&quot;</span><span class="p">,</span> <span class="s">&quot;above&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;along&quot;</span><span class="p">,</span> <span class="s">&quot;both&quot;</span><span class="p">,</span> <span class="s">&quot;color&quot;</span><span class="p">,</span> <span class="s">&quot;house&quot;</span><span class="p">,</span> <span class="s">&quot;almost&quot;</span><span class="p">,</span> <span class="s">&quot;sorry&quot;</span><span class="p">,</span> <span class="s">&quot;anymore&quot;</span><span class="p">,</span> <span class="s">&quot;brother&quot;</span><span class="p">,</span> <span class="s">&quot;okay&quot;</span><span class="p">,</span> <span class="s">&quot;dear&quot;</span><span class="p">,</span> <span class="s">&quot;game&quot;</span><span class="p">,</span> <span class="s">&quot;fade&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;already&quot;</span><span class="p">,</span> <span class="s">&quot;apart&quot;</span><span class="p">,</span> <span class="s">&quot;warm&quot;</span><span class="p">,</span> <span class="s">&quot;beauty&quot;</span><span class="p">,</span> <span class="s">&quot;heard&quot;</span><span class="p">,</span> <span class="s">&quot;notice&quot;</span><span class="p">,</span> <span class="s">&quot;question&quot;</span><span class="p">,</span> <span class="s">&quot;shine&quot;</span><span class="p">,</span> <span class="s">&quot;began&quot;</span><span class="p">,</span> <span class="s">&quot;piece&quot;</span><span class="p">,</span> <span class="s">&quot;whole&quot;</span><span class="p">,</span> <span class="s">&quot;shadow&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;secret&quot;</span><span class="p">,</span> <span class="s">&quot;street&quot;</span><span class="p">,</span> <span class="s">&quot;within&quot;</span><span class="p">,</span> <span class="s">&quot;finger&quot;</span><span class="p">,</span> <span class="s">&quot;point&quot;</span><span class="p">,</span> <span class="s">&quot;morning&quot;</span><span class="p">,</span> <span class="s">&quot;whisper&quot;</span><span class="p">,</span> <span class="s">&quot;child&quot;</span><span class="p">,</span> <span class="s">&quot;moon&quot;</span><span class="p">,</span> <span class="s">&quot;green&quot;</span><span class="p">,</span> <span class="s">&quot;story&quot;</span><span class="p">,</span> <span class="s">&quot;glass&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;kid&quot;</span><span class="p">,</span> <span class="s">&quot;silence&quot;</span><span class="p">,</span> <span class="s">&quot;since&quot;</span><span class="p">,</span> <span class="s">&quot;soft&quot;</span><span class="p">,</span> <span class="s">&quot;yourself&quot;</span><span class="p">,</span> <span class="s">&quot;empty&quot;</span><span class="p">,</span> <span class="s">&quot;shall&quot;</span><span class="p">,</span> <span class="s">&quot;angel&quot;</span><span class="p">,</span> <span class="s">&quot;answer&quot;</span><span class="p">,</span> <span class="s">&quot;baby&quot;</span><span class="p">,</span> <span class="s">&quot;bright&quot;</span><span class="p">,</span> <span class="s">&quot;dad&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;path&quot;</span><span class="p">,</span> <span class="s">&quot;worry&quot;</span><span class="p">,</span> <span class="s">&quot;hour&quot;</span><span class="p">,</span> <span class="s">&quot;drop&quot;</span><span class="p">,</span> <span class="s">&quot;follow&quot;</span><span class="p">,</span> <span class="s">&quot;power&quot;</span><span class="p">,</span> <span class="s">&quot;war&quot;</span><span class="p">,</span> <span class="s">&quot;half&quot;</span><span class="p">,</span> <span class="s">&quot;flow&quot;</span><span class="p">,</span> <span class="s">&quot;heaven&quot;</span><span class="p">,</span> <span class="s">&quot;act&quot;</span><span class="p">,</span> <span class="s">&quot;chance&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;fact&quot;</span><span class="p">,</span> <span class="s">&quot;least&quot;</span><span class="p">,</span> <span class="s">&quot;tired&quot;</span><span class="p">,</span> <span class="s">&quot;children&quot;</span><span class="p">,</span> <span class="s">&quot;near&quot;</span><span class="p">,</span> <span class="s">&quot;quite&quot;</span><span class="p">,</span> <span class="s">&quot;afraid&quot;</span><span class="p">,</span> <span class="s">&quot;rise&quot;</span><span class="p">,</span> <span class="s">&quot;sea&quot;</span><span class="p">,</span> <span class="s">&quot;taste&quot;</span><span class="p">,</span> <span class="s">&quot;window&quot;</span><span class="p">,</span> <span class="s">&quot;cover&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;nice&quot;</span><span class="p">,</span> <span class="s">&quot;trust&quot;</span><span class="p">,</span> <span class="s">&quot;lot&quot;</span><span class="p">,</span> <span class="s">&quot;sad&quot;</span><span class="p">,</span> <span class="s">&quot;cool&quot;</span><span class="p">,</span> <span class="s">&quot;force&quot;</span><span class="p">,</span> <span class="s">&quot;peace&quot;</span><span class="p">,</span> <span class="s">&quot;return&quot;</span><span class="p">,</span> <span class="s">&quot;blind&quot;</span><span class="p">,</span> <span class="s">&quot;easy&quot;</span><span class="p">,</span> <span class="s">&quot;ready&quot;</span><span class="p">,</span> <span class="s">&quot;roll&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;rose&quot;</span><span class="p">,</span> <span class="s">&quot;drive&quot;</span><span class="p">,</span> <span class="s">&quot;held&quot;</span><span class="p">,</span> <span class="s">&quot;music&quot;</span><span class="p">,</span> <span class="s">&quot;beneath&quot;</span><span class="p">,</span> <span class="s">&quot;hang&quot;</span><span class="p">,</span> <span class="s">&quot;mom&quot;</span><span class="p">,</span> <span class="s">&quot;paint&quot;</span><span class="p">,</span> <span class="s">&quot;emotion&quot;</span><span class="p">,</span> <span class="s">&quot;quiet&quot;</span><span class="p">,</span> <span class="s">&quot;clear&quot;</span><span class="p">,</span> <span class="s">&quot;cloud&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;few&quot;</span><span class="p">,</span> <span class="s">&quot;pretty&quot;</span><span class="p">,</span> <span class="s">&quot;bird&quot;</span><span class="p">,</span> <span class="s">&quot;outside&quot;</span><span class="p">,</span> <span class="s">&quot;paper&quot;</span><span class="p">,</span> <span class="s">&quot;picture&quot;</span><span class="p">,</span> <span class="s">&quot;front&quot;</span><span class="p">,</span> <span class="s">&quot;rock&quot;</span><span class="p">,</span> <span class="s">&quot;simple&quot;</span><span class="p">,</span> <span class="s">&quot;anyone&quot;</span><span class="p">,</span> <span class="s">&quot;meant&quot;</span><span class="p">,</span> <span class="s">&quot;reality&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;road&quot;</span><span class="p">,</span> <span class="s">&quot;sense&quot;</span><span class="p">,</span> <span class="s">&quot;waste&quot;</span><span class="p">,</span> <span class="s">&quot;bit&quot;</span><span class="p">,</span> <span class="s">&quot;leaf&quot;</span><span class="p">,</span> <span class="s">&quot;thank&quot;</span><span class="p">,</span> <span class="s">&quot;happiness&quot;</span><span class="p">,</span> <span class="s">&quot;meet&quot;</span><span class="p">,</span> <span class="s">&quot;men&quot;</span><span class="p">,</span> <span class="s">&quot;smoke&quot;</span><span class="p">,</span> <span class="s">&quot;truly&quot;</span><span class="p">,</span> <span class="s">&quot;decide&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;self&quot;</span><span class="p">,</span> <span class="s">&quot;age&quot;</span><span class="p">,</span> <span class="s">&quot;book&quot;</span><span class="p">,</span> <span class="s">&quot;form&quot;</span><span class="p">,</span> <span class="s">&quot;alive&quot;</span><span class="p">,</span> <span class="s">&quot;carry&quot;</span><span class="p">,</span> <span class="s">&quot;escape&quot;</span><span class="p">,</span> <span class="s">&quot;damn&quot;</span><span class="p">,</span> <span class="s">&quot;instead&quot;</span><span class="p">,</span> <span class="s">&quot;able&quot;</span><span class="p">,</span> <span class="s">&quot;ice&quot;</span><span class="p">,</span> <span class="s">&quot;minute&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;throw&quot;</span><span class="p">,</span> <span class="s">&quot;catch&quot;</span><span class="p">,</span> <span class="s">&quot;leg&quot;</span><span class="p">,</span> <span class="s">&quot;ring&quot;</span><span class="p">,</span> <span class="s">&quot;course&quot;</span><span class="p">,</span> <span class="s">&quot;goodbye&quot;</span><span class="p">,</span> <span class="s">&quot;lead&quot;</span><span class="p">,</span> <span class="s">&quot;poem&quot;</span><span class="p">,</span> <span class="s">&quot;sick&quot;</span><span class="p">,</span> <span class="s">&quot;corner&quot;</span><span class="p">,</span> <span class="s">&quot;desire&quot;</span><span class="p">,</span> <span class="s">&quot;known&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;problem&quot;</span><span class="p">,</span> <span class="s">&quot;remind&quot;</span><span class="p">,</span> <span class="s">&quot;shoulder&quot;</span><span class="p">,</span> <span class="s">&quot;suppose&quot;</span><span class="p">,</span> <span class="s">&quot;toward&quot;</span><span class="p">,</span> <span class="s">&quot;wave&quot;</span><span class="p">,</span> <span class="s">&quot;drink&quot;</span><span class="p">,</span> <span class="s">&quot;jump&quot;</span><span class="p">,</span> <span class="s">&quot;woman&quot;</span><span class="p">,</span> <span class="s">&quot;pretend&quot;</span><span class="p">,</span> <span class="s">&quot;sister&quot;</span><span class="p">,</span> <span class="s">&quot;week&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;human&quot;</span><span class="p">,</span> <span class="s">&quot;joy&quot;</span><span class="p">,</span> <span class="s">&quot;crack&quot;</span><span class="p">,</span> <span class="s">&quot;grey&quot;</span><span class="p">,</span> <span class="s">&quot;pray&quot;</span><span class="p">,</span> <span class="s">&quot;surprise&quot;</span><span class="p">,</span> <span class="s">&quot;dry&quot;</span><span class="p">,</span> <span class="s">&quot;knee&quot;</span><span class="p">,</span> <span class="s">&quot;less&quot;</span><span class="p">,</span> <span class="s">&quot;search&quot;</span><span class="p">,</span> <span class="s">&quot;bleed&quot;</span><span class="p">,</span> <span class="s">&quot;caught&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;clean&quot;</span><span class="p">,</span> <span class="s">&quot;embrace&quot;</span><span class="p">,</span> <span class="s">&quot;future&quot;</span><span class="p">,</span> <span class="s">&quot;king&quot;</span><span class="p">,</span> <span class="s">&quot;son&quot;</span><span class="p">,</span> <span class="s">&quot;sorrow&quot;</span><span class="p">,</span> <span class="s">&quot;chest&quot;</span><span class="p">,</span> <span class="s">&quot;hug&quot;</span><span class="p">,</span> <span class="s">&quot;remain&quot;</span><span class="p">,</span> <span class="s">&quot;sat&quot;</span><span class="p">,</span> <span class="s">&quot;worth&quot;</span><span class="p">,</span> <span class="s">&quot;blow&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;daddy&quot;</span><span class="p">,</span> <span class="s">&quot;final&quot;</span><span class="p">,</span> <span class="s">&quot;parent&quot;</span><span class="p">,</span> <span class="s">&quot;tight&quot;</span><span class="p">,</span> <span class="s">&quot;also&quot;</span><span class="p">,</span> <span class="s">&quot;create&quot;</span><span class="p">,</span> <span class="s">&quot;lonely&quot;</span><span class="p">,</span> <span class="s">&quot;safe&quot;</span><span class="p">,</span> <span class="s">&quot;cross&quot;</span><span class="p">,</span> <span class="s">&quot;dress&quot;</span><span class="p">,</span> <span class="s">&quot;evil&quot;</span><span class="p">,</span> <span class="s">&quot;silent&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;bone&quot;</span><span class="p">,</span> <span class="s">&quot;fate&quot;</span><span class="p">,</span> <span class="s">&quot;perhaps&quot;</span><span class="p">,</span> <span class="s">&quot;anger&quot;</span><span class="p">,</span> <span class="s">&quot;class&quot;</span><span class="p">,</span> <span class="s">&quot;scar&quot;</span><span class="p">,</span> <span class="s">&quot;snow&quot;</span><span class="p">,</span> <span class="s">&quot;tiny&quot;</span><span class="p">,</span> <span class="s">&quot;tonight&quot;</span><span class="p">,</span> <span class="s">&quot;continue&quot;</span><span class="p">,</span> <span class="s">&quot;control&quot;</span><span class="p">,</span> <span class="s">&quot;dog&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;edge&quot;</span><span class="p">,</span> <span class="s">&quot;mirror&quot;</span><span class="p">,</span> <span class="s">&quot;month&quot;</span><span class="p">,</span> <span class="s">&quot;suddenly&quot;</span><span class="p">,</span> <span class="s">&quot;comfort&quot;</span><span class="p">,</span> <span class="s">&quot;given&quot;</span><span class="p">,</span> <span class="s">&quot;loud&quot;</span><span class="p">,</span> <span class="s">&quot;quickly&quot;</span><span class="p">,</span> <span class="s">&quot;gaze&quot;</span><span class="p">,</span> <span class="s">&quot;plan&quot;</span><span class="p">,</span> <span class="s">&quot;rush&quot;</span><span class="p">,</span> <span class="s">&quot;stone&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;town&quot;</span><span class="p">,</span> <span class="s">&quot;battle&quot;</span><span class="p">,</span> <span class="s">&quot;ignore&quot;</span><span class="p">,</span> <span class="s">&quot;spirit&quot;</span><span class="p">,</span> <span class="s">&quot;stood&quot;</span><span class="p">,</span> <span class="s">&quot;stupid&quot;</span><span class="p">,</span> <span class="s">&quot;yours&quot;</span><span class="p">,</span> <span class="s">&quot;brown&quot;</span><span class="p">,</span> <span class="s">&quot;build&quot;</span><span class="p">,</span> <span class="s">&quot;dust&quot;</span><span class="p">,</span> <span class="s">&quot;hey&quot;</span><span class="p">,</span> <span class="s">&quot;kept&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;pay&quot;</span><span class="p">,</span> <span class="s">&quot;phone&quot;</span><span class="p">,</span> <span class="s">&quot;twist&quot;</span><span class="p">,</span> <span class="s">&quot;although&quot;</span><span class="p">,</span> <span class="s">&quot;ball&quot;</span><span class="p">,</span> <span class="s">&quot;beyond&quot;</span><span class="p">,</span> <span class="s">&quot;hidden&quot;</span><span class="p">,</span> <span class="s">&quot;nose&quot;</span><span class="p">,</span> <span class="s">&quot;taken&quot;</span><span class="p">,</span> <span class="s">&quot;fail&quot;</span><span class="p">,</span> <span class="s">&quot;float&quot;</span><span class="p">,</span> <span class="s">&quot;pure&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;somehow&quot;</span><span class="p">,</span> <span class="s">&quot;wash&quot;</span><span class="p">,</span> <span class="s">&quot;wrap&quot;</span><span class="p">,</span> <span class="s">&quot;angry&quot;</span><span class="p">,</span> <span class="s">&quot;cheek&quot;</span><span class="p">,</span> <span class="s">&quot;creature&quot;</span><span class="p">,</span> <span class="s">&quot;forgotten&quot;</span><span class="p">,</span> <span class="s">&quot;heat&quot;</span><span class="p">,</span> <span class="s">&quot;rip&quot;</span><span class="p">,</span> <span class="s">&quot;single&quot;</span><span class="p">,</span> <span class="s">&quot;space&quot;</span><span class="p">,</span> <span class="s">&quot;special&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;weak&quot;</span><span class="p">,</span> <span class="s">&quot;whatever&quot;</span><span class="p">,</span> <span class="s">&quot;yell&quot;</span><span class="p">,</span> <span class="s">&quot;anyway&quot;</span><span class="p">,</span> <span class="s">&quot;blame&quot;</span><span class="p">,</span> <span class="s">&quot;job&quot;</span><span class="p">,</span> <span class="s">&quot;choose&quot;</span><span class="p">,</span> <span class="s">&quot;country&quot;</span><span class="p">,</span> <span class="s">&quot;curse&quot;</span><span class="p">,</span> <span class="s">&quot;drift&quot;</span><span class="p">,</span> <span class="s">&quot;echo&quot;</span><span class="p">,</span> <span class="s">&quot;figure&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;grew&quot;</span><span class="p">,</span> <span class="s">&quot;laughter&quot;</span><span class="p">,</span> <span class="s">&quot;neck&quot;</span><span class="p">,</span> <span class="s">&quot;suffer&quot;</span><span class="p">,</span> <span class="s">&quot;worse&quot;</span><span class="p">,</span> <span class="s">&quot;yeah&quot;</span><span class="p">,</span> <span class="s">&quot;disappear&quot;</span><span class="p">,</span> <span class="s">&quot;foot&quot;</span><span class="p">,</span> <span class="s">&quot;forward&quot;</span><span class="p">,</span> <span class="s">&quot;knife&quot;</span><span class="p">,</span> <span class="s">&quot;mess&quot;</span><span class="p">,</span> <span class="s">&quot;somewhere&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;stomach&quot;</span><span class="p">,</span> <span class="s">&quot;storm&quot;</span><span class="p">,</span> <span class="s">&quot;beg&quot;</span><span class="p">,</span> <span class="s">&quot;idea&quot;</span><span class="p">,</span> <span class="s">&quot;lift&quot;</span><span class="p">,</span> <span class="s">&quot;offer&quot;</span><span class="p">,</span> <span class="s">&quot;breeze&quot;</span><span class="p">,</span> <span class="s">&quot;field&quot;</span><span class="p">,</span> <span class="s">&quot;five&quot;</span><span class="p">,</span> <span class="s">&quot;often&quot;</span><span class="p">,</span> <span class="s">&quot;simply&quot;</span><span class="p">,</span> <span class="s">&quot;stuck&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;win&quot;</span><span class="p">,</span> <span class="s">&quot;allow&quot;</span><span class="p">,</span> <span class="s">&quot;confuse&quot;</span><span class="p">,</span> <span class="s">&quot;enjoy&quot;</span><span class="p">,</span> <span class="s">&quot;except&quot;</span><span class="p">,</span> <span class="s">&quot;flower&quot;</span><span class="p">,</span> <span class="s">&quot;seek&quot;</span><span class="p">,</span> <span class="s">&quot;strength&quot;</span><span class="p">,</span> <span class="s">&quot;calm&quot;</span><span class="p">,</span> <span class="s">&quot;grin&quot;</span><span class="p">,</span> <span class="s">&quot;gun&quot;</span><span class="p">,</span> <span class="s">&quot;heavy&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;hill&quot;</span><span class="p">,</span> <span class="s">&quot;large&quot;</span><span class="p">,</span> <span class="s">&quot;ocean&quot;</span><span class="p">,</span> <span class="s">&quot;shoe&quot;</span><span class="p">,</span> <span class="s">&quot;sigh&quot;</span><span class="p">,</span> <span class="s">&quot;straight&quot;</span><span class="p">,</span> <span class="s">&quot;summer&quot;</span><span class="p">,</span> <span class="s">&quot;tongue&quot;</span><span class="p">,</span> <span class="s">&quot;accept&quot;</span><span class="p">,</span> <span class="s">&quot;crazy&quot;</span><span class="p">,</span> <span class="s">&quot;everyday&quot;</span><span class="p">,</span> <span class="s">&quot;exist&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;grass&quot;</span><span class="p">,</span> <span class="s">&quot;mistake&quot;</span><span class="p">,</span> <span class="s">&quot;sent&quot;</span><span class="p">,</span> <span class="s">&quot;shut&quot;</span><span class="p">,</span> <span class="s">&quot;surround&quot;</span><span class="p">,</span> <span class="s">&quot;table&quot;</span><span class="p">,</span> <span class="s">&quot;ache&quot;</span><span class="p">,</span> <span class="s">&quot;brain&quot;</span><span class="p">,</span> <span class="s">&quot;destroy&quot;</span><span class="p">,</span> <span class="s">&quot;heal&quot;</span><span class="p">,</span> <span class="s">&quot;nature&quot;</span><span class="p">,</span> <span class="s">&quot;shout&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;sign&quot;</span><span class="p">,</span> <span class="s">&quot;stain&quot;</span><span class="p">,</span> <span class="s">&quot;choice&quot;</span><span class="p">,</span> <span class="s">&quot;doubt&quot;</span><span class="p">,</span> <span class="s">&quot;glance&quot;</span><span class="p">,</span> <span class="s">&quot;glow&quot;</span><span class="p">,</span> <span class="s">&quot;mountain&quot;</span><span class="p">,</span> <span class="s">&quot;queen&quot;</span><span class="p">,</span> <span class="s">&quot;stranger&quot;</span><span class="p">,</span> <span class="s">&quot;throat&quot;</span><span class="p">,</span> <span class="s">&quot;tomorrow&quot;</span><span class="p">,</span> <span class="s">&quot;city&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;either&quot;</span><span class="p">,</span> <span class="s">&quot;fish&quot;</span><span class="p">,</span> <span class="s">&quot;flame&quot;</span><span class="p">,</span> <span class="s">&quot;rather&quot;</span><span class="p">,</span> <span class="s">&quot;shape&quot;</span><span class="p">,</span> <span class="s">&quot;spin&quot;</span><span class="p">,</span> <span class="s">&quot;spread&quot;</span><span class="p">,</span> <span class="s">&quot;ash&quot;</span><span class="p">,</span> <span class="s">&quot;distance&quot;</span><span class="p">,</span> <span class="s">&quot;finish&quot;</span><span class="p">,</span> <span class="s">&quot;image&quot;</span><span class="p">,</span> <span class="s">&quot;imagine&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;important&quot;</span><span class="p">,</span> <span class="s">&quot;nobody&quot;</span><span class="p">,</span> <span class="s">&quot;shatter&quot;</span><span class="p">,</span> <span class="s">&quot;warmth&quot;</span><span class="p">,</span> <span class="s">&quot;became&quot;</span><span class="p">,</span> <span class="s">&quot;feed&quot;</span><span class="p">,</span> <span class="s">&quot;flesh&quot;</span><span class="p">,</span> <span class="s">&quot;funny&quot;</span><span class="p">,</span> <span class="s">&quot;lust&quot;</span><span class="p">,</span> <span class="s">&quot;shirt&quot;</span><span class="p">,</span> <span class="s">&quot;trouble&quot;</span><span class="p">,</span> <span class="s">&quot;yellow&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;attention&quot;</span><span class="p">,</span> <span class="s">&quot;bare&quot;</span><span class="p">,</span> <span class="s">&quot;bite&quot;</span><span class="p">,</span> <span class="s">&quot;money&quot;</span><span class="p">,</span> <span class="s">&quot;protect&quot;</span><span class="p">,</span> <span class="s">&quot;amaze&quot;</span><span class="p">,</span> <span class="s">&quot;appear&quot;</span><span class="p">,</span> <span class="s">&quot;born&quot;</span><span class="p">,</span> <span class="s">&quot;choke&quot;</span><span class="p">,</span> <span class="s">&quot;completely&quot;</span><span class="p">,</span> <span class="s">&quot;daughter&quot;</span><span class="p">,</span> <span class="s">&quot;fresh&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;friendship&quot;</span><span class="p">,</span> <span class="s">&quot;gentle&quot;</span><span class="p">,</span> <span class="s">&quot;probably&quot;</span><span class="p">,</span> <span class="s">&quot;six&quot;</span><span class="p">,</span> <span class="s">&quot;deserve&quot;</span><span class="p">,</span> <span class="s">&quot;expect&quot;</span><span class="p">,</span> <span class="s">&quot;grab&quot;</span><span class="p">,</span> <span class="s">&quot;middle&quot;</span><span class="p">,</span> <span class="s">&quot;nightmare&quot;</span><span class="p">,</span> <span class="s">&quot;river&quot;</span><span class="p">,</span> <span class="s">&quot;thousand&quot;</span><span class="p">,</span> <span class="s">&quot;weight&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;worst&quot;</span><span class="p">,</span> <span class="s">&quot;wound&quot;</span><span class="p">,</span> <span class="s">&quot;barely&quot;</span><span class="p">,</span> <span class="s">&quot;bottle&quot;</span><span class="p">,</span> <span class="s">&quot;cream&quot;</span><span class="p">,</span> <span class="s">&quot;regret&quot;</span><span class="p">,</span> <span class="s">&quot;relationship&quot;</span><span class="p">,</span> <span class="s">&quot;stick&quot;</span><span class="p">,</span> <span class="s">&quot;test&quot;</span><span class="p">,</span> <span class="s">&quot;crush&quot;</span><span class="p">,</span> <span class="s">&quot;endless&quot;</span><span class="p">,</span> <span class="s">&quot;fault&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;itself&quot;</span><span class="p">,</span> <span class="s">&quot;rule&quot;</span><span class="p">,</span> <span class="s">&quot;spill&quot;</span><span class="p">,</span> <span class="s">&quot;art&quot;</span><span class="p">,</span> <span class="s">&quot;circle&quot;</span><span class="p">,</span> <span class="s">&quot;join&quot;</span><span class="p">,</span> <span class="s">&quot;kick&quot;</span><span class="p">,</span> <span class="s">&quot;mask&quot;</span><span class="p">,</span> <span class="s">&quot;master&quot;</span><span class="p">,</span> <span class="s">&quot;passion&quot;</span><span class="p">,</span> <span class="s">&quot;quick&quot;</span><span class="p">,</span> <span class="s">&quot;raise&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;smooth&quot;</span><span class="p">,</span> <span class="s">&quot;unless&quot;</span><span class="p">,</span> <span class="s">&quot;wander&quot;</span><span class="p">,</span> <span class="s">&quot;actually&quot;</span><span class="p">,</span> <span class="s">&quot;broke&quot;</span><span class="p">,</span> <span class="s">&quot;chair&quot;</span><span class="p">,</span> <span class="s">&quot;deal&quot;</span><span class="p">,</span> <span class="s">&quot;favorite&quot;</span><span class="p">,</span> <span class="s">&quot;gift&quot;</span><span class="p">,</span> <span class="s">&quot;note&quot;</span><span class="p">,</span> <span class="s">&quot;number&quot;</span><span class="p">,</span> <span class="s">&quot;sweat&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;box&quot;</span><span class="p">,</span> <span class="s">&quot;chill&quot;</span><span class="p">,</span> <span class="s">&quot;clothes&quot;</span><span class="p">,</span> <span class="s">&quot;lady&quot;</span><span class="p">,</span> <span class="s">&quot;mark&quot;</span><span class="p">,</span> <span class="s">&quot;park&quot;</span><span class="p">,</span> <span class="s">&quot;poor&quot;</span><span class="p">,</span> <span class="s">&quot;sadness&quot;</span><span class="p">,</span> <span class="s">&quot;tie&quot;</span><span class="p">,</span> <span class="s">&quot;animal&quot;</span><span class="p">,</span> <span class="s">&quot;belong&quot;</span><span class="p">,</span> <span class="s">&quot;brush&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;consume&quot;</span><span class="p">,</span> <span class="s">&quot;dawn&quot;</span><span class="p">,</span> <span class="s">&quot;forest&quot;</span><span class="p">,</span> <span class="s">&quot;innocent&quot;</span><span class="p">,</span> <span class="s">&quot;pen&quot;</span><span class="p">,</span> <span class="s">&quot;pride&quot;</span><span class="p">,</span> <span class="s">&quot;stream&quot;</span><span class="p">,</span> <span class="s">&quot;thick&quot;</span><span class="p">,</span> <span class="s">&quot;clay&quot;</span><span class="p">,</span> <span class="s">&quot;complete&quot;</span><span class="p">,</span> <span class="s">&quot;count&quot;</span><span class="p">,</span> <span class="s">&quot;draw&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;faith&quot;</span><span class="p">,</span> <span class="s">&quot;press&quot;</span><span class="p">,</span> <span class="s">&quot;silver&quot;</span><span class="p">,</span> <span class="s">&quot;struggle&quot;</span><span class="p">,</span> <span class="s">&quot;surface&quot;</span><span class="p">,</span> <span class="s">&quot;taught&quot;</span><span class="p">,</span> <span class="s">&quot;teach&quot;</span><span class="p">,</span> <span class="s">&quot;wet&quot;</span><span class="p">,</span> <span class="s">&quot;bless&quot;</span><span class="p">,</span> <span class="s">&quot;chase&quot;</span><span class="p">,</span> <span class="s">&quot;climb&quot;</span><span class="p">,</span> <span class="s">&quot;enter&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;letter&quot;</span><span class="p">,</span> <span class="s">&quot;melt&quot;</span><span class="p">,</span> <span class="s">&quot;metal&quot;</span><span class="p">,</span> <span class="s">&quot;movie&quot;</span><span class="p">,</span> <span class="s">&quot;stretch&quot;</span><span class="p">,</span> <span class="s">&quot;swing&quot;</span><span class="p">,</span> <span class="s">&quot;vision&quot;</span><span class="p">,</span> <span class="s">&quot;wife&quot;</span><span class="p">,</span> <span class="s">&quot;beside&quot;</span><span class="p">,</span> <span class="s">&quot;crash&quot;</span><span class="p">,</span> <span class="s">&quot;forgot&quot;</span><span class="p">,</span> <span class="s">&quot;guide&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;haunt&quot;</span><span class="p">,</span> <span class="s">&quot;joke&quot;</span><span class="p">,</span> <span class="s">&quot;knock&quot;</span><span class="p">,</span> <span class="s">&quot;plant&quot;</span><span class="p">,</span> <span class="s">&quot;pour&quot;</span><span class="p">,</span> <span class="s">&quot;prove&quot;</span><span class="p">,</span> <span class="s">&quot;reveal&quot;</span><span class="p">,</span> <span class="s">&quot;steal&quot;</span><span class="p">,</span> <span class="s">&quot;stuff&quot;</span><span class="p">,</span> <span class="s">&quot;trip&quot;</span><span class="p">,</span> <span class="s">&quot;wood&quot;</span><span class="p">,</span> <span class="s">&quot;wrist&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;bother&quot;</span><span class="p">,</span> <span class="s">&quot;bottom&quot;</span><span class="p">,</span> <span class="s">&quot;crawl&quot;</span><span class="p">,</span> <span class="s">&quot;crowd&quot;</span><span class="p">,</span> <span class="s">&quot;fix&quot;</span><span class="p">,</span> <span class="s">&quot;forgive&quot;</span><span class="p">,</span> <span class="s">&quot;frown&quot;</span><span class="p">,</span> <span class="s">&quot;grace&quot;</span><span class="p">,</span> <span class="s">&quot;loose&quot;</span><span class="p">,</span> <span class="s">&quot;lucky&quot;</span><span class="p">,</span> <span class="s">&quot;party&quot;</span><span class="p">,</span> <span class="s">&quot;release&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;surely&quot;</span><span class="p">,</span> <span class="s">&quot;survive&quot;</span><span class="p">,</span> <span class="s">&quot;teacher&quot;</span><span class="p">,</span> <span class="s">&quot;gently&quot;</span><span class="p">,</span> <span class="s">&quot;grip&quot;</span><span class="p">,</span> <span class="s">&quot;speed&quot;</span><span class="p">,</span> <span class="s">&quot;suicide&quot;</span><span class="p">,</span> <span class="s">&quot;travel&quot;</span><span class="p">,</span> <span class="s">&quot;treat&quot;</span><span class="p">,</span> <span class="s">&quot;vein&quot;</span><span class="p">,</span> <span class="s">&quot;written&quot;</span><span class="p">,</span> <span class="s">&quot;cage&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;chain&quot;</span><span class="p">,</span> <span class="s">&quot;conversation&quot;</span><span class="p">,</span> <span class="s">&quot;date&quot;</span><span class="p">,</span> <span class="s">&quot;enemy&quot;</span><span class="p">,</span> <span class="s">&quot;however&quot;</span><span class="p">,</span> <span class="s">&quot;interest&quot;</span><span class="p">,</span> <span class="s">&quot;million&quot;</span><span class="p">,</span> <span class="s">&quot;page&quot;</span><span class="p">,</span> <span class="s">&quot;pink&quot;</span><span class="p">,</span> <span class="s">&quot;proud&quot;</span><span class="p">,</span> <span class="s">&quot;sway&quot;</span><span class="p">,</span> <span class="s">&quot;themselves&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;winter&quot;</span><span class="p">,</span> <span class="s">&quot;church&quot;</span><span class="p">,</span> <span class="s">&quot;cruel&quot;</span><span class="p">,</span> <span class="s">&quot;cup&quot;</span><span class="p">,</span> <span class="s">&quot;demon&quot;</span><span class="p">,</span> <span class="s">&quot;experience&quot;</span><span class="p">,</span> <span class="s">&quot;freedom&quot;</span><span class="p">,</span> <span class="s">&quot;pair&quot;</span><span class="p">,</span> <span class="s">&quot;pop&quot;</span><span class="p">,</span> <span class="s">&quot;purpose&quot;</span><span class="p">,</span> <span class="s">&quot;respect&quot;</span><span class="p">,</span> <span class="s">&quot;shoot&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;softly&quot;</span><span class="p">,</span> <span class="s">&quot;state&quot;</span><span class="p">,</span> <span class="s">&quot;strange&quot;</span><span class="p">,</span> <span class="s">&quot;bar&quot;</span><span class="p">,</span> <span class="s">&quot;birth&quot;</span><span class="p">,</span> <span class="s">&quot;curl&quot;</span><span class="p">,</span> <span class="s">&quot;dirt&quot;</span><span class="p">,</span> <span class="s">&quot;excuse&quot;</span><span class="p">,</span> <span class="s">&quot;lord&quot;</span><span class="p">,</span> <span class="s">&quot;lovely&quot;</span><span class="p">,</span> <span class="s">&quot;monster&quot;</span><span class="p">,</span> <span class="s">&quot;order&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;pack&quot;</span><span class="p">,</span> <span class="s">&quot;pants&quot;</span><span class="p">,</span> <span class="s">&quot;pool&quot;</span><span class="p">,</span> <span class="s">&quot;scene&quot;</span><span class="p">,</span> <span class="s">&quot;seven&quot;</span><span class="p">,</span> <span class="s">&quot;shame&quot;</span><span class="p">,</span> <span class="s">&quot;slide&quot;</span><span class="p">,</span> <span class="s">&quot;ugly&quot;</span><span class="p">,</span> <span class="s">&quot;among&quot;</span><span class="p">,</span> <span class="s">&quot;blade&quot;</span><span class="p">,</span> <span class="s">&quot;blonde&quot;</span><span class="p">,</span> <span class="s">&quot;closet&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;creek&quot;</span><span class="p">,</span> <span class="s">&quot;deny&quot;</span><span class="p">,</span> <span class="s">&quot;drug&quot;</span><span class="p">,</span> <span class="s">&quot;eternity&quot;</span><span class="p">,</span> <span class="s">&quot;gain&quot;</span><span class="p">,</span> <span class="s">&quot;grade&quot;</span><span class="p">,</span> <span class="s">&quot;handle&quot;</span><span class="p">,</span> <span class="s">&quot;key&quot;</span><span class="p">,</span> <span class="s">&quot;linger&quot;</span><span class="p">,</span> <span class="s">&quot;pale&quot;</span><span class="p">,</span> <span class="s">&quot;prepare&quot;</span><span class="p">,</span> <span class="s">&quot;swallow&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;swim&quot;</span><span class="p">,</span> <span class="s">&quot;tremble&quot;</span><span class="p">,</span> <span class="s">&quot;wheel&quot;</span><span class="p">,</span> <span class="s">&quot;won&quot;</span><span class="p">,</span> <span class="s">&quot;cast&quot;</span><span class="p">,</span> <span class="s">&quot;cigarette&quot;</span><span class="p">,</span> <span class="s">&quot;claim&quot;</span><span class="p">,</span> <span class="s">&quot;college&quot;</span><span class="p">,</span> <span class="s">&quot;direction&quot;</span><span class="p">,</span> <span class="s">&quot;dirty&quot;</span><span class="p">,</span> <span class="s">&quot;gather&quot;</span><span class="p">,</span> <span class="s">&quot;ghost&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;hundred&quot;</span><span class="p">,</span> <span class="s">&quot;loss&quot;</span><span class="p">,</span> <span class="s">&quot;lung&quot;</span><span class="p">,</span> <span class="s">&quot;orange&quot;</span><span class="p">,</span> <span class="s">&quot;present&quot;</span><span class="p">,</span> <span class="s">&quot;swear&quot;</span><span class="p">,</span> <span class="s">&quot;swirl&quot;</span><span class="p">,</span> <span class="s">&quot;twice&quot;</span><span class="p">,</span> <span class="s">&quot;wild&quot;</span><span class="p">,</span> <span class="s">&quot;bitter&quot;</span><span class="p">,</span> <span class="s">&quot;blanket&quot;</span><span class="p">,</span> <span class="s">&quot;doctor&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;everywhere&quot;</span><span class="p">,</span> <span class="s">&quot;flash&quot;</span><span class="p">,</span> <span class="s">&quot;grown&quot;</span><span class="p">,</span> <span class="s">&quot;knowledge&quot;</span><span class="p">,</span> <span class="s">&quot;numb&quot;</span><span class="p">,</span> <span class="s">&quot;pressure&quot;</span><span class="p">,</span> <span class="s">&quot;radio&quot;</span><span class="p">,</span> <span class="s">&quot;repeat&quot;</span><span class="p">,</span> <span class="s">&quot;ruin&quot;</span><span class="p">,</span> <span class="s">&quot;spend&quot;</span><span class="p">,</span> <span class="s">&quot;unknown&quot;</span><span class="p">,</span> <span class="s">&quot;buy&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;clock&quot;</span><span class="p">,</span> <span class="s">&quot;devil&quot;</span><span class="p">,</span> <span class="s">&quot;early&quot;</span><span class="p">,</span> <span class="s">&quot;false&quot;</span><span class="p">,</span> <span class="s">&quot;fantasy&quot;</span><span class="p">,</span> <span class="s">&quot;pound&quot;</span><span class="p">,</span> <span class="s">&quot;precious&quot;</span><span class="p">,</span> <span class="s">&quot;refuse&quot;</span><span class="p">,</span> <span class="s">&quot;sheet&quot;</span><span class="p">,</span> <span class="s">&quot;teeth&quot;</span><span class="p">,</span> <span class="s">&quot;welcome&quot;</span><span class="p">,</span> <span class="s">&quot;add&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;ahead&quot;</span><span class="p">,</span> <span class="s">&quot;block&quot;</span><span class="p">,</span> <span class="s">&quot;bury&quot;</span><span class="p">,</span> <span class="s">&quot;caress&quot;</span><span class="p">,</span> <span class="s">&quot;content&quot;</span><span class="p">,</span> <span class="s">&quot;depth&quot;</span><span class="p">,</span> <span class="s">&quot;despite&quot;</span><span class="p">,</span> <span class="s">&quot;distant&quot;</span><span class="p">,</span> <span class="s">&quot;marry&quot;</span><span class="p">,</span> <span class="s">&quot;purple&quot;</span><span class="p">,</span> <span class="s">&quot;threw&quot;</span><span class="p">,</span> <span class="s">&quot;whenever&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;bomb&quot;</span><span class="p">,</span> <span class="s">&quot;dull&quot;</span><span class="p">,</span> <span class="s">&quot;easily&quot;</span><span class="p">,</span> <span class="s">&quot;grasp&quot;</span><span class="p">,</span> <span class="s">&quot;hospital&quot;</span><span class="p">,</span> <span class="s">&quot;innocence&quot;</span><span class="p">,</span> <span class="s">&quot;normal&quot;</span><span class="p">,</span> <span class="s">&quot;receive&quot;</span><span class="p">,</span> <span class="s">&quot;reply&quot;</span><span class="p">,</span> <span class="s">&quot;rhyme&quot;</span><span class="p">,</span> <span class="s">&quot;shade&quot;</span><span class="p">,</span> <span class="s">&quot;someday&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;sword&quot;</span><span class="p">,</span> <span class="s">&quot;toe&quot;</span><span class="p">,</span> <span class="s">&quot;visit&quot;</span><span class="p">,</span> <span class="s">&quot;asleep&quot;</span><span class="p">,</span> <span class="s">&quot;bought&quot;</span><span class="p">,</span> <span class="s">&quot;center&quot;</span><span class="p">,</span> <span class="s">&quot;consider&quot;</span><span class="p">,</span> <span class="s">&quot;flat&quot;</span><span class="p">,</span> <span class="s">&quot;hero&quot;</span><span class="p">,</span> <span class="s">&quot;history&quot;</span><span class="p">,</span> <span class="s">&quot;ink&quot;</span><span class="p">,</span> <span class="s">&quot;insane&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;muscle&quot;</span><span class="p">,</span> <span class="s">&quot;mystery&quot;</span><span class="p">,</span> <span class="s">&quot;pocket&quot;</span><span class="p">,</span> <span class="s">&quot;reflection&quot;</span><span class="p">,</span> <span class="s">&quot;shove&quot;</span><span class="p">,</span> <span class="s">&quot;silently&quot;</span><span class="p">,</span> <span class="s">&quot;smart&quot;</span><span class="p">,</span> <span class="s">&quot;soldier&quot;</span><span class="p">,</span> <span class="s">&quot;spot&quot;</span><span class="p">,</span> <span class="s">&quot;stress&quot;</span><span class="p">,</span> <span class="s">&quot;train&quot;</span><span class="p">,</span> <span class="s">&quot;type&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;view&quot;</span><span class="p">,</span> <span class="s">&quot;whether&quot;</span><span class="p">,</span> <span class="s">&quot;bus&quot;</span><span class="p">,</span> <span class="s">&quot;energy&quot;</span><span class="p">,</span> <span class="s">&quot;explain&quot;</span><span class="p">,</span> <span class="s">&quot;holy&quot;</span><span class="p">,</span> <span class="s">&quot;hunger&quot;</span><span class="p">,</span> <span class="s">&quot;inch&quot;</span><span class="p">,</span> <span class="s">&quot;magic&quot;</span><span class="p">,</span> <span class="s">&quot;mix&quot;</span><span class="p">,</span> <span class="s">&quot;noise&quot;</span><span class="p">,</span> <span class="s">&quot;nowhere&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;prayer&quot;</span><span class="p">,</span> <span class="s">&quot;presence&quot;</span><span class="p">,</span> <span class="s">&quot;shock&quot;</span><span class="p">,</span> <span class="s">&quot;snap&quot;</span><span class="p">,</span> <span class="s">&quot;spider&quot;</span><span class="p">,</span> <span class="s">&quot;study&quot;</span><span class="p">,</span> <span class="s">&quot;thunder&quot;</span><span class="p">,</span> <span class="s">&quot;trail&quot;</span><span class="p">,</span> <span class="s">&quot;admit&quot;</span><span class="p">,</span> <span class="s">&quot;agree&quot;</span><span class="p">,</span> <span class="s">&quot;bag&quot;</span><span class="p">,</span> <span class="s">&quot;bang&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;bound&quot;</span><span class="p">,</span> <span class="s">&quot;butterfly&quot;</span><span class="p">,</span> <span class="s">&quot;cute&quot;</span><span class="p">,</span> <span class="s">&quot;exactly&quot;</span><span class="p">,</span> <span class="s">&quot;explode&quot;</span><span class="p">,</span> <span class="s">&quot;familiar&quot;</span><span class="p">,</span> <span class="s">&quot;fold&quot;</span><span class="p">,</span> <span class="s">&quot;further&quot;</span><span class="p">,</span> <span class="s">&quot;pierce&quot;</span><span class="p">,</span> <span class="s">&quot;reflect&quot;</span><span class="p">,</span> <span class="s">&quot;scent&quot;</span><span class="p">,</span> <span class="s">&quot;selfish&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;sharp&quot;</span><span class="p">,</span> <span class="s">&quot;sink&quot;</span><span class="p">,</span> <span class="s">&quot;spring&quot;</span><span class="p">,</span> <span class="s">&quot;stumble&quot;</span><span class="p">,</span> <span class="s">&quot;universe&quot;</span><span class="p">,</span> <span class="s">&quot;weep&quot;</span><span class="p">,</span> <span class="s">&quot;women&quot;</span><span class="p">,</span> <span class="s">&quot;wonderful&quot;</span><span class="p">,</span> <span class="s">&quot;action&quot;</span><span class="p">,</span> <span class="s">&quot;ancient&quot;</span><span class="p">,</span> <span class="s">&quot;attempt&quot;</span><span class="p">,</span> <span class="s">&quot;avoid&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;birthday&quot;</span><span class="p">,</span> <span class="s">&quot;branch&quot;</span><span class="p">,</span> <span class="s">&quot;chocolate&quot;</span><span class="p">,</span> <span class="s">&quot;core&quot;</span><span class="p">,</span> <span class="s">&quot;depress&quot;</span><span class="p">,</span> <span class="s">&quot;drunk&quot;</span><span class="p">,</span> <span class="s">&quot;especially&quot;</span><span class="p">,</span> <span class="s">&quot;focus&quot;</span><span class="p">,</span> <span class="s">&quot;fruit&quot;</span><span class="p">,</span> <span class="s">&quot;honest&quot;</span><span class="p">,</span> <span class="s">&quot;match&quot;</span><span class="p">,</span> <span class="s">&quot;palm&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;perfectly&quot;</span><span class="p">,</span> <span class="s">&quot;pillow&quot;</span><span class="p">,</span> <span class="s">&quot;pity&quot;</span><span class="p">,</span> <span class="s">&quot;poison&quot;</span><span class="p">,</span> <span class="s">&quot;roar&quot;</span><span class="p">,</span> <span class="s">&quot;shift&quot;</span><span class="p">,</span> <span class="s">&quot;slightly&quot;</span><span class="p">,</span> <span class="s">&quot;thump&quot;</span><span class="p">,</span> <span class="s">&quot;truck&quot;</span><span class="p">,</span> <span class="s">&quot;tune&quot;</span><span class="p">,</span> <span class="s">&quot;twenty&quot;</span><span class="p">,</span> <span class="s">&quot;unable&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;wipe&quot;</span><span class="p">,</span> <span class="s">&quot;wrote&quot;</span><span class="p">,</span> <span class="s">&quot;coat&quot;</span><span class="p">,</span> <span class="s">&quot;constant&quot;</span><span class="p">,</span> <span class="s">&quot;dinner&quot;</span><span class="p">,</span> <span class="s">&quot;drove&quot;</span><span class="p">,</span> <span class="s">&quot;egg&quot;</span><span class="p">,</span> <span class="s">&quot;eternal&quot;</span><span class="p">,</span> <span class="s">&quot;flight&quot;</span><span class="p">,</span> <span class="s">&quot;flood&quot;</span><span class="p">,</span> <span class="s">&quot;frame&quot;</span><span class="p">,</span> <span class="s">&quot;freak&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;gasp&quot;</span><span class="p">,</span> <span class="s">&quot;glad&quot;</span><span class="p">,</span> <span class="s">&quot;hollow&quot;</span><span class="p">,</span> <span class="s">&quot;motion&quot;</span><span class="p">,</span> <span class="s">&quot;peer&quot;</span><span class="p">,</span> <span class="s">&quot;plastic&quot;</span><span class="p">,</span> <span class="s">&quot;root&quot;</span><span class="p">,</span> <span class="s">&quot;screen&quot;</span><span class="p">,</span> <span class="s">&quot;season&quot;</span><span class="p">,</span> <span class="s">&quot;sting&quot;</span><span class="p">,</span> <span class="s">&quot;strike&quot;</span><span class="p">,</span> <span class="s">&quot;team&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;unlike&quot;</span><span class="p">,</span> <span class="s">&quot;victim&quot;</span><span class="p">,</span> <span class="s">&quot;volume&quot;</span><span class="p">,</span> <span class="s">&quot;warn&quot;</span><span class="p">,</span> <span class="s">&quot;weird&quot;</span><span class="p">,</span> <span class="s">&quot;attack&quot;</span><span class="p">,</span> <span class="s">&quot;await&quot;</span><span class="p">,</span> <span class="s">&quot;awake&quot;</span><span class="p">,</span> <span class="s">&quot;built&quot;</span><span class="p">,</span> <span class="s">&quot;charm&quot;</span><span class="p">,</span> <span class="s">&quot;crave&quot;</span><span class="p">,</span> <span class="s">&quot;despair&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;fought&quot;</span><span class="p">,</span> <span class="s">&quot;grant&quot;</span><span class="p">,</span> <span class="s">&quot;grief&quot;</span><span class="p">,</span> <span class="s">&quot;horse&quot;</span><span class="p">,</span> <span class="s">&quot;limit&quot;</span><span class="p">,</span> <span class="s">&quot;message&quot;</span><span class="p">,</span> <span class="s">&quot;ripple&quot;</span><span class="p">,</span> <span class="s">&quot;sanity&quot;</span><span class="p">,</span> <span class="s">&quot;scatter&quot;</span><span class="p">,</span> <span class="s">&quot;serve&quot;</span><span class="p">,</span> <span class="s">&quot;split&quot;</span><span class="p">,</span> <span class="s">&quot;string&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;trick&quot;</span><span class="p">,</span> <span class="s">&quot;annoy&quot;</span><span class="p">,</span> <span class="s">&quot;blur&quot;</span><span class="p">,</span> <span class="s">&quot;boat&quot;</span><span class="p">,</span> <span class="s">&quot;brave&quot;</span><span class="p">,</span> <span class="s">&quot;clearly&quot;</span><span class="p">,</span> <span class="s">&quot;cling&quot;</span><span class="p">,</span> <span class="s">&quot;connect&quot;</span><span class="p">,</span> <span class="s">&quot;fist&quot;</span><span class="p">,</span> <span class="s">&quot;forth&quot;</span><span class="p">,</span> <span class="s">&quot;imagination&quot;</span><span class="p">,</span> <span class="s">&quot;iron&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;jock&quot;</span><span class="p">,</span> <span class="s">&quot;judge&quot;</span><span class="p">,</span> <span class="s">&quot;lesson&quot;</span><span class="p">,</span> <span class="s">&quot;milk&quot;</span><span class="p">,</span> <span class="s">&quot;misery&quot;</span><span class="p">,</span> <span class="s">&quot;nail&quot;</span><span class="p">,</span> <span class="s">&quot;naked&quot;</span><span class="p">,</span> <span class="s">&quot;ourselves&quot;</span><span class="p">,</span> <span class="s">&quot;poet&quot;</span><span class="p">,</span> <span class="s">&quot;possible&quot;</span><span class="p">,</span> <span class="s">&quot;princess&quot;</span><span class="p">,</span> <span class="s">&quot;sail&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;size&quot;</span><span class="p">,</span> <span class="s">&quot;snake&quot;</span><span class="p">,</span> <span class="s">&quot;society&quot;</span><span class="p">,</span> <span class="s">&quot;stroke&quot;</span><span class="p">,</span> <span class="s">&quot;torture&quot;</span><span class="p">,</span> <span class="s">&quot;toss&quot;</span><span class="p">,</span> <span class="s">&quot;trace&quot;</span><span class="p">,</span> <span class="s">&quot;wise&quot;</span><span class="p">,</span> <span class="s">&quot;bloom&quot;</span><span class="p">,</span> <span class="s">&quot;bullet&quot;</span><span class="p">,</span> <span class="s">&quot;cell&quot;</span><span class="p">,</span> <span class="s">&quot;check&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;cost&quot;</span><span class="p">,</span> <span class="s">&quot;darling&quot;</span><span class="p">,</span> <span class="s">&quot;during&quot;</span><span class="p">,</span> <span class="s">&quot;footstep&quot;</span><span class="p">,</span> <span class="s">&quot;fragile&quot;</span><span class="p">,</span> <span class="s">&quot;hallway&quot;</span><span class="p">,</span> <span class="s">&quot;hardly&quot;</span><span class="p">,</span> <span class="s">&quot;horizon&quot;</span><span class="p">,</span> <span class="s">&quot;invisible&quot;</span><span class="p">,</span> <span class="s">&quot;journey&quot;</span><span class="p">,</span> <span class="s">&quot;midnight&quot;</span><span class="p">,</span> <span class="s">&quot;mud&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;nod&quot;</span><span class="p">,</span> <span class="s">&quot;pause&quot;</span><span class="p">,</span> <span class="s">&quot;relax&quot;</span><span class="p">,</span> <span class="s">&quot;shiver&quot;</span><span class="p">,</span> <span class="s">&quot;sudden&quot;</span><span class="p">,</span> <span class="s">&quot;value&quot;</span><span class="p">,</span> <span class="s">&quot;youth&quot;</span><span class="p">,</span> <span class="s">&quot;abuse&quot;</span><span class="p">,</span> <span class="s">&quot;admire&quot;</span><span class="p">,</span> <span class="s">&quot;blink&quot;</span><span class="p">,</span> <span class="s">&quot;breast&quot;</span><span class="p">,</span> <span class="s">&quot;bruise&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;constantly&quot;</span><span class="p">,</span> <span class="s">&quot;couple&quot;</span><span class="p">,</span> <span class="s">&quot;creep&quot;</span><span class="p">,</span> <span class="s">&quot;curve&quot;</span><span class="p">,</span> <span class="s">&quot;difference&quot;</span><span class="p">,</span> <span class="s">&quot;dumb&quot;</span><span class="p">,</span> <span class="s">&quot;emptiness&quot;</span><span class="p">,</span> <span class="s">&quot;gotta&quot;</span><span class="p">,</span> <span class="s">&quot;honor&quot;</span><span class="p">,</span> <span class="s">&quot;plain&quot;</span><span class="p">,</span> <span class="s">&quot;planet&quot;</span><span class="p">,</span> <span class="s">&quot;recall&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;rub&quot;</span><span class="p">,</span> <span class="s">&quot;ship&quot;</span><span class="p">,</span> <span class="s">&quot;slam&quot;</span><span class="p">,</span> <span class="s">&quot;soar&quot;</span><span class="p">,</span> <span class="s">&quot;somebody&quot;</span><span class="p">,</span> <span class="s">&quot;tightly&quot;</span><span class="p">,</span> <span class="s">&quot;weather&quot;</span><span class="p">,</span> <span class="s">&quot;adore&quot;</span><span class="p">,</span> <span class="s">&quot;approach&quot;</span><span class="p">,</span> <span class="s">&quot;bond&quot;</span><span class="p">,</span> <span class="s">&quot;bread&quot;</span><span class="p">,</span> <span class="s">&quot;burst&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;candle&quot;</span><span class="p">,</span> <span class="s">&quot;coffee&quot;</span><span class="p">,</span> <span class="s">&quot;cousin&quot;</span><span class="p">,</span> <span class="s">&quot;crime&quot;</span><span class="p">,</span> <span class="s">&quot;desert&quot;</span><span class="p">,</span> <span class="s">&quot;flutter&quot;</span><span class="p">,</span> <span class="s">&quot;frozen&quot;</span><span class="p">,</span> <span class="s">&quot;grand&quot;</span><span class="p">,</span> <span class="s">&quot;heel&quot;</span><span class="p">,</span> <span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="s">&quot;language&quot;</span><span class="p">,</span> <span class="s">&quot;level&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;movement&quot;</span><span class="p">,</span> <span class="s">&quot;pleasure&quot;</span><span class="p">,</span> <span class="s">&quot;powerful&quot;</span><span class="p">,</span> <span class="s">&quot;random&quot;</span><span class="p">,</span> <span class="s">&quot;rhythm&quot;</span><span class="p">,</span> <span class="s">&quot;settle&quot;</span><span class="p">,</span> <span class="s">&quot;silly&quot;</span><span class="p">,</span> <span class="s">&quot;slap&quot;</span><span class="p">,</span> <span class="s">&quot;sort&quot;</span><span class="p">,</span> <span class="s">&quot;spoken&quot;</span><span class="p">,</span> <span class="s">&quot;steel&quot;</span><span class="p">,</span> <span class="s">&quot;threaten&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;tumble&quot;</span><span class="p">,</span> <span class="s">&quot;upset&quot;</span><span class="p">,</span> <span class="s">&quot;aside&quot;</span><span class="p">,</span> <span class="s">&quot;awkward&quot;</span><span class="p">,</span> <span class="s">&quot;bee&quot;</span><span class="p">,</span> <span class="s">&quot;blank&quot;</span><span class="p">,</span> <span class="s">&quot;board&quot;</span><span class="p">,</span> <span class="s">&quot;button&quot;</span><span class="p">,</span> <span class="s">&quot;card&quot;</span><span class="p">,</span> <span class="s">&quot;carefully&quot;</span><span class="p">,</span> <span class="s">&quot;complain&quot;</span><span class="p">,</span> <span class="s">&quot;crap&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;deeply&quot;</span><span class="p">,</span> <span class="s">&quot;discover&quot;</span><span class="p">,</span> <span class="s">&quot;drag&quot;</span><span class="p">,</span> <span class="s">&quot;dread&quot;</span><span class="p">,</span> <span class="s">&quot;effort&quot;</span><span class="p">,</span> <span class="s">&quot;entire&quot;</span><span class="p">,</span> <span class="s">&quot;fairy&quot;</span><span class="p">,</span> <span class="s">&quot;giant&quot;</span><span class="p">,</span> <span class="s">&quot;gotten&quot;</span><span class="p">,</span> <span class="s">&quot;greet&quot;</span><span class="p">,</span> <span class="s">&quot;illusion&quot;</span><span class="p">,</span> <span class="s">&quot;jeans&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;leap&quot;</span><span class="p">,</span> <span class="s">&quot;liquid&quot;</span><span class="p">,</span> <span class="s">&quot;march&quot;</span><span class="p">,</span> <span class="s">&quot;mend&quot;</span><span class="p">,</span> <span class="s">&quot;nervous&quot;</span><span class="p">,</span> <span class="s">&quot;nine&quot;</span><span class="p">,</span> <span class="s">&quot;replace&quot;</span><span class="p">,</span> <span class="s">&quot;rope&quot;</span><span class="p">,</span> <span class="s">&quot;spine&quot;</span><span class="p">,</span> <span class="s">&quot;stole&quot;</span><span class="p">,</span> <span class="s">&quot;terror&quot;</span><span class="p">,</span> <span class="s">&quot;accident&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;apple&quot;</span><span class="p">,</span> <span class="s">&quot;balance&quot;</span><span class="p">,</span> <span class="s">&quot;boom&quot;</span><span class="p">,</span> <span class="s">&quot;childhood&quot;</span><span class="p">,</span> <span class="s">&quot;collect&quot;</span><span class="p">,</span> <span class="s">&quot;demand&quot;</span><span class="p">,</span> <span class="s">&quot;depression&quot;</span><span class="p">,</span> <span class="s">&quot;eventually&quot;</span><span class="p">,</span> <span class="s">&quot;faint&quot;</span><span class="p">,</span> <span class="s">&quot;glare&quot;</span><span class="p">,</span> <span class="s">&quot;goal&quot;</span><span class="p">,</span> <span class="s">&quot;group&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;honey&quot;</span><span class="p">,</span> <span class="s">&quot;kitchen&quot;</span><span class="p">,</span> <span class="s">&quot;laid&quot;</span><span class="p">,</span> <span class="s">&quot;limb&quot;</span><span class="p">,</span> <span class="s">&quot;machine&quot;</span><span class="p">,</span> <span class="s">&quot;mere&quot;</span><span class="p">,</span> <span class="s">&quot;mold&quot;</span><span class="p">,</span> <span class="s">&quot;murder&quot;</span><span class="p">,</span> <span class="s">&quot;nerve&quot;</span><span class="p">,</span> <span class="s">&quot;painful&quot;</span><span class="p">,</span> <span class="s">&quot;poetry&quot;</span><span class="p">,</span> <span class="s">&quot;prince&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;rabbit&quot;</span><span class="p">,</span> <span class="s">&quot;shelter&quot;</span><span class="p">,</span> <span class="s">&quot;shore&quot;</span><span class="p">,</span> <span class="s">&quot;shower&quot;</span><span class="p">,</span> <span class="s">&quot;soothe&quot;</span><span class="p">,</span> <span class="s">&quot;stair&quot;</span><span class="p">,</span> <span class="s">&quot;steady&quot;</span><span class="p">,</span> <span class="s">&quot;sunlight&quot;</span><span class="p">,</span> <span class="s">&quot;tangle&quot;</span><span class="p">,</span> <span class="s">&quot;tease&quot;</span><span class="p">,</span> <span class="s">&quot;treasure&quot;</span><span class="p">,</span> <span class="s">&quot;uncle&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;begun&quot;</span><span class="p">,</span> <span class="s">&quot;bliss&quot;</span><span class="p">,</span> <span class="s">&quot;canvas&quot;</span><span class="p">,</span> <span class="s">&quot;cheer&quot;</span><span class="p">,</span> <span class="s">&quot;claw&quot;</span><span class="p">,</span> <span class="s">&quot;clutch&quot;</span><span class="p">,</span> <span class="s">&quot;commit&quot;</span><span class="p">,</span> <span class="s">&quot;crimson&quot;</span><span class="p">,</span> <span class="s">&quot;crystal&quot;</span><span class="p">,</span> <span class="s">&quot;delight&quot;</span><span class="p">,</span> <span class="s">&quot;doll&quot;</span><span class="p">,</span> <span class="s">&quot;existence&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;express&quot;</span><span class="p">,</span> <span class="s">&quot;fog&quot;</span><span class="p">,</span> <span class="s">&quot;football&quot;</span><span class="p">,</span> <span class="s">&quot;gay&quot;</span><span class="p">,</span> <span class="s">&quot;goose&quot;</span><span class="p">,</span> <span class="s">&quot;guard&quot;</span><span class="p">,</span> <span class="s">&quot;hatred&quot;</span><span class="p">,</span> <span class="s">&quot;illuminate&quot;</span><span class="p">,</span> <span class="s">&quot;mass&quot;</span><span class="p">,</span> <span class="s">&quot;math&quot;</span><span class="p">,</span> <span class="s">&quot;mourn&quot;</span><span class="p">,</span> <span class="s">&quot;rich&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;rough&quot;</span><span class="p">,</span> <span class="s">&quot;skip&quot;</span><span class="p">,</span> <span class="s">&quot;stir&quot;</span><span class="p">,</span> <span class="s">&quot;student&quot;</span><span class="p">,</span> <span class="s">&quot;style&quot;</span><span class="p">,</span> <span class="s">&quot;support&quot;</span><span class="p">,</span> <span class="s">&quot;thorn&quot;</span><span class="p">,</span> <span class="s">&quot;tough&quot;</span><span class="p">,</span> <span class="s">&quot;yard&quot;</span><span class="p">,</span> <span class="s">&quot;yearn&quot;</span><span class="p">,</span> <span class="s">&quot;yesterday&quot;</span><span class="p">,</span> <span class="s">&quot;advice&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;appreciate&quot;</span><span class="p">,</span> <span class="s">&quot;autumn&quot;</span><span class="p">,</span> <span class="s">&quot;bank&quot;</span><span class="p">,</span> <span class="s">&quot;beam&quot;</span><span class="p">,</span> <span class="s">&quot;bowl&quot;</span><span class="p">,</span> <span class="s">&quot;capture&quot;</span><span class="p">,</span> <span class="s">&quot;carve&quot;</span><span class="p">,</span> <span class="s">&quot;collapse&quot;</span><span class="p">,</span> <span class="s">&quot;confusion&quot;</span><span class="p">,</span> <span class="s">&quot;creation&quot;</span><span class="p">,</span> <span class="s">&quot;dove&quot;</span><span class="p">,</span> <span class="s">&quot;feather&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;girlfriend&quot;</span><span class="p">,</span> <span class="s">&quot;glory&quot;</span><span class="p">,</span> <span class="s">&quot;government&quot;</span><span class="p">,</span> <span class="s">&quot;harsh&quot;</span><span class="p">,</span> <span class="s">&quot;hop&quot;</span><span class="p">,</span> <span class="s">&quot;inner&quot;</span><span class="p">,</span> <span class="s">&quot;loser&quot;</span><span class="p">,</span> <span class="s">&quot;moonlight&quot;</span><span class="p">,</span> <span class="s">&quot;neighbor&quot;</span><span class="p">,</span> <span class="s">&quot;neither&quot;</span><span class="p">,</span> <span class="s">&quot;peach&quot;</span><span class="p">,</span> <span class="s">&quot;pig&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;praise&quot;</span><span class="p">,</span> <span class="s">&quot;screw&quot;</span><span class="p">,</span> <span class="s">&quot;shield&quot;</span><span class="p">,</span> <span class="s">&quot;shimmer&quot;</span><span class="p">,</span> <span class="s">&quot;sneak&quot;</span><span class="p">,</span> <span class="s">&quot;stab&quot;</span><span class="p">,</span> <span class="s">&quot;subject&quot;</span><span class="p">,</span> <span class="s">&quot;throughout&quot;</span><span class="p">,</span> <span class="s">&quot;thrown&quot;</span><span class="p">,</span> <span class="s">&quot;tower&quot;</span><span class="p">,</span> <span class="s">&quot;twirl&quot;</span><span class="p">,</span> <span class="s">&quot;wow&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;army&quot;</span><span class="p">,</span> <span class="s">&quot;arrive&quot;</span><span class="p">,</span> <span class="s">&quot;bathroom&quot;</span><span class="p">,</span> <span class="s">&quot;bump&quot;</span><span class="p">,</span> <span class="s">&quot;cease&quot;</span><span class="p">,</span> <span class="s">&quot;cookie&quot;</span><span class="p">,</span> <span class="s">&quot;couch&quot;</span><span class="p">,</span> <span class="s">&quot;courage&quot;</span><span class="p">,</span> <span class="s">&quot;dim&quot;</span><span class="p">,</span> <span class="s">&quot;guilt&quot;</span><span class="p">,</span> <span class="s">&quot;howl&quot;</span><span class="p">,</span> <span class="s">&quot;hum&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;husband&quot;</span><span class="p">,</span> <span class="s">&quot;insult&quot;</span><span class="p">,</span> <span class="s">&quot;led&quot;</span><span class="p">,</span> <span class="s">&quot;lunch&quot;</span><span class="p">,</span> <span class="s">&quot;mock&quot;</span><span class="p">,</span> <span class="s">&quot;mostly&quot;</span><span class="p">,</span> <span class="s">&quot;natural&quot;</span><span class="p">,</span> <span class="s">&quot;nearly&quot;</span><span class="p">,</span> <span class="s">&quot;needle&quot;</span><span class="p">,</span> <span class="s">&quot;nerd&quot;</span><span class="p">,</span> <span class="s">&quot;peaceful&quot;</span><span class="p">,</span> <span class="s">&quot;perfection&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;pile&quot;</span><span class="p">,</span> <span class="s">&quot;price&quot;</span><span class="p">,</span> <span class="s">&quot;remove&quot;</span><span class="p">,</span> <span class="s">&quot;roam&quot;</span><span class="p">,</span> <span class="s">&quot;sanctuary&quot;</span><span class="p">,</span> <span class="s">&quot;serious&quot;</span><span class="p">,</span> <span class="s">&quot;shiny&quot;</span><span class="p">,</span> <span class="s">&quot;shook&quot;</span><span class="p">,</span> <span class="s">&quot;sob&quot;</span><span class="p">,</span> <span class="s">&quot;stolen&quot;</span><span class="p">,</span> <span class="s">&quot;tap&quot;</span><span class="p">,</span> <span class="s">&quot;vain&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;void&quot;</span><span class="p">,</span> <span class="s">&quot;warrior&quot;</span><span class="p">,</span> <span class="s">&quot;wrinkle&quot;</span><span class="p">,</span> <span class="s">&quot;affection&quot;</span><span class="p">,</span> <span class="s">&quot;apologize&quot;</span><span class="p">,</span> <span class="s">&quot;blossom&quot;</span><span class="p">,</span> <span class="s">&quot;bounce&quot;</span><span class="p">,</span> <span class="s">&quot;bridge&quot;</span><span class="p">,</span> <span class="s">&quot;cheap&quot;</span><span class="p">,</span> <span class="s">&quot;crumble&quot;</span><span class="p">,</span> <span class="s">&quot;decision&quot;</span><span class="p">,</span> <span class="s">&quot;descend&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;desperately&quot;</span><span class="p">,</span> <span class="s">&quot;dig&quot;</span><span class="p">,</span> <span class="s">&quot;dot&quot;</span><span class="p">,</span> <span class="s">&quot;flip&quot;</span><span class="p">,</span> <span class="s">&quot;frighten&quot;</span><span class="p">,</span> <span class="s">&quot;heartbeat&quot;</span><span class="p">,</span> <span class="s">&quot;huge&quot;</span><span class="p">,</span> <span class="s">&quot;lazy&quot;</span><span class="p">,</span> <span class="s">&quot;lick&quot;</span><span class="p">,</span> <span class="s">&quot;odd&quot;</span><span class="p">,</span> <span class="s">&quot;opinion&quot;</span><span class="p">,</span> <span class="s">&quot;process&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;puzzle&quot;</span><span class="p">,</span> <span class="s">&quot;quietly&quot;</span><span class="p">,</span> <span class="s">&quot;retreat&quot;</span><span class="p">,</span> <span class="s">&quot;score&quot;</span><span class="p">,</span> <span class="s">&quot;sentence&quot;</span><span class="p">,</span> <span class="s">&quot;separate&quot;</span><span class="p">,</span> <span class="s">&quot;situation&quot;</span><span class="p">,</span> <span class="s">&quot;skill&quot;</span><span class="p">,</span> <span class="s">&quot;soak&quot;</span><span class="p">,</span> <span class="s">&quot;square&quot;</span><span class="p">,</span> <span class="s">&quot;stray&quot;</span><span class="p">,</span> <span class="s">&quot;taint&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;task&quot;</span><span class="p">,</span> <span class="s">&quot;tide&quot;</span><span class="p">,</span> <span class="s">&quot;underneath&quot;</span><span class="p">,</span> <span class="s">&quot;veil&quot;</span><span class="p">,</span> <span class="s">&quot;whistle&quot;</span><span class="p">,</span> <span class="s">&quot;anywhere&quot;</span><span class="p">,</span> <span class="s">&quot;bedroom&quot;</span><span class="p">,</span> <span class="s">&quot;bid&quot;</span><span class="p">,</span> <span class="s">&quot;bloody&quot;</span><span class="p">,</span> <span class="s">&quot;burden&quot;</span><span class="p">,</span> <span class="s">&quot;careful&quot;</span><span class="p">,</span> <span class="s">&quot;compare&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;concern&quot;</span><span class="p">,</span> <span class="s">&quot;curtain&quot;</span><span class="p">,</span> <span class="s">&quot;decay&quot;</span><span class="p">,</span> <span class="s">&quot;defeat&quot;</span><span class="p">,</span> <span class="s">&quot;describe&quot;</span><span class="p">,</span> <span class="s">&quot;double&quot;</span><span class="p">,</span> <span class="s">&quot;dreamer&quot;</span><span class="p">,</span> <span class="s">&quot;driver&quot;</span><span class="p">,</span> <span class="s">&quot;dwell&quot;</span><span class="p">,</span> <span class="s">&quot;evening&quot;</span><span class="p">,</span> <span class="s">&quot;flare&quot;</span><span class="p">,</span> <span class="s">&quot;flicker&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;grandma&quot;</span><span class="p">,</span> <span class="s">&quot;guitar&quot;</span><span class="p">,</span> <span class="s">&quot;harm&quot;</span><span class="p">,</span> <span class="s">&quot;horrible&quot;</span><span class="p">,</span> <span class="s">&quot;hungry&quot;</span><span class="p">,</span> <span class="s">&quot;indeed&quot;</span><span class="p">,</span> <span class="s">&quot;lace&quot;</span><span class="p">,</span> <span class="s">&quot;melody&quot;</span><span class="p">,</span> <span class="s">&quot;monkey&quot;</span><span class="p">,</span> <span class="s">&quot;nation&quot;</span><span class="p">,</span> <span class="s">&quot;object&quot;</span><span class="p">,</span> <span class="s">&quot;obviously&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;rainbow&quot;</span><span class="p">,</span> <span class="s">&quot;salt&quot;</span><span class="p">,</span> <span class="s">&quot;scratch&quot;</span><span class="p">,</span> <span class="s">&quot;shown&quot;</span><span class="p">,</span> <span class="s">&quot;shy&quot;</span><span class="p">,</span> <span class="s">&quot;stage&quot;</span><span class="p">,</span> <span class="s">&quot;stun&quot;</span><span class="p">,</span> <span class="s">&quot;third&quot;</span><span class="p">,</span> <span class="s">&quot;tickle&quot;</span><span class="p">,</span> <span class="s">&quot;useless&quot;</span><span class="p">,</span> <span class="s">&quot;weakness&quot;</span><span class="p">,</span> <span class="s">&quot;worship&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;worthless&quot;</span><span class="p">,</span> <span class="s">&quot;afternoon&quot;</span><span class="p">,</span> <span class="s">&quot;beard&quot;</span><span class="p">,</span> <span class="s">&quot;boyfriend&quot;</span><span class="p">,</span> <span class="s">&quot;bubble&quot;</span><span class="p">,</span> <span class="s">&quot;busy&quot;</span><span class="p">,</span> <span class="s">&quot;certain&quot;</span><span class="p">,</span> <span class="s">&quot;chin&quot;</span><span class="p">,</span> <span class="s">&quot;concrete&quot;</span><span class="p">,</span> <span class="s">&quot;desk&quot;</span><span class="p">,</span> <span class="s">&quot;diamond&quot;</span><span class="p">,</span> <span class="s">&quot;doom&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;drawn&quot;</span><span class="p">,</span> <span class="s">&quot;due&quot;</span><span class="p">,</span> <span class="s">&quot;felicity&quot;</span><span class="p">,</span> <span class="s">&quot;freeze&quot;</span><span class="p">,</span> <span class="s">&quot;frost&quot;</span><span class="p">,</span> <span class="s">&quot;garden&quot;</span><span class="p">,</span> <span class="s">&quot;glide&quot;</span><span class="p">,</span> <span class="s">&quot;harmony&quot;</span><span class="p">,</span> <span class="s">&quot;hopefully&quot;</span><span class="p">,</span> <span class="s">&quot;hunt&quot;</span><span class="p">,</span> <span class="s">&quot;jealous&quot;</span><span class="p">,</span> <span class="s">&quot;lightning&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;mama&quot;</span><span class="p">,</span> <span class="s">&quot;mercy&quot;</span><span class="p">,</span> <span class="s">&quot;peel&quot;</span><span class="p">,</span> <span class="s">&quot;physical&quot;</span><span class="p">,</span> <span class="s">&quot;position&quot;</span><span class="p">,</span> <span class="s">&quot;pulse&quot;</span><span class="p">,</span> <span class="s">&quot;punch&quot;</span><span class="p">,</span> <span class="s">&quot;quit&quot;</span><span class="p">,</span> <span class="s">&quot;rant&quot;</span><span class="p">,</span> <span class="s">&quot;respond&quot;</span><span class="p">,</span> <span class="s">&quot;salty&quot;</span><span class="p">,</span> <span class="s">&quot;sane&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;satisfy&quot;</span><span class="p">,</span> <span class="s">&quot;savior&quot;</span><span class="p">,</span> <span class="s">&quot;sheep&quot;</span><span class="p">,</span> <span class="s">&quot;slept&quot;</span><span class="p">,</span> <span class="s">&quot;social&quot;</span><span class="p">,</span> <span class="s">&quot;sport&quot;</span><span class="p">,</span> <span class="s">&quot;tuck&quot;</span><span class="p">,</span> <span class="s">&quot;utter&quot;</span><span class="p">,</span> <span class="s">&quot;valley&quot;</span><span class="p">,</span> <span class="s">&quot;wolf&quot;</span><span class="p">,</span> <span class="s">&quot;aim&quot;</span><span class="p">,</span> <span class="s">&quot;alas&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;alter&quot;</span><span class="p">,</span> <span class="s">&quot;arrow&quot;</span><span class="p">,</span> <span class="s">&quot;awaken&quot;</span><span class="p">,</span> <span class="s">&quot;beaten&quot;</span><span class="p">,</span> <span class="s">&quot;belief&quot;</span><span class="p">,</span> <span class="s">&quot;brand&quot;</span><span class="p">,</span> <span class="s">&quot;ceiling&quot;</span><span class="p">,</span> <span class="s">&quot;cheese&quot;</span><span class="p">,</span> <span class="s">&quot;clue&quot;</span><span class="p">,</span> <span class="s">&quot;confidence&quot;</span><span class="p">,</span> <span class="s">&quot;connection&quot;</span><span class="p">,</span> <span class="s">&quot;daily&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;disguise&quot;</span><span class="p">,</span> <span class="s">&quot;eager&quot;</span><span class="p">,</span> <span class="s">&quot;erase&quot;</span><span class="p">,</span> <span class="s">&quot;essence&quot;</span><span class="p">,</span> <span class="s">&quot;everytime&quot;</span><span class="p">,</span> <span class="s">&quot;expression&quot;</span><span class="p">,</span> <span class="s">&quot;fan&quot;</span><span class="p">,</span> <span class="s">&quot;flag&quot;</span><span class="p">,</span> <span class="s">&quot;flirt&quot;</span><span class="p">,</span> <span class="s">&quot;foul&quot;</span><span class="p">,</span> <span class="s">&quot;fur&quot;</span><span class="p">,</span> <span class="s">&quot;giggle&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;glorious&quot;</span><span class="p">,</span> <span class="s">&quot;ignorance&quot;</span><span class="p">,</span> <span class="s">&quot;law&quot;</span><span class="p">,</span> <span class="s">&quot;lifeless&quot;</span><span class="p">,</span> <span class="s">&quot;measure&quot;</span><span class="p">,</span> <span class="s">&quot;mighty&quot;</span><span class="p">,</span> <span class="s">&quot;muse&quot;</span><span class="p">,</span> <span class="s">&quot;north&quot;</span><span class="p">,</span> <span class="s">&quot;opposite&quot;</span><span class="p">,</span> <span class="s">&quot;paradise&quot;</span><span class="p">,</span> <span class="s">&quot;patience&quot;</span><span class="p">,</span> <span class="s">&quot;patient&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;pencil&quot;</span><span class="p">,</span> <span class="s">&quot;petal&quot;</span><span class="p">,</span> <span class="s">&quot;plate&quot;</span><span class="p">,</span> <span class="s">&quot;ponder&quot;</span><span class="p">,</span> <span class="s">&quot;possibly&quot;</span><span class="p">,</span> <span class="s">&quot;practice&quot;</span><span class="p">,</span> <span class="s">&quot;slice&quot;</span><span class="p">,</span> <span class="s">&quot;spell&quot;</span><span class="p">,</span> <span class="s">&quot;stock&quot;</span><span class="p">,</span> <span class="s">&quot;strife&quot;</span><span class="p">,</span> <span class="s">&quot;strip&quot;</span><span class="p">,</span> <span class="s">&quot;suffocate&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;suit&quot;</span><span class="p">,</span> <span class="s">&quot;tender&quot;</span><span class="p">,</span> <span class="s">&quot;tool&quot;</span><span class="p">,</span> <span class="s">&quot;trade&quot;</span><span class="p">,</span> <span class="s">&quot;velvet&quot;</span><span class="p">,</span> <span class="s">&quot;verse&quot;</span><span class="p">,</span> <span class="s">&quot;waist&quot;</span><span class="p">,</span> <span class="s">&quot;witch&quot;</span><span class="p">,</span> <span class="s">&quot;aunt&quot;</span><span class="p">,</span> <span class="s">&quot;bench&quot;</span><span class="p">,</span> <span class="s">&quot;bold&quot;</span><span class="p">,</span> <span class="s">&quot;cap&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;certainly&quot;</span><span class="p">,</span> <span class="s">&quot;click&quot;</span><span class="p">,</span> <span class="s">&quot;companion&quot;</span><span class="p">,</span> <span class="s">&quot;creator&quot;</span><span class="p">,</span> <span class="s">&quot;dart&quot;</span><span class="p">,</span> <span class="s">&quot;delicate&quot;</span><span class="p">,</span> <span class="s">&quot;determine&quot;</span><span class="p">,</span> <span class="s">&quot;dish&quot;</span><span class="p">,</span> <span class="s">&quot;dragon&quot;</span><span class="p">,</span> <span class="s">&quot;drama&quot;</span><span class="p">,</span> <span class="s">&quot;drum&quot;</span><span class="p">,</span> <span class="s">&quot;dude&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;everybody&quot;</span><span class="p">,</span> <span class="s">&quot;feast&quot;</span><span class="p">,</span> <span class="s">&quot;forehead&quot;</span><span class="p">,</span> <span class="s">&quot;former&quot;</span><span class="p">,</span> <span class="s">&quot;fright&quot;</span><span class="p">,</span> <span class="s">&quot;fully&quot;</span><span class="p">,</span> <span class="s">&quot;gas&quot;</span><span class="p">,</span> <span class="s">&quot;hook&quot;</span><span class="p">,</span> <span class="s">&quot;hurl&quot;</span><span class="p">,</span> <span class="s">&quot;invite&quot;</span><span class="p">,</span> <span class="s">&quot;juice&quot;</span><span class="p">,</span> <span class="s">&quot;manage&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;moral&quot;</span><span class="p">,</span> <span class="s">&quot;possess&quot;</span><span class="p">,</span> <span class="s">&quot;raw&quot;</span><span class="p">,</span> <span class="s">&quot;rebel&quot;</span><span class="p">,</span> <span class="s">&quot;royal&quot;</span><span class="p">,</span> <span class="s">&quot;scale&quot;</span><span class="p">,</span> <span class="s">&quot;scary&quot;</span><span class="p">,</span> <span class="s">&quot;several&quot;</span><span class="p">,</span> <span class="s">&quot;slight&quot;</span><span class="p">,</span> <span class="s">&quot;stubborn&quot;</span><span class="p">,</span> <span class="s">&quot;swell&quot;</span><span class="p">,</span> <span class="s">&quot;talent&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;tea&quot;</span><span class="p">,</span> <span class="s">&quot;terrible&quot;</span><span class="p">,</span> <span class="s">&quot;thread&quot;</span><span class="p">,</span> <span class="s">&quot;torment&quot;</span><span class="p">,</span> <span class="s">&quot;trickle&quot;</span><span class="p">,</span> <span class="s">&quot;usually&quot;</span><span class="p">,</span> <span class="s">&quot;vast&quot;</span><span class="p">,</span> <span class="s">&quot;violence&quot;</span><span class="p">,</span> <span class="s">&quot;weave&quot;</span><span class="p">,</span> <span class="s">&quot;acid&quot;</span><span class="p">,</span> <span class="s">&quot;agony&quot;</span><span class="p">,</span> <span class="s">&quot;ashamed&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;awe&quot;</span><span class="p">,</span> <span class="s">&quot;belly&quot;</span><span class="p">,</span> <span class="s">&quot;blend&quot;</span><span class="p">,</span> <span class="s">&quot;blush&quot;</span><span class="p">,</span> <span class="s">&quot;character&quot;</span><span class="p">,</span> <span class="s">&quot;cheat&quot;</span><span class="p">,</span> <span class="s">&quot;common&quot;</span><span class="p">,</span> <span class="s">&quot;company&quot;</span><span class="p">,</span> <span class="s">&quot;coward&quot;</span><span class="p">,</span> <span class="s">&quot;creak&quot;</span><span class="p">,</span> <span class="s">&quot;danger&quot;</span><span class="p">,</span> <span class="s">&quot;deadly&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;defense&quot;</span><span class="p">,</span> <span class="s">&quot;define&quot;</span><span class="p">,</span> <span class="s">&quot;depend&quot;</span><span class="p">,</span> <span class="s">&quot;desperate&quot;</span><span class="p">,</span> <span class="s">&quot;destination&quot;</span><span class="p">,</span> <span class="s">&quot;dew&quot;</span><span class="p">,</span> <span class="s">&quot;duck&quot;</span><span class="p">,</span> <span class="s">&quot;dusty&quot;</span><span class="p">,</span> <span class="s">&quot;embarrass&quot;</span><span class="p">,</span> <span class="s">&quot;engine&quot;</span><span class="p">,</span> <span class="s">&quot;example&quot;</span><span class="p">,</span> <span class="s">&quot;explore&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;foe&quot;</span><span class="p">,</span> <span class="s">&quot;freely&quot;</span><span class="p">,</span> <span class="s">&quot;frustrate&quot;</span><span class="p">,</span> <span class="s">&quot;generation&quot;</span><span class="p">,</span> <span class="s">&quot;glove&quot;</span><span class="p">,</span> <span class="s">&quot;guilty&quot;</span><span class="p">,</span> <span class="s">&quot;health&quot;</span><span class="p">,</span> <span class="s">&quot;hurry&quot;</span><span class="p">,</span> <span class="s">&quot;idiot&quot;</span><span class="p">,</span> <span class="s">&quot;impossible&quot;</span><span class="p">,</span> <span class="s">&quot;inhale&quot;</span><span class="p">,</span> <span class="s">&quot;jaw&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;kingdom&quot;</span><span class="p">,</span> <span class="s">&quot;mention&quot;</span><span class="p">,</span> <span class="s">&quot;mist&quot;</span><span class="p">,</span> <span class="s">&quot;moan&quot;</span><span class="p">,</span> <span class="s">&quot;mumble&quot;</span><span class="p">,</span> <span class="s">&quot;mutter&quot;</span><span class="p">,</span> <span class="s">&quot;observe&quot;</span><span class="p">,</span> <span class="s">&quot;ode&quot;</span><span class="p">,</span> <span class="s">&quot;pathetic&quot;</span><span class="p">,</span> <span class="s">&quot;pattern&quot;</span><span class="p">,</span> <span class="s">&quot;pie&quot;</span><span class="p">,</span> <span class="s">&quot;prefer&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;puff&quot;</span><span class="p">,</span> <span class="s">&quot;rape&quot;</span><span class="p">,</span> <span class="s">&quot;rare&quot;</span><span class="p">,</span> <span class="s">&quot;revenge&quot;</span><span class="p">,</span> <span class="s">&quot;rude&quot;</span><span class="p">,</span> <span class="s">&quot;scrape&quot;</span><span class="p">,</span> <span class="s">&quot;spiral&quot;</span><span class="p">,</span> <span class="s">&quot;squeeze&quot;</span><span class="p">,</span> <span class="s">&quot;strain&quot;</span><span class="p">,</span> <span class="s">&quot;sunset&quot;</span><span class="p">,</span> <span class="s">&quot;suspend&quot;</span><span class="p">,</span> <span class="s">&quot;sympathy&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;thigh&quot;</span><span class="p">,</span> <span class="s">&quot;throne&quot;</span><span class="p">,</span> <span class="s">&quot;total&quot;</span><span class="p">,</span> <span class="s">&quot;unseen&quot;</span><span class="p">,</span> <span class="s">&quot;weapon&quot;</span><span class="p">,</span> <span class="s">&quot;weary&quot;</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">N</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Note about US patent no 5892470:</span>
</span><span class='line'><span class="c"># Here each word does not represent a given digit.</span>
</span><span class='line'><span class="c"># Instead, the digit represented by a word is variable, it depends on the previous word.</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">encode</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">message</span><span class="p">)</span> <span class="o">/</span> <span class="mi">8</span><span class="p">):</span>
</span><span class='line'>        <span class="n">word</span> <span class="o">=</span> <span class="n">message</span><span class="p">[</span><span class="mi">8</span> <span class="o">*</span> <span class="n">i</span><span class="p">:</span><span class="mi">8</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">8</span><span class="p">]</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>        <span class="n">w1</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">%</span> <span class="n">N</span><span class="p">)</span>
</span><span class='line'>        <span class="n">w2</span> <span class="o">=</span> <span class="p">((</span><span class="n">x</span> <span class="o">/</span> <span class="n">N</span><span class="p">)</span> <span class="o">+</span> <span class="n">w1</span><span class="p">)</span> <span class="o">%</span> <span class="n">N</span>
</span><span class='line'>        <span class="n">w3</span> <span class="o">=</span> <span class="p">((</span><span class="n">x</span> <span class="o">/</span> <span class="n">N</span> <span class="o">/</span> <span class="n">N</span><span class="p">)</span> <span class="o">+</span> <span class="n">w2</span><span class="p">)</span> <span class="o">%</span> <span class="n">N</span>
</span><span class='line'>        <span class="n">out</span> <span class="o">+=</span> <span class="p">[</span> <span class="n">words</span><span class="p">[</span><span class="n">w1</span><span class="p">],</span> <span class="n">words</span><span class="p">[</span><span class="n">w2</span><span class="p">],</span> <span class="n">words</span><span class="p">[</span><span class="n">w3</span><span class="p">]</span> <span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">out</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">decode</span><span class="p">(</span><span class="n">wlist</span><span class="p">):</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">wlist</span><span class="p">)</span> <span class="o">/</span> <span class="mi">3</span><span class="p">):</span>
</span><span class='line'>        <span class="n">word1</span><span class="p">,</span> <span class="n">word2</span><span class="p">,</span> <span class="n">word3</span> <span class="o">=</span> <span class="n">wlist</span><span class="p">[</span><span class="mi">3</span> <span class="o">*</span> <span class="n">i</span><span class="p">:</span><span class="mi">3</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>        <span class="n">w1</span> <span class="o">=</span> <span class="n">words</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">word1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">w2</span> <span class="o">=</span> <span class="p">(</span><span class="n">words</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">word2</span><span class="p">))</span> <span class="o">%</span> <span class="n">N</span>
</span><span class='line'>        <span class="n">w3</span> <span class="o">=</span> <span class="p">(</span><span class="n">words</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">word3</span><span class="p">))</span> <span class="o">%</span> <span class="n">N</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="n">w1</span> <span class="o">+</span> <span class="n">N</span> <span class="o">*</span> <span class="p">((</span><span class="n">w2</span> <span class="o">-</span> <span class="n">w1</span><span class="p">)</span> <span class="o">%</span> <span class="n">N</span><span class="p">)</span> <span class="o">+</span> <span class="n">N</span> <span class="o">*</span> <span class="n">N</span> <span class="o">*</span> <span class="p">((</span><span class="n">w3</span> <span class="o">-</span> <span class="n">w2</span><span class="p">)</span> <span class="o">%</span> <span class="n">N</span><span class="p">)</span>
</span><span class='line'>        <span class="n">out</span> <span class="o">+=</span> <span class="s">&#39;</span><span class="si">%08x</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">x</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">out</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;I need arguments: a hex string to encode, or a list of words to decode&#39;</span>
</span><span class='line'>    <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">encode</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">decode</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</span></code></pre></td></tr></table></div></figure>


<p>The script supports encoding and decoding. Run it like this:</p>

<pre><code>./mnemonic.py a1b2c3d4
shield doom swallow

./mnemonic.py shield doom swallow
a1b2c3d4
</code></pre>

<p>The second script generates words using the official <a href="http://en.wikipedia.org/wiki/PGP_word_list">PGP Wordlist</a> and all of its rules. This is commonly used to communicate a PGP key fingerprint over a voice channel, and is set up such that even bytes are two syllable words, while odd bytes are three syllable words. Again, this can be used for more than just PGP keys.</p>

<figure class='code'><figcaption><span> (pgp-words.py)</span> <a href='http://jrruethe.github.io/downloads/code/pgp-words.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="c"># pgp-words.py</span>
</span><span class='line'><span class="c"># Copyright (C) 2015 Joe Ruether jrruethe@gmail.com</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c"># it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c"># the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c"># (at your option) any later version.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c"># GNU General Public License for more details.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c"># along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="n">conv</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="s">&#39;00&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;aardvark&#39;</span><span class="p">,</span> <span class="s">&#39;adroitness&#39;</span><span class="p">],</span> <span class="s">&#39;01&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;absurd&#39;</span><span class="p">,</span> <span class="s">&#39;adviser&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;02&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;accrue&#39;</span><span class="p">,</span> <span class="s">&#39;aftermath&#39;</span><span class="p">],</span> <span class="s">&#39;03&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;acme&#39;</span><span class="p">,</span> <span class="s">&#39;aggregate&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;04&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;adrift&#39;</span><span class="p">,</span> <span class="s">&#39;alkali&#39;</span><span class="p">],</span> <span class="s">&#39;05&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;adult&#39;</span><span class="p">,</span> <span class="s">&#39;almighty&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;06&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;afflict&#39;</span><span class="p">,</span> <span class="s">&#39;amulet&#39;</span><span class="p">],</span> <span class="s">&#39;07&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;ahead&#39;</span><span class="p">,</span> <span class="s">&#39;amusement&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;08&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;aimless&#39;</span><span class="p">,</span> <span class="s">&#39;antenna&#39;</span><span class="p">],</span> <span class="s">&#39;09&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;algol&#39;</span><span class="p">,</span> <span class="s">&#39;applicant&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;0a&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;allow&#39;</span><span class="p">,</span> <span class="s">&#39;apollo&#39;</span><span class="p">],</span> <span class="s">&#39;0b&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;alone&#39;</span><span class="p">,</span> <span class="s">&#39;armistice&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;0c&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;ammo&#39;</span><span class="p">,</span> <span class="s">&#39;article&#39;</span><span class="p">],</span> <span class="s">&#39;0d&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;ancient&#39;</span><span class="p">,</span> <span class="s">&#39;asteroid&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;0e&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;apple&#39;</span><span class="p">,</span> <span class="s">&#39;atlantic&#39;</span><span class="p">],</span> <span class="s">&#39;0f&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;artist&#39;</span><span class="p">,</span> <span class="s">&#39;atmosphere&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;10&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;assume&#39;</span><span class="p">,</span> <span class="s">&#39;autopsy&#39;</span><span class="p">],</span> <span class="s">&#39;11&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;athens&#39;</span><span class="p">,</span> <span class="s">&#39;babylon&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;12&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;atlas&#39;</span><span class="p">,</span> <span class="s">&#39;backwater&#39;</span><span class="p">],</span> <span class="s">&#39;13&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;aztec&#39;</span><span class="p">,</span> <span class="s">&#39;barbecue&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;14&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;baboon&#39;</span><span class="p">,</span> <span class="s">&#39;belowground&#39;</span><span class="p">],</span> <span class="s">&#39;15&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;backfield&#39;</span><span class="p">,</span> <span class="s">&#39;bifocals&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;16&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;backward&#39;</span><span class="p">,</span> <span class="s">&#39;bodyguard&#39;</span><span class="p">],</span> <span class="s">&#39;17&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;banjo&#39;</span><span class="p">,</span> <span class="s">&#39;bookseller&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;18&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;beaming&#39;</span><span class="p">,</span> <span class="s">&#39;borderline&#39;</span><span class="p">],</span> <span class="s">&#39;19&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;bedlamp&#39;</span><span class="p">,</span> <span class="s">&#39;bottomless&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;1a&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;beehive&#39;</span><span class="p">,</span> <span class="s">&#39;bradbury&#39;</span><span class="p">],</span> <span class="s">&#39;1b&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;beeswax&#39;</span><span class="p">,</span> <span class="s">&#39;bravado&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;1c&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;befriend&#39;</span><span class="p">,</span> <span class="s">&#39;brazilian&#39;</span><span class="p">],</span> <span class="s">&#39;1d&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;belfast&#39;</span><span class="p">,</span> <span class="s">&#39;breakaway&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;1e&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;berserk&#39;</span><span class="p">,</span> <span class="s">&#39;burlington&#39;</span><span class="p">],</span> <span class="s">&#39;1f&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;billiard&#39;</span><span class="p">,</span> <span class="s">&#39;businessman&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;20&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;bison&#39;</span><span class="p">,</span> <span class="s">&#39;butterfat&#39;</span><span class="p">],</span> <span class="s">&#39;21&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;blackjack&#39;</span><span class="p">,</span> <span class="s">&#39;camelot&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;22&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;blockade&#39;</span><span class="p">,</span> <span class="s">&#39;candidate&#39;</span><span class="p">],</span> <span class="s">&#39;23&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;blowtorch&#39;</span><span class="p">,</span> <span class="s">&#39;cannonball&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;24&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;bluebird&#39;</span><span class="p">,</span> <span class="s">&#39;capricorn&#39;</span><span class="p">],</span> <span class="s">&#39;25&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;bombast&#39;</span><span class="p">,</span> <span class="s">&#39;caravan&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;26&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;bookshelf&#39;</span><span class="p">,</span> <span class="s">&#39;caretaker&#39;</span><span class="p">],</span> <span class="s">&#39;27&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;brackish&#39;</span><span class="p">,</span> <span class="s">&#39;celebrate&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;28&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;breadline&#39;</span><span class="p">,</span> <span class="s">&#39;cellulose&#39;</span><span class="p">],</span> <span class="s">&#39;29&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;breakup&#39;</span><span class="p">,</span> <span class="s">&#39;certify&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;2a&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;brickyard&#39;</span><span class="p">,</span> <span class="s">&#39;chambermaid&#39;</span><span class="p">],</span> <span class="s">&#39;2b&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;briefcase&#39;</span><span class="p">,</span> <span class="s">&#39;cherokee&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;2c&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;burbank&#39;</span><span class="p">,</span> <span class="s">&#39;chicago&#39;</span><span class="p">],</span> <span class="s">&#39;2d&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;button&#39;</span><span class="p">,</span> <span class="s">&#39;clergyman&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;2e&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;buzzard&#39;</span><span class="p">,</span> <span class="s">&#39;coherence&#39;</span><span class="p">],</span> <span class="s">&#39;2f&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;cement&#39;</span><span class="p">,</span> <span class="s">&#39;combustion&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;30&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;chairlift&#39;</span><span class="p">,</span> <span class="s">&#39;commando&#39;</span><span class="p">],</span> <span class="s">&#39;31&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;chatter&#39;</span><span class="p">,</span> <span class="s">&#39;company&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;32&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;checkup&#39;</span><span class="p">,</span> <span class="s">&#39;component&#39;</span><span class="p">],</span> <span class="s">&#39;33&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;chisel&#39;</span><span class="p">,</span> <span class="s">&#39;concurrent&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;34&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;choking&#39;</span><span class="p">,</span> <span class="s">&#39;confidence&#39;</span><span class="p">],</span> <span class="s">&#39;35&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;chopper&#39;</span><span class="p">,</span> <span class="s">&#39;conformist&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;36&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;christmas&#39;</span><span class="p">,</span> <span class="s">&#39;congregate&#39;</span><span class="p">],</span> <span class="s">&#39;37&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;clamshell&#39;</span><span class="p">,</span> <span class="s">&#39;consensus&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;38&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;classic&#39;</span><span class="p">,</span> <span class="s">&#39;consulting&#39;</span><span class="p">],</span> <span class="s">&#39;39&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;classroom&#39;</span><span class="p">,</span> <span class="s">&#39;corporate&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;3a&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;cleanup&#39;</span><span class="p">,</span> <span class="s">&#39;corrosion&#39;</span><span class="p">],</span> <span class="s">&#39;3b&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;clockwork&#39;</span><span class="p">,</span> <span class="s">&#39;councilman&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;3c&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;cobra&#39;</span><span class="p">,</span> <span class="s">&#39;crossover&#39;</span><span class="p">],</span> <span class="s">&#39;3d&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;commence&#39;</span><span class="p">,</span> <span class="s">&#39;crucifix&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;3e&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;concert&#39;</span><span class="p">,</span> <span class="s">&#39;cumbersome&#39;</span><span class="p">],</span> <span class="s">&#39;3f&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;cowbell&#39;</span><span class="p">,</span> <span class="s">&#39;customer&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;40&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;crackdown&#39;</span><span class="p">,</span> <span class="s">&#39;dakota&#39;</span><span class="p">],</span> <span class="s">&#39;41&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;cranky&#39;</span><span class="p">,</span> <span class="s">&#39;decadence&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;42&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;crowfoot&#39;</span><span class="p">,</span> <span class="s">&#39;december&#39;</span><span class="p">],</span> <span class="s">&#39;43&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;crucial&#39;</span><span class="p">,</span> <span class="s">&#39;decimal&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;44&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;crumpled&#39;</span><span class="p">,</span> <span class="s">&#39;designing&#39;</span><span class="p">],</span> <span class="s">&#39;45&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;crusade&#39;</span><span class="p">,</span> <span class="s">&#39;detector&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;46&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;cubic&#39;</span><span class="p">,</span> <span class="s">&#39;detergent&#39;</span><span class="p">],</span> <span class="s">&#39;47&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;dashboard&#39;</span><span class="p">,</span> <span class="s">&#39;determine&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;48&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;deadbolt&#39;</span><span class="p">,</span> <span class="s">&#39;dictator&#39;</span><span class="p">],</span> <span class="s">&#39;49&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;deckhand&#39;</span><span class="p">,</span> <span class="s">&#39;dinosaur&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;4a&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;dogsled&#39;</span><span class="p">,</span> <span class="s">&#39;direction&#39;</span><span class="p">],</span> <span class="s">&#39;4b&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;dragnet&#39;</span><span class="p">,</span> <span class="s">&#39;disable&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;4c&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;drainage&#39;</span><span class="p">,</span> <span class="s">&#39;disbelief&#39;</span><span class="p">],</span> <span class="s">&#39;4d&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;dreadful&#39;</span><span class="p">,</span> <span class="s">&#39;disruptive&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;4e&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;drifter&#39;</span><span class="p">,</span> <span class="s">&#39;distortion&#39;</span><span class="p">],</span> <span class="s">&#39;4f&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;dropper&#39;</span><span class="p">,</span> <span class="s">&#39;document&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;50&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;drumbeat&#39;</span><span class="p">,</span> <span class="s">&#39;embezzle&#39;</span><span class="p">],</span> <span class="s">&#39;51&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;drunken&#39;</span><span class="p">,</span> <span class="s">&#39;enchanting&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;52&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;dupont&#39;</span><span class="p">,</span> <span class="s">&#39;enrollment&#39;</span><span class="p">],</span> <span class="s">&#39;53&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;dwelling&#39;</span><span class="p">,</span> <span class="s">&#39;enterprise&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;54&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;eating&#39;</span><span class="p">,</span> <span class="s">&#39;equation&#39;</span><span class="p">],</span> <span class="s">&#39;55&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;edict&#39;</span><span class="p">,</span> <span class="s">&#39;equipment&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;56&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;egghead&#39;</span><span class="p">,</span> <span class="s">&#39;escapade&#39;</span><span class="p">],</span> <span class="s">&#39;57&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;eightball&#39;</span><span class="p">,</span> <span class="s">&#39;eskimo&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;58&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;endorse&#39;</span><span class="p">,</span> <span class="s">&#39;everyday&#39;</span><span class="p">],</span> <span class="s">&#39;59&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;endow&#39;</span><span class="p">,</span> <span class="s">&#39;examine&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;5a&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;enlist&#39;</span><span class="p">,</span> <span class="s">&#39;existence&#39;</span><span class="p">],</span> <span class="s">&#39;5b&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;erase&#39;</span><span class="p">,</span> <span class="s">&#39;exodus&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;5c&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;escape&#39;</span><span class="p">,</span> <span class="s">&#39;fascinate&#39;</span><span class="p">],</span> <span class="s">&#39;5d&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;exceed&#39;</span><span class="p">,</span> <span class="s">&#39;filament&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;5e&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;eyeglass&#39;</span><span class="p">,</span> <span class="s">&#39;finicky&#39;</span><span class="p">],</span> <span class="s">&#39;5f&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;eyetooth&#39;</span><span class="p">,</span> <span class="s">&#39;forever&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;60&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;facial&#39;</span><span class="p">,</span> <span class="s">&#39;fortitude&#39;</span><span class="p">],</span> <span class="s">&#39;61&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;fallout&#39;</span><span class="p">,</span> <span class="s">&#39;frequency&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;62&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;flagpole&#39;</span><span class="p">,</span> <span class="s">&#39;gadgetry&#39;</span><span class="p">],</span> <span class="s">&#39;63&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;flatfoot&#39;</span><span class="p">,</span> <span class="s">&#39;galveston&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;64&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;flytrap&#39;</span><span class="p">,</span> <span class="s">&#39;getaway&#39;</span><span class="p">],</span> <span class="s">&#39;65&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;fracture&#39;</span><span class="p">,</span> <span class="s">&#39;glossary&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;66&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;framework&#39;</span><span class="p">,</span> <span class="s">&#39;gossamer&#39;</span><span class="p">],</span> <span class="s">&#39;67&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;freedom&#39;</span><span class="p">,</span> <span class="s">&#39;graduate&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;68&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;frighten&#39;</span><span class="p">,</span> <span class="s">&#39;gravity&#39;</span><span class="p">],</span> <span class="s">&#39;69&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;gazelle&#39;</span><span class="p">,</span> <span class="s">&#39;guitarist&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;6a&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;geiger&#39;</span><span class="p">,</span> <span class="s">&#39;hamburger&#39;</span><span class="p">],</span> <span class="s">&#39;6b&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;glitter&#39;</span><span class="p">,</span> <span class="s">&#39;hamilton&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;6c&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;glucose&#39;</span><span class="p">,</span> <span class="s">&#39;handiwork&#39;</span><span class="p">],</span> <span class="s">&#39;6d&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;goggles&#39;</span><span class="p">,</span> <span class="s">&#39;hazardous&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;6e&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;goldfish&#39;</span><span class="p">,</span> <span class="s">&#39;headwaters&#39;</span><span class="p">],</span> <span class="s">&#39;6f&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;gremlin&#39;</span><span class="p">,</span> <span class="s">&#39;hemisphere&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;70&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;guidance&#39;</span><span class="p">,</span> <span class="s">&#39;hesitate&#39;</span><span class="p">],</span> <span class="s">&#39;71&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;hamlet&#39;</span><span class="p">,</span> <span class="s">&#39;hideaway&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;72&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;highchair&#39;</span><span class="p">,</span> <span class="s">&#39;holiness&#39;</span><span class="p">],</span> <span class="s">&#39;73&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;hockey&#39;</span><span class="p">,</span> <span class="s">&#39;hurricane&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;74&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;indoors&#39;</span><span class="p">,</span> <span class="s">&#39;hydraulic&#39;</span><span class="p">],</span> <span class="s">&#39;75&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;indulge&#39;</span><span class="p">,</span> <span class="s">&#39;impartial&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;76&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;inverse&#39;</span><span class="p">,</span> <span class="s">&#39;impetus&#39;</span><span class="p">],</span> <span class="s">&#39;77&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;involve&#39;</span><span class="p">,</span> <span class="s">&#39;inception&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;78&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;island&#39;</span><span class="p">,</span> <span class="s">&#39;indigo&#39;</span><span class="p">],</span> <span class="s">&#39;79&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;jawbone&#39;</span><span class="p">,</span> <span class="s">&#39;inertia&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;7a&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;keyboard&#39;</span><span class="p">,</span> <span class="s">&#39;infancy&#39;</span><span class="p">],</span> <span class="s">&#39;7b&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;kickoff&#39;</span><span class="p">,</span> <span class="s">&#39;inferno&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;7c&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;kiwi&#39;</span><span class="p">,</span> <span class="s">&#39;informant&#39;</span><span class="p">],</span> <span class="s">&#39;7d&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;klaxon&#39;</span><span class="p">,</span> <span class="s">&#39;insincere&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;7e&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;locale&#39;</span><span class="p">,</span> <span class="s">&#39;insurgent&#39;</span><span class="p">],</span> <span class="s">&#39;7f&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;lockup&#39;</span><span class="p">,</span> <span class="s">&#39;integrate&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;80&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;merit&#39;</span><span class="p">,</span> <span class="s">&#39;intention&#39;</span><span class="p">],</span> <span class="s">&#39;81&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;minnow&#39;</span><span class="p">,</span> <span class="s">&#39;inventive&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;82&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;miser&#39;</span><span class="p">,</span> <span class="s">&#39;istanbul&#39;</span><span class="p">],</span> <span class="s">&#39;83&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;mohawk&#39;</span><span class="p">,</span> <span class="s">&#39;jamaica&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;84&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;mural&#39;</span><span class="p">,</span> <span class="s">&#39;jupiter&#39;</span><span class="p">],</span> <span class="s">&#39;85&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;music&#39;</span><span class="p">,</span> <span class="s">&#39;leprosy&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;86&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;necklace&#39;</span><span class="p">,</span> <span class="s">&#39;letterhead&#39;</span><span class="p">],</span> <span class="s">&#39;87&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;neptune&#39;</span><span class="p">,</span> <span class="s">&#39;liberty&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;88&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;newborn&#39;</span><span class="p">,</span> <span class="s">&#39;maritime&#39;</span><span class="p">],</span> <span class="s">&#39;89&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;nightbird&#39;</span><span class="p">,</span> <span class="s">&#39;matchmaker&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;8a&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;oakland&#39;</span><span class="p">,</span> <span class="s">&#39;maverick&#39;</span><span class="p">],</span> <span class="s">&#39;8b&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;obtuse&#39;</span><span class="p">,</span> <span class="s">&#39;medusa&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;8c&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;offload&#39;</span><span class="p">,</span> <span class="s">&#39;megaton&#39;</span><span class="p">],</span> <span class="s">&#39;8d&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;optic&#39;</span><span class="p">,</span> <span class="s">&#39;microscope&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;8e&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;orca&#39;</span><span class="p">,</span> <span class="s">&#39;microwave&#39;</span><span class="p">],</span> <span class="s">&#39;8f&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;payday&#39;</span><span class="p">,</span> <span class="s">&#39;midsummer&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;90&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;peachy&#39;</span><span class="p">,</span> <span class="s">&#39;millionaire&#39;</span><span class="p">],</span> <span class="s">&#39;91&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;pheasant&#39;</span><span class="p">,</span> <span class="s">&#39;miracle&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;92&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;physique&#39;</span><span class="p">,</span> <span class="s">&#39;misnomer&#39;</span><span class="p">],</span> <span class="s">&#39;93&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;playhouse&#39;</span><span class="p">,</span> <span class="s">&#39;molasses&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;94&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;pluto&#39;</span><span class="p">,</span> <span class="s">&#39;molecule&#39;</span><span class="p">],</span> <span class="s">&#39;95&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;preclude&#39;</span><span class="p">,</span> <span class="s">&#39;montana&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;96&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;prefer&#39;</span><span class="p">,</span> <span class="s">&#39;monument&#39;</span><span class="p">],</span> <span class="s">&#39;97&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;preshrunk&#39;</span><span class="p">,</span> <span class="s">&#39;mosquito&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;98&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;printer&#39;</span><span class="p">,</span> <span class="s">&#39;narrative&#39;</span><span class="p">],</span> <span class="s">&#39;99&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;prowler&#39;</span><span class="p">,</span> <span class="s">&#39;nebula&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;9a&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;pupil&#39;</span><span class="p">,</span> <span class="s">&#39;newsletter&#39;</span><span class="p">],</span> <span class="s">&#39;9b&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;puppy&#39;</span><span class="p">,</span> <span class="s">&#39;norwegian&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;9c&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;python&#39;</span><span class="p">,</span> <span class="s">&#39;october&#39;</span><span class="p">],</span> <span class="s">&#39;9d&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;quadrant&#39;</span><span class="p">,</span> <span class="s">&#39;ohio&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;9e&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;quiver&#39;</span><span class="p">,</span> <span class="s">&#39;onlooker&#39;</span><span class="p">],</span> <span class="s">&#39;9f&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;quota&#39;</span><span class="p">,</span> <span class="s">&#39;opulent&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;a0&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;ragtime&#39;</span><span class="p">,</span> <span class="s">&#39;orlando&#39;</span><span class="p">],</span> <span class="s">&#39;a1&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;ratchet&#39;</span><span class="p">,</span> <span class="s">&#39;outfielder&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;a2&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;rebirth&#39;</span><span class="p">,</span> <span class="s">&#39;pacific&#39;</span><span class="p">],</span> <span class="s">&#39;a3&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;reform&#39;</span><span class="p">,</span> <span class="s">&#39;pandemic&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;a4&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;regain&#39;</span><span class="p">,</span> <span class="s">&#39;pandora&#39;</span><span class="p">],</span> <span class="s">&#39;a5&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;reindeer&#39;</span><span class="p">,</span> <span class="s">&#39;paperweight&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;a6&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;rematch&#39;</span><span class="p">,</span> <span class="s">&#39;paragon&#39;</span><span class="p">],</span> <span class="s">&#39;a7&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;repay&#39;</span><span class="p">,</span> <span class="s">&#39;paragraph&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;a8&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;retouch&#39;</span><span class="p">,</span> <span class="s">&#39;paramount&#39;</span><span class="p">],</span> <span class="s">&#39;a9&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;revenge&#39;</span><span class="p">,</span> <span class="s">&#39;passenger&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;aa&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;reward&#39;</span><span class="p">,</span> <span class="s">&#39;pedigree&#39;</span><span class="p">],</span> <span class="s">&#39;ab&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;rhythm&#39;</span><span class="p">,</span> <span class="s">&#39;pegasus&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;ac&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;ribcage&#39;</span><span class="p">,</span> <span class="s">&#39;penetrate&#39;</span><span class="p">],</span> <span class="s">&#39;ad&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;ringbolt&#39;</span><span class="p">,</span> <span class="s">&#39;perceptive&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;ae&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;robust&#39;</span><span class="p">,</span> <span class="s">&#39;performance&#39;</span><span class="p">],</span> <span class="s">&#39;af&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;rocker&#39;</span><span class="p">,</span> <span class="s">&#39;pharmacy&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;b0&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;ruffled&#39;</span><span class="p">,</span> <span class="s">&#39;phonetic&#39;</span><span class="p">],</span> <span class="s">&#39;b1&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;sailboat&#39;</span><span class="p">,</span> <span class="s">&#39;photograph&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;b2&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;sawdust&#39;</span><span class="p">,</span> <span class="s">&#39;pioneer&#39;</span><span class="p">],</span> <span class="s">&#39;b3&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;scallion&#39;</span><span class="p">,</span> <span class="s">&#39;pocketful&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;b4&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;scenic&#39;</span><span class="p">,</span> <span class="s">&#39;politeness&#39;</span><span class="p">],</span> <span class="s">&#39;b5&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;scorecard&#39;</span><span class="p">,</span> <span class="s">&#39;positive&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;b6&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;scotland&#39;</span><span class="p">,</span> <span class="s">&#39;potato&#39;</span><span class="p">],</span> <span class="s">&#39;b7&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;seabird&#39;</span><span class="p">,</span> <span class="s">&#39;processor&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;b8&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;select&#39;</span><span class="p">,</span> <span class="s">&#39;provincial&#39;</span><span class="p">],</span> <span class="s">&#39;b9&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;sentence&#39;</span><span class="p">,</span> <span class="s">&#39;proximate&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;ba&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;shadow&#39;</span><span class="p">,</span> <span class="s">&#39;puberty&#39;</span><span class="p">],</span> <span class="s">&#39;bb&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;shamrock&#39;</span><span class="p">,</span> <span class="s">&#39;publisher&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;bc&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;showgirl&#39;</span><span class="p">,</span> <span class="s">&#39;pyramid&#39;</span><span class="p">],</span> <span class="s">&#39;bd&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;skullcap&#39;</span><span class="p">,</span> <span class="s">&#39;quantity&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;be&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;skydive&#39;</span><span class="p">,</span> <span class="s">&#39;racketeer&#39;</span><span class="p">],</span> <span class="s">&#39;bf&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;slingshot&#39;</span><span class="p">,</span> <span class="s">&#39;rebellion&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;c0&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;slowdown&#39;</span><span class="p">,</span> <span class="s">&#39;recipe&#39;</span><span class="p">],</span> <span class="s">&#39;c1&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;snapline&#39;</span><span class="p">,</span> <span class="s">&#39;recover&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;c2&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;snapshot&#39;</span><span class="p">,</span> <span class="s">&#39;repellent&#39;</span><span class="p">],</span> <span class="s">&#39;c3&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;snowcap&#39;</span><span class="p">,</span> <span class="s">&#39;replica&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;c4&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;snowslide&#39;</span><span class="p">,</span> <span class="s">&#39;reproduce&#39;</span><span class="p">],</span> <span class="s">&#39;c5&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;solo&#39;</span><span class="p">,</span> <span class="s">&#39;resistor&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;c6&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;southward&#39;</span><span class="p">,</span> <span class="s">&#39;responsive&#39;</span><span class="p">],</span> <span class="s">&#39;c7&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;soybean&#39;</span><span class="p">,</span> <span class="s">&#39;retraction&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;c8&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;spaniel&#39;</span><span class="p">,</span> <span class="s">&#39;retrieval&#39;</span><span class="p">],</span> <span class="s">&#39;c9&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;spearhead&#39;</span><span class="p">,</span> <span class="s">&#39;retrospect&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;ca&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;spellbind&#39;</span><span class="p">,</span> <span class="s">&#39;revenue&#39;</span><span class="p">],</span> <span class="s">&#39;cb&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;spheroid&#39;</span><span class="p">,</span> <span class="s">&#39;revival&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;cc&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;spigot&#39;</span><span class="p">,</span> <span class="s">&#39;revolver&#39;</span><span class="p">],</span> <span class="s">&#39;cd&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;spindle&#39;</span><span class="p">,</span> <span class="s">&#39;sandalwood&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;ce&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;spyglass&#39;</span><span class="p">,</span> <span class="s">&#39;sardonic&#39;</span><span class="p">],</span> <span class="s">&#39;cf&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;stagehand&#39;</span><span class="p">,</span> <span class="s">&#39;saturday&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;d0&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;stagnate&#39;</span><span class="p">,</span> <span class="s">&#39;savagery&#39;</span><span class="p">],</span> <span class="s">&#39;d1&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;stairway&#39;</span><span class="p">,</span> <span class="s">&#39;scavenger&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;d2&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;standard&#39;</span><span class="p">,</span> <span class="s">&#39;sensation&#39;</span><span class="p">],</span> <span class="s">&#39;d3&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;stapler&#39;</span><span class="p">,</span> <span class="s">&#39;sociable&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;d4&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;steamship&#39;</span><span class="p">,</span> <span class="s">&#39;souvenir&#39;</span><span class="p">],</span> <span class="s">&#39;d5&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;sterling&#39;</span><span class="p">,</span> <span class="s">&#39;specialist&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;d6&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;stockman&#39;</span><span class="p">,</span> <span class="s">&#39;speculate&#39;</span><span class="p">],</span> <span class="s">&#39;d7&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;stopwatch&#39;</span><span class="p">,</span> <span class="s">&#39;stethoscope&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;d8&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;stormy&#39;</span><span class="p">,</span> <span class="s">&#39;stupendous&#39;</span><span class="p">],</span> <span class="s">&#39;d9&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;sugar&#39;</span><span class="p">,</span> <span class="s">&#39;supportive&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;da&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;surmount&#39;</span><span class="p">,</span> <span class="s">&#39;surrender&#39;</span><span class="p">],</span> <span class="s">&#39;db&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;suspense&#39;</span><span class="p">,</span> <span class="s">&#39;suspicious&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;dc&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;sweatband&#39;</span><span class="p">,</span> <span class="s">&#39;sympathy&#39;</span><span class="p">],</span> <span class="s">&#39;dd&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;swelter&#39;</span><span class="p">,</span> <span class="s">&#39;tambourine&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;de&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;tactics&#39;</span><span class="p">,</span> <span class="s">&#39;telephone&#39;</span><span class="p">],</span> <span class="s">&#39;df&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;talon&#39;</span><span class="p">,</span> <span class="s">&#39;therapist&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;e0&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;tapeworm&#39;</span><span class="p">,</span> <span class="s">&#39;tobacco&#39;</span><span class="p">],</span> <span class="s">&#39;e1&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;tempest&#39;</span><span class="p">,</span> <span class="s">&#39;tolerance&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;e2&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;tiger&#39;</span><span class="p">,</span> <span class="s">&#39;tomorrow&#39;</span><span class="p">],</span> <span class="s">&#39;e3&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;tissue&#39;</span><span class="p">,</span> <span class="s">&#39;torpedo&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;e4&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;tonic&#39;</span><span class="p">,</span> <span class="s">&#39;tradition&#39;</span><span class="p">],</span> <span class="s">&#39;e5&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;topmost&#39;</span><span class="p">,</span> <span class="s">&#39;travesty&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;e6&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;tracker&#39;</span><span class="p">,</span> <span class="s">&#39;trombonist&#39;</span><span class="p">],</span> <span class="s">&#39;e7&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;transit&#39;</span><span class="p">,</span> <span class="s">&#39;truncated&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;e8&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;trauma&#39;</span><span class="p">,</span> <span class="s">&#39;typewriter&#39;</span><span class="p">],</span> <span class="s">&#39;e9&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;treadmill&#39;</span><span class="p">,</span> <span class="s">&#39;ultimate&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;ea&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;trojan&#39;</span><span class="p">,</span> <span class="s">&#39;undaunted&#39;</span><span class="p">],</span> <span class="s">&#39;eb&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;trouble&#39;</span><span class="p">,</span> <span class="s">&#39;underfoot&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;ec&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;tumor&#39;</span><span class="p">,</span> <span class="s">&#39;unicorn&#39;</span><span class="p">],</span> <span class="s">&#39;ed&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;tunnel&#39;</span><span class="p">,</span> <span class="s">&#39;unify&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;ee&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;tycoon&#39;</span><span class="p">,</span> <span class="s">&#39;universe&#39;</span><span class="p">],</span> <span class="s">&#39;ef&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;uncut&#39;</span><span class="p">,</span> <span class="s">&#39;unravel&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;f0&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;unearth&#39;</span><span class="p">,</span> <span class="s">&#39;upcoming&#39;</span><span class="p">],</span> <span class="s">&#39;f1&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;unwind&#39;</span><span class="p">,</span> <span class="s">&#39;vacancy&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;f2&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;uproot&#39;</span><span class="p">,</span> <span class="s">&#39;vagabond&#39;</span><span class="p">],</span> <span class="s">&#39;f3&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;upset&#39;</span><span class="p">,</span> <span class="s">&#39;vertigo&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;f4&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;upshot&#39;</span><span class="p">,</span> <span class="s">&#39;virginia&#39;</span><span class="p">],</span> <span class="s">&#39;f5&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;vapor&#39;</span><span class="p">,</span> <span class="s">&#39;visitor&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;f6&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;village&#39;</span><span class="p">,</span> <span class="s">&#39;vocalist&#39;</span><span class="p">],</span> <span class="s">&#39;f7&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;virus&#39;</span><span class="p">,</span> <span class="s">&#39;voyager&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;f8&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;vulcan&#39;</span><span class="p">,</span> <span class="s">&#39;warranty&#39;</span><span class="p">],</span> <span class="s">&#39;f9&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;waffle&#39;</span><span class="p">,</span> <span class="s">&#39;waterloo&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;fa&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;wallet&#39;</span><span class="p">,</span> <span class="s">&#39;whimsical&#39;</span><span class="p">],</span> <span class="s">&#39;fb&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;watchword&#39;</span><span class="p">,</span> <span class="s">&#39;wichita&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;fc&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;wayside&#39;</span><span class="p">,</span> <span class="s">&#39;wilmington&#39;</span><span class="p">],</span> <span class="s">&#39;fd&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;willow&#39;</span><span class="p">,</span> <span class="s">&#39;wyoming&#39;</span><span class="p">],</span>
</span><span class='line'><span class="s">&#39;fe&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;woodlark&#39;</span><span class="p">,</span> <span class="s">&#39;yesteryear&#39;</span><span class="p">],</span> <span class="s">&#39;ff&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;zulu&#39;</span><span class="p">,</span> <span class="s">&#39;yucatan&#39;</span><span class="p">],</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">fingerprint</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">segments</span> <span class="o">=</span> <span class="p">[</span><span class="n">fingerprint</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">fingerprint</span><span class="p">),</span> <span class="mi">2</span><span class="p">)]</span>
</span><span class='line'><span class="k">for</span> <span class="n">c</span><span class="p">,</span><span class="n">i</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">segments</span><span class="p">):</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">conv</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">c</span><span class="o">%</span><span class="mi">2</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This script only supports encoding. Typically, this method is used for verification purposes, as opposed to transferring data or memorization, as PGP key fingerprints are designed to be public. Both sides would generate the words from the fingerprint, then a voice channel is used to verify that the words match.</p>

<p>Run it like this:</p>

<pre><code>./pgp-words.py a1b2c3d4
ratchet
pioneer
snowcap
souvenir
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bitcoin Address to Hash]]></title>
    <link href="http://jrruethe.github.io/blog/2015/03/27/bitcoin-address-to-hash/"/>
    <updated>2015-03-27T13:40:20-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/03/27/bitcoin-address-to-hash</id>
    <content type="html"><![CDATA[<p>In the <a href="http://jrruethe.github.io/blog/2015/02/28/blockchain-identity/">previous post</a>, I walked through how to store a hash in the Bitcoin blockchain, by converting the hash to a valid Bitcoin address and sending a small amount of bitcoin to it. I neglected to include a script that goes the other way.</p>

<p>Below is a script that will take a valid Bitcoin address and convert it back to the hash it came from. This can be used to validate Blockchain Identities.</p>

<figure class='code'><figcaption><span> (address-to-hash.rb)</span> <a href='http://jrruethe.github.io/downloads/code/address-to-hash.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># address-to-hash.rb</span>
</span><span class='line'><span class="c1"># Copyright (C) 2015 Joe Ruether jrruethe@gmail.com</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c1"># it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c1"># the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c1"># (at your option) any later version.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c1"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c1"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c1"># GNU General Public License for more details.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c1"># along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Get the address</span>
</span><span class='line'><span class="n">address</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">decode_base58</span><span class="p">(</span><span class="n">base58_val</span><span class="p">)</span>
</span><span class='line'>   <span class="n">alpha</span> <span class="o">=</span> <span class="s2">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span>
</span><span class='line'>   <span class="n">int_val</span><span class="p">,</span> <span class="n">base</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">alpha</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>   <span class="n">base58_val</span><span class="o">.</span><span class="n">reverse</span><span class="o">.</span><span class="n">each_char</span><span class="o">.</span><span class="n">with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">char</span><span class="p">,</span><span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s1">&#39;Value not a valid Base58 String.&#39;</span> <span class="k">unless</span> <span class="n">char_index</span> <span class="o">=</span> <span class="n">alpha</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
</span><span class='line'>      <span class="n">int_val</span> <span class="o">+=</span> <span class="n">char_index</span><span class="o">*</span><span class="p">(</span><span class="n">base</span><span class="o">**</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>   <span class="n">s</span> <span class="o">=</span> <span class="n">int_val</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>   <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">bytesize</span><span class="o">.</span><span class="n">odd?</span> <span class="p">?</span> <span class="s1">&#39;0&#39;</span><span class="o">+</span><span class="n">s</span> <span class="p">:</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>   <span class="n">s</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span> <span class="k">if</span> <span class="n">s</span> <span class="o">==</span> <span class="s1">&#39;00&#39;</span>
</span><span class='line'>   <span class="n">leading_zero_bytes</span> <span class="o">=</span> <span class="p">(</span><span class="n">base58_val</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/^([1]+)/</span><span class="p">)</span> <span class="p">?</span> <span class="vg">$1</span> <span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>   <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;00&quot;</span><span class="o">*</span><span class="n">leading_zero_bytes</span><span class="p">)</span> <span class="o">+</span> <span class="n">s</span>  <span class="k">if</span> <span class="n">leading_zero_bytes</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>   <span class="n">s</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Get the hex payload</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="n">decode_base58</span><span class="p">(</span><span class="n">address</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Print out the first 20 bytes of the sha256 hash</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">payload</span><span class="o">[</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="mi">41</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Grab the sending address from the <a href="https://blockchain.info/tx/68cbd46b5b1b5ac4ce3369c04a0366da733182b6a7b329317aa1c87feb46f96d">transaction</a>:</p>

<pre><code>1BESV3iP1x1HAMDGhsYiQE3do6aiywGZ3K
</code></pre>

<p>Run the script using this address:</p>

<pre><code>./address-to-hash.rb 1BESV3iP1x1HAMDGhsYiQE3do6aiywGZ3K 
703bf01d7df0a110c9b2ce1e8984f545831bffaa
</code></pre>

<p>As you can see, the resulting hash matches the sha256 hash of key.json.asc generated in the previous post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blockchain Identity]]></title>
    <link href="http://jrruethe.github.io/blog/2015/02/28/blockchain-identity/"/>
    <updated>2015-02-28T15:24:25-05:00</updated>
    <id>http://jrruethe.github.io/blog/2015/02/28/blockchain-identity</id>
    <content type="html"><![CDATA[<p>I stumbled upon Christopher Ellis&#8217; <a href="https://github.com/MrChrisJ/World-Citizenship">&ldquo;World Citizenship&rdquo; Blockchain ID</a> concept and was immediately intrigued. His idea is to create proof of an individual&rsquo;s existence by storing their PGP identity in the blockchain.</p>

<p>The trick is that the blockchain acts as an immutable database that includes full history tracking, meaning that a record can be proven to exist in some state at some time. These services are similar to this concept:</p>

<ul>
<li><a href="http://www.proofofexistence.com/about">Proof of Existence</a></li>
<li><a href="http://www.cryptograffiti.info/">Cryptograffiti</a></li>
<li><a href="https://www.btproof.com/">BTProof</a></li>
</ul>


<p>This post will detail how to create a Blockchain Identity.</p>

<h2>Requirements</h2>

<p>To begin, you will need:</p>

<ul>
<li>GPG key with signing abilities</li>
<li>Bitcoin wallet with a small balance</li>
<li>Keybase.io account</li>
</ul>


<p>Keybase.io is currently alpha, and you need an invite to get an account, but you can probably snag an invite from Reddit (that&rsquo;s where I got mine).</p>

<p>I will be using Debian Linux for this tutorial. I recommend the following packages:</p>

<ul>
<li>gpg : For signing files</li>
<li>electrum : For managing bitcoins</li>
<li>ruby : For running the scripts below</li>
</ul>


<p>First you need to create a GPG key and an Electrum Bitcoin wallet. I won&rsquo;t dive into the details of how to create these in this post. The reason we are using Electrum is because it has the ability to choose the address to send funds from, unlike some other wallets. We will need to know this sending address later.</p>

<p>You also need to get a small amount of Bitcoin into your Electrum wallet (at least 0.0003 BTC)</p>

<h2>Gathering the Data</h2>

<p>Time to collect the data. Open up a text editor and create a Yaml file named key.yml</p>

<p>First, lets get the GPG key details. Run the following, substituting your UID:</p>

<pre><code>gpg --fingerprint jrruethe
pub   4096R/40B935FE 2014-06-14 [expires: 2015-06-14]
      Key fingerprint = 4F40 99F8 276B DBA5 475A  8446 4630 BEDC 40B9 35FE
uid                  Joseph Ruether &lt;jrruethe@gmail.com&gt;
</code></pre>

<p>Fill out your key.yml file like so:</p>

<pre><code>Name: Joseph Ruether
Email: jrruethe@gmail.com
Type: RSA
Size: 4096
Created: 2014-06-14
Fingerprint: 4F40 99F8 276B DBA5 475A 8446 4630 BEDC 40B9 35FE
</code></pre>

<p>Next, go to your Electrum wallet and pick an address that contains a small amount of funds. You will need at least 0.0003 BTC. Add this address to your yaml file:</p>

<pre><code>Address: 1LXWthRW8aqQSBddifWxwTDGPycT6Lom2Q
</code></pre>

<p>Go to <a href="https://blockchain.info">Blockchain.info</a> and find the latest block that has been added to the main chain. Add the block number and Merkle Root to your yaml file:</p>

<pre><code>Block: 345546
Merkle Root: ea31869aa04e3608450b45068b257ee396a6d2f6724f96593cd8d2c7f30a39d9
</code></pre>

<p>At this point, your yaml file has all of your GPG key metadata, the address you will use to store the data in the blockchain, and a random number that proves this entry could not have been created earlier in time.</p>

<h2>Preparing the Data</h2>

<p>Now we need to put this data into a standard, machine readable format and sign it. First, use the following script to convert your yaml file into a normalized json file:</p>

<figure class='code'><figcaption><span> (yaml-to-normalized-json.rb)</span> <a href='http://jrruethe.github.io/downloads/code/yaml-to-normalized-json.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># yaml-to-normalized-json.rb</span>
</span><span class='line'><span class="c1"># Copyright (C) 2015 Joe Ruether jrruethe@gmail.com</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c1"># it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c1"># the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c1"># (at your option) any later version.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c1"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c1"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c1"># GNU General Public License for more details.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c1"># along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;yaml&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1"># Add a snakecase function to the String class</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">snakecase</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/[:\-]/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">,</span> <span class="s2">&quot;_&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1"># Strip spaces and downcase</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">normalize</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/[: \-]/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1"># Check if a string is a hex value</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">is_hex?</span>
</span><span class='line'>      <span class="sr">/^[0-9A-F]+$/i</span> <span class="o">===</span> <span class="nb">self</span><span class="o">.</span><span class="n">normalize</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Load the yaml file</span>
</span><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Convert all keys to snakecase</span>
</span><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">[</span><span class="n">h</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="o">[</span><span class="n">k</span><span class="o">.</span><span class="n">snakecase</span><span class="p">,</span> <span class="n">v</span><span class="o">]</span> <span class="p">}</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Normalize all hex values</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span>
</span><span class='line'>   <span class="k">if</span> <span class="n">v</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">String</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">v</span><span class="o">.</span><span class="n">is_hex?</span>
</span><span class='line'>      <span class="n">h</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">normalize</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Sort the keys</span>
</span><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">[*</span><span class="n">h</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">flatten</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Pretty print</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">JSON</span><span class="o">.</span><span class="n">pretty_generate</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run it like so:</p>

<pre><code>./yaml-to-normalized-json.rb key.yml &gt; key.json
</code></pre>

<p>Then use GPG to clearsign this file:</p>

<pre><code>gpg --clearsign key.json
</code></pre>

<p>The result should look something like this:</p>

<figure class='code'><figcaption><span> (key.json.asc)</span> <a href='http://jrruethe.github.io/downloads/code/key.json.asc'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">-----BEGIN PGP SIGNED MESSAGE-----</span>
</span><span class='line'><span class="l-Scalar-Plain">Hash</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">SHA256</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">{</span>
</span><span class='line'>  <span class="s">&quot;address&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;1LXWthRW8aqQSBddifWxwTDGPycT6Lom2Q&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>  <span class="s">&quot;block&quot;</span><span class="p-Indicator">:</span> <span class="nv">345546</span><span class="p-Indicator">,</span>
</span><span class='line'>  <span class="s">&quot;created&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;2014-06-14&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>  <span class="s">&quot;email&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;jrruethe@gmail.com&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>  <span class="s">&quot;fingerprint&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;4f4099f8276bdba5475a84464630bedc40b935fe&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>  <span class="s">&quot;merkle_root&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;ea31869aa04e3608450b45068b257ee396a6d2f6724f96593cd8d2c7f30a39d9&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>  <span class="s">&quot;name&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;Joseph</span><span class="nv"> </span><span class="s">Ruether&quot;</span><span class="p-Indicator">,</span>
</span><span class='line'>  <span class="s">&quot;size&quot;</span><span class="p-Indicator">:</span> <span class="nv">4096</span><span class="p-Indicator">,</span>
</span><span class='line'>  <span class="s">&quot;type&quot;</span><span class="p-Indicator">:</span> <span class="s">&quot;RSA&quot;</span>
</span><span class='line'><span class="p-Indicator">}</span>
</span><span class='line'><span class="l-Scalar-Plain">-----BEGIN PGP SIGNATURE-----</span>
</span><span class='line'><span class="l-Scalar-Plain">Version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">GnuPG v2</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">iQEcBAEBCAAGBQJU8dS0AAoJEB7MsgHDevApMCEH/3yFMcNErb92AtEdwShsvb1v</span>
</span><span class='line'><span class="l-Scalar-Plain">IVWxL4aTqrs8AD7CxHEUNhxcZ56C2AyFW/8HkOMSCpbq9wG4Jxk8pohIiyQKYfTl</span>
</span><span class='line'><span class="l-Scalar-Plain">TGGEYGELNDPgx/Pvlhb0jLBh8McnE8XdYseH2OXa3lfq4xOCqYKNiBOIcUmNZSar</span>
</span><span class='line'><span class="l-Scalar-Plain">9fk4i3/Z47oN1Nwg7NohsCkoqNo9JBKH3Dc3ec2mlLktl83TQ7OcOfBCazdOaHOR</span>
</span><span class='line'><span class="l-Scalar-Plain">+kk3WZb0wTyG+B6u5Kl8e0VJh+inDB83ol96hli/Ofhuvf29280VP3n784nDpLwY</span>
</span><span class='line'><span class="l-Scalar-Plain">vg6pukSc3STD3em4hYOYU7OuBydbRe27I5w//E6IwntPoOG+dahzNPJcpFfvD4A=</span>
</span><span class='line'><span class="l-Scalar-Plain">=/daq</span>
</span><span class='line'><span class="l-Scalar-Plain">-----END PGP SIGNATURE-----</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Sending the Data to the Blockchain</h2>

<p>Now that we have our signed data file, we want to send it to the blockchain. It is important to note that the blockchain will only contain the sha256 hash of your key.json.asc, therefore you need to keep the original data around for validation. Later on, we will create an identification card with a QR code containing the original data.</p>

<p>There is a clever trick we are going to use. If you look at the <a href="https://en.bitcoin.it/wiki/Technical_background_of_Bitcoin_addresses">Technical Background of Bitcoin Addresses</a>, you will see that the address is generated from the hash of the public key. We can replace that hash (at step 3) with the hash of our file before continuing to generate the address. By sending Bitcoins to the address we create, we store the file&rsquo;s hash in the blockchain. Of course, those coins will be lost forever, because the private key for that address does not exist. That is why we only send a small amount.</p>

<p>Now, use the following script to obtain the Bitcoin address that is associated with the hash of your signed key.json:</p>

<figure class='code'><figcaption><span> (file-to-address.rb)</span> <a href='http://jrruethe.github.io/downloads/code/file-to-address.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># file-to-address.rb</span>
</span><span class='line'><span class="c1"># Copyright (C) 2015 Joe Ruether jrruethe@gmail.com</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c1"># it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c1"># the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c1"># (at your option) any later version.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c1"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c1"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c1"># GNU General Public License for more details.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c1"># along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;digest&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Get the filename</span>
</span><span class='line'><span class="n">filename</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Hash the file</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="ss">Digest</span><span class="p">:</span><span class="ss">:SHA256</span><span class="o">.</span><span class="n">hexdigest</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span> <span class="n">filename</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Take only the first 20 bytes</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="nb">hash</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">39</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Prepend 0x00 to the hash</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="s2">&quot;00&quot;</span> <span class="o">+</span> <span class="nb">hash</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Calculate the checksum</span>
</span><span class='line'><span class="n">checksum</span> <span class="o">=</span> <span class="ss">Digest</span><span class="p">:</span><span class="ss">:SHA256</span><span class="o">.</span><span class="n">hexdigest</span> <span class="o">[</span><span class="nb">hash</span><span class="o">].</span><span class="n">pack</span><span class="p">(</span><span class="s2">&quot;H*&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">checksum</span> <span class="o">=</span> <span class="ss">Digest</span><span class="p">:</span><span class="ss">:SHA256</span><span class="o">.</span><span class="n">hexdigest</span> <span class="o">[</span><span class="n">checksum</span><span class="o">].</span><span class="n">pack</span><span class="p">(</span><span class="s2">&quot;H*&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Pull out the first 4 bytes</span>
</span><span class='line'><span class="n">checksum</span> <span class="o">=</span> <span class="n">checksum</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">7</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">encode_base58</span><span class="p">(</span><span class="n">hex</span><span class="p">)</span>
</span><span class='line'>   <span class="n">int_val</span> <span class="o">=</span> <span class="n">hex</span><span class="o">.</span><span class="n">to_i</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>   <span class="n">alpha</span> <span class="o">=</span> <span class="s2">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span>
</span><span class='line'>   <span class="n">base58_val</span><span class="p">,</span> <span class="n">base</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">alpha</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>   <span class="k">while</span> <span class="n">int_val</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">int_val</span><span class="p">,</span> <span class="n">remainder</span> <span class="o">=</span> <span class="n">int_val</span><span class="o">.</span><span class="n">divmod</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>      <span class="n">base58_val</span> <span class="o">=</span> <span class="n">alpha</span><span class="o">[</span><span class="n">remainder</span><span class="o">]</span> <span class="o">+</span> <span class="n">base58_val</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>   <span class="n">leading_zero_bytes</span>  <span class="o">=</span> <span class="p">(</span><span class="n">hex</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/^([0]+)/</span><span class="p">)</span> <span class="p">?</span> <span class="vg">$1</span> <span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">size</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>   <span class="p">(</span><span class="s2">&quot;1&quot;</span><span class="o">*</span><span class="n">leading_zero_bytes</span><span class="p">)</span> <span class="o">+</span> <span class="n">base58_val</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Generate the address</span>
</span><span class='line'><span class="n">address</span> <span class="o">=</span> <span class="n">encode_base58</span><span class="p">(</span><span class="nb">hash</span> <span class="o">+</span> <span class="n">checksum</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">address</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run it like this:</p>

<pre><code>./file-to-address.rb key.json.asc
1BESV3iP1x1HAMDGhsYiQE3do6aiywGZ3K
</code></pre>

<p>For some basic sanity checks, visit this website: <a href="http://lenschulwitz.com/base58">Base58 Decoder</a><br/>
Here you can validate that the Bitcoin address is legitimate, as well as decode the address to hex. Here is what I get:</p>

<pre><code>00703BF01D7DF0A110C9B2CE1E8984F545831BFFAA5556057E
</code></pre>

<p>Next, get the sha256 hash of key.json.asc:</p>

<pre><code>sha256sum key.json.asc 
703bf01d7df0a110c9b2ce1e8984f545831bffaa08042e78b470b3b1464faada  key.json.asc
</code></pre>

<p>Compare the two outputs to make sure they match:</p>

<pre><code>00 703BF01D7DF0A110C9B2CE1E8984F545831BFFAA 5556057E
   703bf01d7df0a110c9b2ce1e8984f545831bffaa 08042e78b470b3b1464faada
</code></pre>

<p>All that is left to do is send some bitcoin to that address. Use <a href="https://blockchain.info/">Blockchain.info</a> to capture the transaction details as proof of the file&rsquo;s existence:</p>

<p><a href="https://blockchain.info/tx/68cbd46b5b1b5ac4ce3369c04a0366da733182b6a7b329317aa1c87feb46f96d">Transaction: 68cbd46b5b1b5ac4ce3369c04a0366da733182b6a7b329317aa1c87feb46f96d</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cryptography Primer]]></title>
    <link href="http://jrruethe.github.io/blog/2014/10/25/cryptography-primer/"/>
    <updated>2014-10-25T14:48:28-04:00</updated>
    <id>http://jrruethe.github.io/blog/2014/10/25/cryptography-primer</id>
    <content type="html"><![CDATA[<p>Digital cryptography is used everywhere on your computer, both online and offline, to keep your secrets safe.
This is a simplified explanation of how cryptography accomplishes this task.</p>

<p>The three fundamental building blocks to modern cryptography are:</p>

<ul>
<li>Symmetric Encryption</li>
<li>Asymmetric Encryption</li>
<li>Hashes</li>
</ul>


<h2>Symmetric Encryption</h2>

<p>Symmetric encryption is the most intuitive form of encryption. The basic analogy is a lock and key. Keys are used together with an encryption algorithm to encrypt, or lock, a file. The resulting file is unreadable, and indistinguishable from random garbage data.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2014/10/25/cryptography-primer/01.png"><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>A key is just a long string of bits. Passwords supplied by a user are either used as a key directly, or are used to derive a key. With symmetric encryption, the same key is used to both encrypt and decrypt a file.</p>

<blockquote><p>All data is represented in binary, a string of 0&rsquo;s and 1&rsquo;s. Data alone is meaningless without structure; it all depends on how you interpret it. For example, the number <code>65</code> in binary can be represented like this: <code>01000001</code>, but if you interpret that value using the ASCII system, it becomes the letter <code>A</code>. The text <code>Hi</code> is encoded in ASCII as <code>0100100001101001</code>. If it were interpreted as two 8 bit numbers, it would be <code>(72, 105)</code>. If it were interpreted as one large number, it would be <code>18537</code>. Entire files containing text can also be interpreted as one very large number.</p></blockquote>

<p>An example of a symmetric encryption algorithm is AES: Advanced Encryption Standard. It is certified by the US government to secure secret documents.</p>

<p>Here is how symmetric encryption is performed via the GPG program on Linux, using a password of &lsquo;ABC&rsquo;:</p>

<pre><code>echo This is a secret | gpg --cipher-algo AES256 --symmetric | base64

jA0ECQMCjJkl5YwkaXFg0kQBjrmXBnt3sajSix4eihU/l+273UBtRabS7LFZ7Ln3R8ux0wzU
bm9IZUuAunUNnF2RYG3HC2qa7bNtlefb/Hbp+xtYjw==
</code></pre>

<p>To decrypt, simply repeat the same command, but backwards, using the same password of &lsquo;ABC&rsquo;:</p>

<pre><code>echo jA0ECQMCjJkl5YwkaXFg0kQBjrmXBnt3sajSix4eihU/l+273UBtRabS7LFZ7Ln3R8ux0wzU\
bm9IZUuAunUNnF2RYG3HC2qa7bNtlefb/Hbp+xtYjw== | base64 -d | gpg --cipher-algo AES256

gpg: AES256 encrypted data
gpg: encrypted with 1 passphrase
This is a secret
</code></pre>

<p>Symmetric encryption algorithms are fast and secure, even with a relatively small key size (128 &ndash; 256 bits). For this reason, they play an important role in secure communications. Their downfall, however, is key distribution; they are prone to a man-in-the-middle attack unless the keys are distributed on a separate medium.</p>

<h2>Man in the Middle attacks</h2>

<p>A man in the middle attack occurs when someone is intercepting your communication line by placing themselves in between you and the other person. This is different than just sniffing or eavesdropping, because an attacker is able to tamper with the communication line without either party knowing. For example, if Eve was performing a man in the middle attack on a conversation between Alice and Bob, Eve would be able to impersonate Bob from Alice&rsquo;s point of view, and impersonate Alice from Bob&rsquo;s point of view. Neither Alice nor Bob would be aware that they are talking to Eve instead of the other person. Eve can effectively lie to both parties.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2014/10/25/cryptography-primer/02.png"><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>To combat this attack, encryption can be used. If Alice and Bob had the same key, they could communicate securely by encrypting their messages before sending them to the other, and decrypting them upon receipt. This prevents Eve from reading the actual message. However, in order to communicate, they need to have the same key. Either Alice or Bob can generate the key, but the difficulty is transferring the key to the other without Eve intercepting it. The only secure solution is for them to pre-share the key across some other medium, such as a phone call or in person. This exchange is cumbersome, as it must be done before each session. In addition, the key cannot be reused across different sessions; If Eve were to ever obtain the key to a single session, she could also infiltrate all the other sessions, including recordings of past sessions.</p>

<h2>Asymmetric Encryption</h2>

<p>Asymmetric encryption is different from symmetric encryption in that it utilizes two keys; one key performs the encryption while the other performs the decryption. The key that performs the encryption cannot be used to perform the decryption; the paired key must be used. It is important to note that either key can perform the encryption step, and the other key will undo it.</p>

<p>This behavior has some very useful implications. One of the keys can be selected to be the <code>private</code> key, which must be kept secure such that no one else knows it. The remaining key will become the <code>public</code> key, which can be posted online, sent to others, etc. This method is known as <code>public key cryptography</code>, and it solves the key distribution problem encountered with symmetric encryption.</p>

<p>Alice will generate a key-pair and keep the private key to herself, while sending her public key to Bob. Likewise, Bob will generate his key-pair and send his public key to Alice while keeping his private key to himself. When Alice wants to talk to Bob, she can use Bob&rsquo;s public key to perform the encryption. Only Bob will be able to decrypt the message, since he is the only one who has the private key. Bob can then respond to Alice by using her public key to encrypt his response.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2014/10/25/cryptography-primer/03.png"><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p>Asymmetric encryption algorithms, such as RSA, are slow and require much larger keys to achieve the same security that AES provides (2048 &ndash; 4096 bits). This means that using asymmetric encryption for an entire conversation is inefficient. For this reason, a hybrid approach is used. A user will generate a random symmetric key intended for one time use, called a session key, and encrypt it using the public asymmetric key of the recipient. The receiver will use their private asymmetric key to obtain the symmetric session key. Now that both users have the same symmetric key, they can use symmetric encryption to communicate.</p>

<p>But how does Bob know that the key actually came from Alice? What if Eve was the one who actually sent him the session key? After all, Bob&rsquo;s public key is public; anyone can use it. We need to introduce the 3rd fundamental technology first.</p>

<h2>Hashes</h2>

<p>Unlike the other two, a hash is not an encryption method. Hashes are also known as message digests or fingerprints. They are one-way functions, meaning that they cannot be reversed or undone; given the output, it is impossible to derive the input.</p>

<p>Any two messages that contain the exact same data will produce the exact same hash, or fingerprint. Similarly, if even a single bit is different, the hash will be completely different. Hash algorithms employ an avalanche technique such that a small change to the input produces a large change in the output. Finally, hash algorithms always produce the same size output regardless of the size of the input.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2014/10/25/cryptography-primer/04.png"><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p>

<p>Here are some examples, using the SHA-256 algorithm (Secure Hash Algorithm):</p>

<pre><code>echo This is a message | sha256sum

6afa89a2ed3ff1f33150c8c897c3c49775b4fb91fa923b790533a0f26c956a88

# Notice that a single letter difference completely changes the output
echo This is b message | sha256sum

0c9bf9d4f05d174783676acbdd50ffde59bffa5f17eaf0557500c3070678ff5b
</code></pre>

<p>Hashes are very useful. They are often used as checksums to ensure that a message was transferred without getting corrupted. For example, a website offering a download may also list its hash. After the user downloads the file, they can recalculate the hash. If their result matches the website&rsquo;s listing, they can be assured that they have the exact same file that the website served; there was no corruption during the download.</p>

<p>Hashes are also used to hide passwords. When you sign up for a website and enter a password, the website will take the hash of your password and store the hash. Later on when you want to log in, you enter your password again. The website takes the hash again and compares it to their stored hash. If the two hashes match, you are allowed to log in. If the website gets hacked and their database of hashes is retrieved, the attacker cannot get your password (because hashes cannot be reversed).</p>

<p>It is important to choose a strong password, however. Attackers can still attempt to retrieve your password by performing a dictionary attack. An attacker will take a large dictionary of words and calculate their hashes. They then compare their list of hashes to the list of hashes retrieved from the website. If they find a match, they can look back at their input list to determine which word produced the hash. This is a brute force method for obtaining your password. It is important to see that it isn&rsquo;t that the hash was reversed, rather that multiple inputs were tried until the desired output was found. There are protections against this type of attack, such as salting, but that is out of the scope of this primer.</p>

<h2>Digital Signatures</h2>

<p>Now, back to our previous question; How can Bob be assured that a message came from Alice? Because of the way asymmetric encryption works, Alice can also encrypt a message using her own private key. The resulting cyphertext can be decrypted by anyone, since the corresponding public key is publicly available. However, the cyphertext could only have been created by Alice, because she is the only one who has the private key. This is called a digital signature; Alice <em>signs</em> a message by encrypting it with her private key.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2014/10/25/cryptography-primer/05.png"><sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p>

<p>Because asymmetric encryption keys are so large (which causes the resulting cyphertext to be large), it is not practical to encrypt an entire message, especially if that message is large. Instead, the hash of the message is encrypted, and the message itself is sent in plaintext (unencrypted). Anyone can read the message and compute it&rsquo;s hash. Then, they use Alice&rsquo;s public key to decrypt the signature connected to the message to obtain the hash that Alice encrypted. If the two hashes match, then the message was not tampered with, and the user can be certain that the message originated from Alice.</p>

<h2>Secure Communication</h2>

<p>Putting these concepts together, here is how secure communication can be established:</p>

<p>Alice and Bob each generate asymmetric key pairs. They take a hash of their public key and encrypt it with their private key. They then attach the result to the public key itself. This is called self-signing their public key.</p>

<p>Alice and Bob share their public keys with each other. One of them generates a random session key and encrypts it with their private key. They take the result and encrypt it with the public key of the recipient.</p>

<p>The receiver uses their private key to decrypt the message, and use the sender&rsquo;s public key to decrypt the result to obtain the random session key. The sender is assured that only the intended receiver is able to obtain the key, and the receiver is assured that only the expected sender could have sent it. From here, they can establish a secure channel using symmetric encryption with the session key. Any eavesdropper on the exchange would not be able to gain access to the session key, and thus could not listen in on the secure channel.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2014/10/25/cryptography-primer/06.png"><sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></p>

<p>However, there is still one thing missing which makes this communication vulnerable to a man in the middle attack. If Eve is able to tamper with the initial handshake, where the public keys are exchanged, she could pass fake public keys to each side. Alice would think that she received Bob&rsquo;s public key, when in fact she received Eve&rsquo;s public key. Her entire communication would be with Eve directly, who is impersonating Bob, but is also passing the messages to Bob after reading them. Neither is aware that this is happening.</p>

<p>In other words, you can securely communicate with someone and be assured that no one else can eavesdrop, but you cannot be certain about who you are actually communicating with.</p>

<p>The signatures on the keys don&rsquo;t give any additional information on their own; they only claim that the holder of the private key trusts the public key. The missing piece to the security is linking an identity to the public key, so you know which key belongs to who. Once you can trust that you are securely communicating with the correct person, you win!</p>

<h2>Digital Certificates</h2>

<p>A digital certificate is an identity linked to a public key, and signed by someone trustworthy. An identity in this case can be something as simple as a name or email address, or it can be as complicated as a photo of a license / passport or fingerprints. It is a means of uniquely identifying and verifying an individual or organization.</p>

<p>A digital certificate links an identity to a public key. Certificates can be signed with many different signatures, as well as a self-signature (the owner of the public key). Certificates play an important role in creating a network of trust. Remember, anyone can create an identity and public key, and they can sign their own certificate. This means that while the link between the public key and identity is real, the identity itself could be fabricated. Trust in a certificate is established by obtaining signatures from trustworthy entities.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2014/10/25/cryptography-primer/07.png"><sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup></p>

<p>There are currently two models for establishing trust in digital certificates. One of them is a hierarchial centralized method which uses a <code>root certificate authority</code> that must be completely trusted, while the other is a decentralized <code>web of trust</code> that gives each person full control of their trust.</p>

<h2>Root Certificate Authority</h2>

<p>This is a centralized system that focuses completely around the root authority. The root authority is responsible for performing background checks to verify an identity, and signs off on the certificate if the identity is legitimate. Root authorities can sign the certificates of sub-authorities, which in turn are granted the same responsibilities and signing powers. Anyone can request that an authority sign their certificate, which usually involves payment of a fee, to grant the trust of the root authority to their certificate.</p>

<p>If you can find a chain of signatures from a certificate back to the root authority, and you trust the root authority, then you can trust the certificate. This trust model is all or nothing, meaning that as long as the root authority is trusted, every chain originating at the root authority is trusted regardless of the number of links.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2014/10/25/cryptography-primer/08.png"><sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup></p>

<p>Most of the internet works using this model. Your web browser comes with preinstalled certificates for the major root authorities, which sign the certificates of all the websites you interact with. There are flaws with this model, however. Security is a &ldquo;weakest link&rdquo; type of problem; A chain ending at the root authority doesn&rsquo;t mean that the entire chain is solid. It could be that a sub-authority does not properly perform its background checks, resulting in that sub-authority being the weakest link. If that sub-authority signs a fabricated certificate, there is no way for you to know not to trust it. The owner of the certificate could masquerade as their false identity and impersonate a target.</p>

<p>In addition to this, well funded organizations such as the NSA can take control of a root authority and sign whichever certificates they want, essentially breaking the entire model.</p>

<h2>Web of Trust</h2>

<p>To avoid the single point of failure present in the centralized hierarchial model, a different model known as the <code>web of trust</code> was created. This model is decentralized and gives the control back to the individuals. The web of trust involves each person performing their own level of identity checking before signing off on a certificate. In effect, they become their own root authority for themselves. If you are able to verify an identity one time and sign off on it, you can trust that identity from that point forward. This method involves more manual work, making it a little less convenient. It is also more probabilistic than the black/white hierarchial model, in that trust is measured in the quantity of signatures rather then the presence of a single signature. The upside is that the only single point of failure is yourself, as you get to define the trust levels of each certificate you interact with.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2014/10/25/cryptography-primer/09.png"><sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup></p>

<p>In the web of trust model, you are responsible for verifying that the identity of the certificate matches the identity of the certificate holder. This is typically done in person or over some other medium besides the one being used with the certificate (such as the phone). You would ask the person to present their certificate as well as some reputable identification, such as a passport or drivers license, and sign the certificate if the identities match. Chains are formed transitively by signing a certificate when someone has signed your own certificate.</p>

<p>For example, if Alice signs Bob&rsquo;s certificate, and Bob sign&rsquo;s Carol&rsquo;s certificate, then Alice can reasonably trust that Carol&rsquo;s certificate is authentic. Even though she hasn&rsquo;t necessarily met Carol, Alice trusts that Bob performed the necessary identity checks. Alice&rsquo;s trust in Carol can be increased if there are other chains that link the two together. If Alice also signed Dave&rsquo;s certificate, and Dave also signed Carol&rsquo;s certificate, then Carol has two signatures from people that Alice trusts, further increasing the odds that Carol really is who she says she is (from Alice&rsquo;s point of view).</p>

<p>It is important to note that it isn&rsquo;t the number of signatures that determines trust, it is the number of chains. For example, Eve can create 100 fake identities and have them all sign her certificate, but that doesn&rsquo;t mean that Eve can be trusted.</p>

<p>In this model, each additional link degrades trust; A certificate 2 steps away can typically be trusted more than a certificate 5 steps away. If everyone is creating chains from themselves to everyone else, a web of trust is formed, hence the name.</p>

<h2>Trust</h2>

<p>Secure communication is possible if you can establish trust in the other person&rsquo;s identity. How does one go about establishing this trust? I will cover this in a future post.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>https://msdn.microsoft.com/en-us/library/ff647097.aspx <a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>http://www.cs.ucla.edu/classes/winter13/cs111/scribe/17b/ (http://fearlessweb.trendmicro.com/2012/tips-and-tricks/what-are-man-in-the-middle-attacks-and-how-can-i-protect-myself-from-them/)<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>https://msdn.microsoft.com/en-us/library/ff647097.aspx<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>http://computersecuritypsh.wikia.com/wiki/File:Hash_Function.png<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>http://oz.stern.nyu.edu/fall99/readings/security/<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>http://www.embedded.com/design/safety-and-security/4230829/2/Securing-your-apps-with-Public-Key-Cryptography&mdash;-Digital-Signature<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p>https://commons.wikimedia.org/wiki/File:Digital_Signature_diagram.svg<a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
<li id="fn:8">
<p>http://www.hill2dot0.com/wiki/index.php?title=Image:G1662_CA-Hierarchies-and-Cr.jpg<a href="#fnref:8" rev="footnote">&#8617;</a></p></li>
<li id="fn:9">
<p>http://books.gigatux.nl/mirror/securitytools/ddu/ch09lev1sec1.html<a href="#fnref:9" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PDF Generation With Ruby and Pocket]]></title>
    <link href="http://jrruethe.github.io/blog/2014/08/16/pdf-generation-with-ruby-and-pocket/"/>
    <updated>2014-08-16T23:14:33-04:00</updated>
    <id>http://jrruethe.github.io/blog/2014/08/16/pdf-generation-with-ruby-and-pocket</id>
    <content type="html"><![CDATA[<p>One thing I like to do when I&rsquo;m browsing the internet is save each interesting page I come across. I do this by printing the page to a PDF. This is better than saving a bookmark because articles on the internet have a tendency to go down when you need them most. In addition, I use <a href="http://getpocket.com/a/queue/list/">Pocket</a> to save articles while browsing with my phone or work computer, where I cannot print to PDF. It is easy to export your Pocket articles to an HTML file, and it is easy to parse that file to extract the links.</p>

<p>First, we need some things.</p>

<pre><code>sudo apt-get install ruby cups-pdf wkhtmltopdf xdg-utils pcmanfm recoll
gem install pdfkit nokogiri
</code></pre>

<p>I use LXDE, and <code>xdg-open</code> forwards requests though <code>pcmanfm</code>, so it needs to be installed. For indexing the PDFs, <code>recoll</code> is very useful and allows for quickly searching for content.</p>

<p>I wrote a small ruby script to take a URL and generate a PDF. It uses PDFKit under the hood, which in turn uses <code>wkhtmltopdf</code> to do the PDF generation. <code>wkhtmltopdf</code> has a tendency to get hung up on some pages, especially if Java is involved, and the normal ruby call to PDFKit will freeze until <code>wkhtmltopdf</code> is killed. I found out the hard way that the standard <code>Timeout</code> module in ruby isn&rsquo;t enough; the <code>wkhtmltopdf</code> process needs to be killed directly. I do this by using a timer thread and a small <code>killall</code> function:</p>

<pre><code># Kill a process by name
def killall(name)

   # For each process
   Dir['/proc/[0-9]*/cmdline'].each do |p|

      # Check to see if the command line invocation matches the given name
      if File.read(p).match name

         # Grab the PID
         pid = p.split('/')[2].to_i

         # Kill the process
         Process.kill("SIGKILL", pid)
      end
   end
end
</code></pre>

<p>Note that this will only work on Linux, since it is crawling the Kernel&rsquo;s <code>proc</code> filesystem.<br/>
With that function available, here is a small PDF generation class as a wrapper around PDFKit:</p>

<pre><code>require 'pdfkit'

# A wrapper around PDFKit that generates PDFs from URLs
# It uses wkhtmltopdf under the hood.
# wkhtmltopdf can sometimes hang, this wrapper takes care of that
# so PDF generation can be autmomated
class PdfGenerator

   def initialize
      PDFKit.configure do |config|
         config.default_options[:load_error_handling] = 'ignore'
         config.default_options[:load_media_error_handling] = 'ignore'
      end
   end

   # Convert a webpage to a PDF file
   # Returns true if successful, false if there was an error or a timeout
   def from_url(url, output_filename)

      retval = true

      # Run the PDF generation in a thread
      # so we can kill it after some amount of time
      process_thread = Thread.new do
         begin
            puts "Processing " + url
            kit = PDFKit.new(url)
            kit.to_file(output_filename)
         rescue
            puts "Failed to process " + url
            retval = false
         end
      end

      # Start a timer to kill the process thread
      # if it takes too long
      timeout_thread = Thread.new do
         sleep 60
         if process_thread.alive?
            killall "wkhtmltopdf"
            process_thread.kill
            puts "Timed out"
            retval = false
         end
      end

      # Wait for the process thread to end
      process_thread.join
      timeout_thread.kill

      if retval
         puts "Successfully processed " + url
      end

      return retval

   end

end
</code></pre>

<p>The next step is to parse out the Pocket export file to get the title and links. Here is some code for that:</p>

<pre><code>require 'nokogiri'

# Create a PDF generator
pdf_generator = PdfGenerator.new

# Open the pocket export file
page = Nokogiri::HTML(open("ril_export.html"))

# Parse out the links
links = page.css('a')

# For each link
links.each do |link|

   title = link.text
   url = link['href']

   # Sanitize the title to be a valid filename
   title.gsub!(/[^0-9A-Za-z.\-]/, '_')
   title.downcase!

   # Specify the output filename using the title
   output_filename = title + '.pdf'

   # Skip any files that have already been processed
   if File.exist?(output_filename)
      next
   end

   # Generate the PDF
   result = pdf_generator.from_url(url, output_filename)

end
</code></pre>

<p>The end result will be that all your Pocket articles will be printed to PDF! Very nice and easy to automate.</p>

<p>But what to do with all these PDFs? Recoll is a simple indexer that can quickly search them for the content you are looking for. After a large collection of links have been built up, you will have your own little offline internet database at your fingertips.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graphical Bookmarks in Chrome]]></title>
    <link href="http://jrruethe.github.io/blog/2014/08/09/graphical-bookmarks-in-chrome/"/>
    <updated>2014-08-09T18:25:50-04:00</updated>
    <id>http://jrruethe.github.io/blog/2014/08/09/graphical-bookmarks-in-chrome</id>
    <content type="html"><![CDATA[<p>I have a large amount of bookmarks, and I find that even with good organization, I tend to lose them in the bookmark bar. For me it is much easier to find that bookmark I am looking for if I can see a thumbnail of the page. These graphical bookmarks are known as &ldquo;speed dials&rdquo;, and there is a Chrome extension that implements it very well: Speed Dial 2</p>

<p>One of the things I did not like about Speed Dial 2 was manually entering each bookmark, then selecting a thumbnail for it. The import / export format was very confusing to figure out, and I decided that automating the whole thing would be a big timesaver in the end. So I wrote a Ruby script to do just that.</p>

<p>Requirements:</p>

<ul>
<li>Google Chrome / Chromium</li>
<li>Ruby</li>
<li>Speed Dial 2 extension <a href="https://chrome.google.com/webstore/detail/speed-dial-2/jpfpebmajhhopeonhlcgidhclcccjcik">here</a></li>
<li>Speed Dial conversion script <a href="https://github.com/jrruethe/speeddial">here</a></li>
<li>A bookmarks.yml file, as described below</li>
</ul>


<p>The format of the file is pretty simple. There can be multiple groups that represent tabs on the Chrome home screen. Each group can have multiple bookmarks that represent dials on the home screen. The dial thumbnail will be automatically generated from a screenshot of that URL, but it can be manually changed later. It should be noted that whichever group appears first in the file will be the default group that is selected when a new Chrome home page is opened.</p>

<pre><code>---
Group:
 - Title : URL
 - Title : URL
...
</code></pre>

<p>Included in the repository is my bookmarks.yml file, which includes multiple useful bookmarks for various tasks.</p>

<h2>Put it all together</h2>

<p>Run the conversion script:</p>

<pre><code>./speeddial.rb --input bookmarks.yml --output bookmarks.json
</code></pre>

<p>On the Chrome home page, which is now Speed Dial 2, select Options &ndash;> More Options &ndash;> Import / Export &ndash;> Import Settings. Copy the contents of <code>bookmarks.json</code> and paste it into the box. Click &ldquo;Import these settings&rdquo; and save. The initial load will take a moment, and you will see an error like the following:</p>

<pre><code>Something unexpected happened: could not execute statement due to a constraint failure (19 constraint failed)
</code></pre>

<p>The error can be safely ignored (it may appear a few times). Once the initial load is complete (you may need to refresh), subsequent loads will be much faster, and will not throw errors.</p>

<p>Sometimes the thumbnails are not generated correctly. For those, you can simply right click and edit to change the thumbnail. If you see &ldquo;Generating thumbnail&hellip;&rdquo;, then simply refresh the screen at a later time. The thumbnail generation is done using a third-party web service, which queues up requests, so thumbnails should appear at a later time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enhanced Corefile Metadata]]></title>
    <link href="http://jrruethe.github.io/blog/2014/07/25/enhanced-corefile-metadata/"/>
    <updated>2014-07-25T22:26:50-04:00</updated>
    <id>http://jrruethe.github.io/blog/2014/07/25/enhanced-corefile-metadata</id>
    <content type="html"><![CDATA[<p>At the following Github repository you will find a ruby script to produce enhanced corefile metadata upon a core dump. <br/>
It hooks into the kernel&rsquo;s corepattern mechanism to accept the core dump via stdin and extract information from the process before it is killed. It then runs GDB to produce a backtrace and grab the register contents.</p>

<p><a href="https://github.com/jrruethe/corefile">Enhanced Corefile Metadata</a></p>

<p>Here is a list of metadata that is written out on every core dump:</p>

<ul>
<li>Binary that crashed</li>
<li>Corefile from the crash</li>
<li>Signal causing the crash</li>
<li>Original filepath</li>
<li>Original file size</li>
<li>MD5 checksum of the binary</li>
<li>MD5 checksum of the corefile</li>
<li>Creation, modification, and access times of the binary</li>
<li>Hostname and PID of the crashed process</li>
<li>User, group, and permissions of the crashed process</li>
<li>The setuid bit</li>
<li>Working directory of the process</li>
<li>Invoked command line parameters</li>
<li>Stack trace</li>
<li>Memory Map</li>
<li>Environment variables</li>
<li>Frame information</li>
<li>Register states</li>
</ul>


<p>This script is very useful for bug reports as well as devloping buffer overflow exploits.
To install, save <code>corefile.rb</code> somewhere. Edit <code>/etc/sysctl.conf</code> and set the <code>kernel.core_pattern</code> parameter as follows:</p>

<pre><code>kernel.core_pattern=|/path/to/corefile.rb %e %p %u %g %h %s
</code></pre>

<p><em>Take note of the pipe character!</em></p>

<p>If you want to test it out, simply crash something.<br/>
Make sure you use <code>ulimit -c unlimited</code> or have corefiles enabled in <code>sysctl.conf</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Bittorrent Sync on Debian]]></title>
    <link href="http://jrruethe.github.io/blog/2014/07/06/installing-bittorrent-sync-on-debian/"/>
    <updated>2014-07-06T14:51:39-04:00</updated>
    <id>http://jrruethe.github.io/blog/2014/07/06/installing-bittorrent-sync-on-debian</id>
    <content type="html"><![CDATA[<p>Bittorrent Sync is an awesome folder synchronization tool that uses the Bittorrent protocol. It is simple and fast alternative to Dropbox. Best of all, the files are only ever stored on machines <em>you</em> choose; there is no &ldquo;cloud&rdquo; or third party servers.</p>

<p>I use Bittorrent Sync to keep all my machines up to date with eachother, share files, and perform backups. It works on Windows, Linux, and Android. Unfortunately, it is not open source, however I am still a fan of this software.</p>

<p>There is no official installer for Bittorrent Sync on Debian, but the steps to get it working are pretty simple.<br/>
First you need to go get the software:</p>

<ul>
<li><a href="http://www.bittorrent.com/sync/downloads/complete/os/i386">32 Bit</a></li>
<li><a href="http://www.bittorrent.com/sync/downloads/complete/os/x64">64 Bit</a></li>
</ul>


<p>I suggest unpacking it to /opt/btsync:</p>

<pre><code>mkdir /opt/btsync
mv btsync_x64.tar.gz /opt/btsync
cd /opt/btsync
tar xzvf ./btsync_x64.tar.gz
</code></pre>

<p>Next, create a configuration file:</p>

<pre><code>./btsync --dump-sample-config &gt; btsync.conf
</code></pre>

<p>You need to make one change to the config file, and that is the storage path.<br/>
Look for where it says <code>/home/user/.sync</code> and change <code>user</code> to your username.<br/>
You might be interested in adding a password to the Web UI, which is where you will do all your folder management from. You can find thhat setting near the bottom of the config file.</p>

<p>Next, you want to create an init script. Copy the following to <code>/etc/init.d/btsync</code>:</p>

<pre><code>#! /bin/sh
# /etc/init.d/btsync
#

# Carry out specific functions when asked to by the system
case "$1" in
start)
    # /opt/btsync/btsync --config /opt/btsync/btsync.conf # Run as root
    /bin/su user -c '/opt/btsync/btsync --config /opt/btsync/btsync.conf' # Run as user
    ;;
stop)
    killall btsync
    ;;
*)
    echo "Usage: /etc/init.d/btsync {start|stop}"
    exit 1
    ;;
esac

exit 0
</code></pre>

<p>Finally, run the following commands to finish the installation:</p>

<pre><code>chmod 755 /etc/init.d/btsync
update-rc.d btsync defaults
mkdir ~/.sync
/etc/init.d/btsync start
</code></pre>

<p>Thats it! Bittorrent Sync is installed, and will automatically run every time your machine boots.<br/>
You can access the Web UI at 127.0.0.1:8888</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Terminator From Nautilus]]></title>
    <link href="http://jrruethe.github.io/blog/2014/07/06/open-terminator-from-nautilus/"/>
    <updated>2014-07-06T14:22:25-04:00</updated>
    <id>http://jrruethe.github.io/blog/2014/07/06/open-terminator-from-nautilus</id>
    <content type="html"><![CDATA[<p>This is just a little trick to get the ability to open a Terminator terminal at any location from Nautilus by right clicking on a folder.</p>

<p>First install the dependencies:</p>

<pre><code>sudo apt-get install nautilus-open-terminal terminator
</code></pre>

<p>Next, <em>uninstall</em> <code>gnome-terminal</code>:</p>

<pre><code>sudo apt-get remove gnome-terminal
</code></pre>

<p>Finally, create a symlink to <code>terminator</code> from <code>gnome-terminal</code>:</p>

<pre><code>sudo ln -s /usr/bin/terminator /usr/bin/gnome-terminal
</code></pre>

<p>All done! Now you can right click on any folder in Nautilus and open a terminator window.<br/>
The reason the symlink is needed is because <code>nautilus-open-terminal</code> is hardcoded to use <code>gnome-terminal</code> by default, but <code>terminator</code> is much better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging With Octopress]]></title>
    <link href="http://jrruethe.github.io/blog/2014/07/05/blogging-with-octopress/"/>
    <updated>2014-07-05T20:51:27-04:00</updated>
    <id>http://jrruethe.github.io/blog/2014/07/05/blogging-with-octopress</id>
    <content type="html"><![CDATA[<h3>Before you continue</h3>

<p>Grab all the dependencies:</p>

<pre><code>sudo apt-get install ruby bundler git  
sudo gem install rake --version 0.9.2.2
git clone git://github.com/imathis/octopress.git blog  
cd blog  
bundle install  
</code></pre>

<p>You may have a newer <code>rake</code> installed on your machine. Octopress requires version 0.9.2.2, so we need to make sure we use that version.</p>

<pre><code>alias rake="rake _0.9.2.2_"
</code></pre>

<hr />

<h3>Starting Fresh</h3>

<p>Use these instructions if you are creating a blog for the first time.</p>

<ol>
<li><p>Install the blog</p>

<pre><code>rake install  
</code></pre></li>
<li><p>Create the Github repository</p>

<p>Go to <a href="https://github.com/repositories/new">Github</a>, create a new repository of the format <code>username.github.io</code></p></li>
<li><p>Set up deployment to Github Pages</p>

<pre><code>rake setup_github_pages
rake generate
rake deploy
</code></pre></li>
<li><p>Commit the source</p>

<pre><code>git add .
git commit -m 'your message'
git push origin source
</code></pre></li>
<li><p>Add some customizations</p>

<p>I personally use the following third party plugins:</p>

<ul>
<li><a href="https://github.com/PartTimeLegend/octopress-bitcoin-donation-aside">Bitcoin</a> : Add a QR code for Bitcoin Donations</li>
<li><a href="https://github.com/aycabta/octopress-file-binder">File Binder</a> : Easily attach an image to a post</li>
<li><a href="https://github.com/sailor79/Octopress-dynamic-QR-Code-aside">QR Codes</a> : Add QR codes for mobile navigation and sharing</li>
<li><a href="https://github.com/mguentner/octolayer">Octolayer</a> : Embed maps into posts</li>
<li><a href="https://github.com/optikfluffel/octopress-responsive-video-embed">Responsive Video Embed</a> : Embed Youtube videos into posts</li>
</ul>
</li>
<li><p>Sign up for <a href="https://disqus.com">Disqus</a></p></li>
<li><p>Configure your _config.yml file</p>

<p>Set the following options:</p>

<ul>
<li>URL</li>
<li>Title</li>
<li>Subtitle</li>
<li>Author</li>
</ul>


<p>Also scroll down to the bottom and set up the following sections:</p>

<ul>
<li>Github</li>
<li>Twitter</li>
<li>Disqus</li>
</ul>
</li>
<li><p>Ready to go. Jump down to &ldquo;Creating a post&rdquo;</p></li>
</ol>


<hr />

<h3>Continuing from an existing repository</h3>

<p>Use these instructions if you are continuing a blog that has already been created.</p>

<ol>
<li><p>Install the dependencies</p>

<pre><code>sudo apt-get install ruby bundler git ruby-gsl
sudo gem install rake --version 0.9.2.2
</code></pre></li>
<li><p>Clone the repository</p>

<pre><code>git clone -b source git@github.com:username/username.github.io.git blog
</code></pre></li>
<li><p>Install the octopress dependencies</p>

<pre><code>bundle install
</code></pre></li>
<li><p>Set up Github Pages</p>

<pre><code>rake setup_github_pages
</code></pre></li>
<li><p>Sync the deployment</p>

<pre><code>$ cd _deploy/
$ git pull origin master
$ git add index.html
$ git commit -m 'Deployment'
</code></pre></li>
<li><p>Ready to go. Jump down to &ldquo;Creating a post&rdquo;</p></li>
</ol>


<hr />

<h3>Creating a post</h3>

<p>To create a new post:</p>

<pre><code>rake new_post["title"]
</code></pre>

<p>Then you can preview your work:</p>

<pre><code>rake generate
rake preview
</code></pre>

<p>Open your browser to <code>127.0.0.1:4000</code> and make sure your page looks the way you want.<br/>
To finalize your changes:</p>

<pre><code>git add source/_posts/date-title.markdown
git commit -m 'Message'
git push origin source
rake deploy
</code></pre>

<p>Next, you want to make sure that you re-pull after the deployment is complete, or you will run into problems when creating your next post:</p>

<pre><code>git pull
cd _deploy/
git pull
cd -
</code></pre>

<p>Go to <code>username.github.com</code> and check out your page.</p>

<hr />

<h3>Scripting the difficult pieces</h3>

<p>If you look at the <a href="">source for my blog</a>, you will see a small number of scripts that make managing the blog even easier.</p>

<ul>
<li>install.sh : Simply clone the repo and run this to get everything set up</li>
<li>sync.sh : Synchronizes the repository with Github if a change was made on a different machine</li>
<li>new.sh Post Title : Make a new post with the specified title</li>
<li>preview.sh : Auto generate and start the web server for 127.0.0.1:4000</li>
<li>deploy.sh : Deploy to Github Pages</li>
</ul>


<hr />

<h3>Embedding Content</h3>

<h4>Code</h4>

<p>It is easy to embed any text file found in the source/downloads/code folder.<br/>
Octopress even supports syntax highlighting, and a handy download link.</p>

<pre><code>{% include_code lang:yaml filename.ext %}
</code></pre>

<p>lang can be any of the following:</p>

<ul>
<li>ruby</li>
<li>yaml</li>
<li>bash</li>
<li>python</li>
<li>json</li>
<li>c++</li>
</ul>


<p>For example:</p>

<pre><code>{% include_code lang:ruby address-to-hash.rb %}
</code></pre>

<p>Results in:</p>

<figure class='code'><figcaption><span> (address-to-hash.rb)</span> <a href='http://jrruethe.github.io/downloads/code/address-to-hash.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># address-to-hash.rb</span>
</span><span class='line'><span class="c1"># Copyright (C) 2015 Joe Ruether jrruethe@gmail.com</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c1"># it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c1"># the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c1"># (at your option) any later version.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c1"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c1"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c1"># GNU General Public License for more details.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c1"># along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Get the address</span>
</span><span class='line'><span class="n">address</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">decode_base58</span><span class="p">(</span><span class="n">base58_val</span><span class="p">)</span>
</span><span class='line'>   <span class="n">alpha</span> <span class="o">=</span> <span class="s2">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span>
</span><span class='line'>   <span class="n">int_val</span><span class="p">,</span> <span class="n">base</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">alpha</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>   <span class="n">base58_val</span><span class="o">.</span><span class="n">reverse</span><span class="o">.</span><span class="n">each_char</span><span class="o">.</span><span class="n">with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">char</span><span class="p">,</span><span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s1">&#39;Value not a valid Base58 String.&#39;</span> <span class="k">unless</span> <span class="n">char_index</span> <span class="o">=</span> <span class="n">alpha</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
</span><span class='line'>      <span class="n">int_val</span> <span class="o">+=</span> <span class="n">char_index</span><span class="o">*</span><span class="p">(</span><span class="n">base</span><span class="o">**</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>   <span class="n">s</span> <span class="o">=</span> <span class="n">int_val</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>   <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">bytesize</span><span class="o">.</span><span class="n">odd?</span> <span class="p">?</span> <span class="s1">&#39;0&#39;</span><span class="o">+</span><span class="n">s</span> <span class="p">:</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>   <span class="n">s</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span> <span class="k">if</span> <span class="n">s</span> <span class="o">==</span> <span class="s1">&#39;00&#39;</span>
</span><span class='line'>   <span class="n">leading_zero_bytes</span> <span class="o">=</span> <span class="p">(</span><span class="n">base58_val</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/^([1]+)/</span><span class="p">)</span> <span class="p">?</span> <span class="vg">$1</span> <span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>   <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;00&quot;</span><span class="o">*</span><span class="n">leading_zero_bytes</span><span class="p">)</span> <span class="o">+</span> <span class="n">s</span>  <span class="k">if</span> <span class="n">leading_zero_bytes</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>   <span class="n">s</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Get the hex payload</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="n">decode_base58</span><span class="p">(</span><span class="n">address</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Print out the first 20 bytes of the sha256 hash</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">payload</span><span class="o">[</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="mi">41</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also embed code content directly into a markdown file by enclosing it with codeblocks:</p>

<pre><code>{% codeblock lang:json %}

{
   "one" : "1",
   "two" : "2"
}

{% endcodeblock %}  
</code></pre>

<p>Results in:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="nt">&quot;one&quot;</span> <span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;two&quot;</span> <span class="p">:</span> <span class="s2">&quot;2&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is better than the normal 4-space indent because you get syntax highlighting and line numbers. Compare:</p>

<pre><code>{
   "one" : "1",
   "two" : "2"
}
</code></pre>

<hr />

<h4>Image</h4>

<p>Images can be embedded into posts. The image file must be placed in the same directory as the post, and have the same filename prefix. For example, the name of this file is <code>2014-07-05-blogging-with-octopress.markdown</code>, and the image below has the filename <code>2014-07-05-blogging-with-octopress_01.png</code>. The image is refered to by the name after the trailing <code>_</code>. In this case, the name is <code>01.png</code>.</p>

<p>To embed this image, use the tag like this:</p>

<pre><code>{% img center ./01.png %}
</code></pre>

<p>Which results in this<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>:
<img class="center" src="http://jrruethe.github.io/blog/2014/07/05/blogging-with-octopress/01.png"></p>

<hr />

<h4>Video</h4>

<p>Embedding a youtube video can be done by grabbing the video id from the url:<br/>
<a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ">https://www.youtube.com/watch?v=<strong>dQw4w9WgXcQ</strong></a></p>

<p>Use the following tag:</p>

<pre><code>{% youtube dQw4w9WgXcQ %}
</code></pre>

<p>Here is the result:</p>

<div class="embed-video-container"><iframe src="//www.youtube.com/embed/dQw4w9WgXcQ" allowfullscreen></iframe></div>


<hr />

<h4>Map</h4>

<p>Embedding a map can be done with the following tag:</p>

<pre><code>{% map lat lon zoomLevel "markerTitle" "description" %}
</code></pre>

<p>A simple example is shown here:</p>

<pre><code>{% map 37.7577 -122.4376 13z "San Francisco" "Map Demo" %}
</code></pre>

<p>And here is the result:</p>

<div class='map'><div style='height:420px' id='map1'></div><div class='mapCaption'>Map Data: <a href='http://openstreetmap.org'>OpenStreetMap</a> contributors <a href='http://www.openstreetmap.org/copyright'>License</a> - Tiles Courtesy of <a href='http://www.mapquest.com/' target='_blank'>MapQuest</a><img src='http://developer.mapquest.com/content/osm/mq_logo.png'></div></div>


<script type='text/javascript'>jQuery(document).ready(function() {initmap('map1',37.7577,-122.4376,13,'','');});</script>


<hr />

<h4>Footnotes</h4>

<p>Footnotes are good for attributing content made by other people. Simply place an anchor <code>[^2]</code> where you want the link to the footnote to appear.<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>
Then, at the bottom of the page, put the actual footnote: <code>[^2]: This is a footnote</code>. The line above the footnotes is created automatically.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://xkcd.com/">Randall Munrow, XKCD</a> licensed under CC-BY-NA 2.5<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>This is a footnote<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connecting to Wireless From the Command Line]]></title>
    <link href="http://jrruethe.github.io/blog/2014/07/05/connecting-to-wireless-from-the-command-line/"/>
    <updated>2014-07-05T20:22:15-04:00</updated>
    <id>http://jrruethe.github.io/blog/2014/07/05/connecting-to-wireless-from-the-command-line</id>
    <content type="html"><![CDATA[<p>It can be tricky to figure out how to connect to a wireless network via the command line.<br/>
However, the steps are simple. Below is a script to do all the work for you.</p>

<pre><code>#!/bin/bash
# Connect to a wireless network secured with WPA2
# Usage: ./connect.sh &lt;SSID&gt;
# Run this as root

# Parse command line arguments
SSID=$1

# Ensure the interface is up
ifconfig wlan0 up

# Create a configuration file
echo Enter the passphrase for $SSID:
wpa_passphrase $SSID &gt; ./wpa.conf

# Connect to the access point
wpa_supplicant -Dwext -iwlan0 -c./wpa.conf -B

# Obtain an IP address
dhclient -r
dhclient wlan0

# Test the connection
ping -c 1 www.google.com
</code></pre>
]]></content>
  </entry>
  
</feed>
