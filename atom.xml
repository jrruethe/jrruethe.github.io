<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Morning Musings]]></title>
  <link href="http://jrruethe.github.io/atom.xml" rel="self"/>
  <link href="http://jrruethe.github.io/"/>
  <updated>2016-04-17T16:25:29-04:00</updated>
  <id>http://jrruethe.github.io/</id>
  <author>
    <name><![CDATA[Joe Ruether]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cryptography Using OpenSSL]]></title>
    <link href="http://jrruethe.github.io/blog/2016/04/17/cryptography-using-openssl/"/>
    <updated>2016-04-17T13:21:05-04:00</updated>
    <id>http://jrruethe.github.io/blog/2016/04/17/cryptography-using-openssl</id>
    <content type="html"><![CDATA[<p>PGP and GPG are commonly used to encrypt and sign messages for specified recipients, but OpenSSL is capable of performing the same cryptographic operations. The benefit is that more of the magic is exposed to the user, which can be useful for learning more about how cryptographic applications operate.</p>

<p>Below are three bash scripts that can perform the following:</p>

<ul>
<li>Public / private key generation</li>
<li>Hybrid asymmetric encryption and signing</li>
<li>Hybrid asymmetric decryption and verification</li>
</ul>


<p>These operations are a subset of the core functionality provided by GPG, and can be used to securely pass sensitive data between users. Unlike GPG, the user is responsible for managing trusted certificates.</p>

<h2>Generate</h2>

<p>The first script is called <code>generate.sh</code>. It will generate a new public certificate and private key when given a name and optional email address. Run it like so:</p>

<pre><code>$ ./generate.sh 
Usage: generate.sh &lt;"name"&gt; [email]

$ ./generate.sh "Joe Ruether" jrruethe@gmail.com
</code></pre>

<p><img class="center" src="http://jrruethe.github.io/blog/2016/04/17/cryptography-using-openssl/01.png"></p>

<p>As you can see, a certificate and private key were generated, with the proper permissions set. Both files are stored in base64 ASCII for easily sharing or backing them up.</p>

<p>You can also view the human readable output of the certificate with:</p>

<pre><code>openssl x509 -in Joe_Ruether.certificate -text -noout
</code></pre>

<p><img class="center" src="http://jrruethe.github.io/blog/2016/04/17/cryptography-using-openssl/02.png"></p>

<p>The idea here is that two users would generate their own certificates and private keys, then keep the private keys for themselves while sharing the certificates with each other. The sharing of certificates should be done in a way that you can prove the certificate belongs to who you think it does, since anyone can generate a certificate with any name and email.</p>

<p>The script:</p>

<figure class='code'><figcaption><span> (generate.sh)</span><a href='http://jrruethe.github.io/downloads/code/generate.sh' title='Download code'> download</a></figcaption><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># generate.sh</span>
</span><span class='line'><span class="c"># Copyright (C) 2016 Joe Ruether jrruethe@gmail.com</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c"># it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c"># the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c"># (at your option) any later version.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c"># GNU General Public License for more details.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c"># along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Generates a certificate and private key</span>
</span><span class='line'><span class="c"># generate.sh &lt;&quot;name&quot;&gt; [email]</span>
</span><span class='line'><span class="c"># 1) (Required) Name of user</span>
</span><span class='line'><span class="c"># 2) (Optional) Email of user</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Stop on any error</span>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$#&quot;</span> -lt 1 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">   </span><span class="nb">echo</span> <span class="s2">&quot;Usage: generate.sh &lt;\&quot;name\&quot;&gt; [email]&quot;</span>
</span><span class='line'>   <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nv">NAME</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="nv">EMAIL</span><span class="o">=</span><span class="nv">$2</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Replace spaces with underscores</span>
</span><span class='line'><span class="nv">FILE</span><span class="o">=</span><span class="k">${</span><span class="nv">NAME</span><span class="p">// /_</span><span class="k">}</span>
</span><span class='line'><span class="nv">KEY</span><span class="o">=</span><span class="k">${</span><span class="nv">FILE</span><span class="k">}</span>.secret
</span><span class='line'><span class="nv">CERTIFICATE</span><span class="o">=</span><span class="k">${</span><span class="nv">FILE</span><span class="k">}</span>.certificate
</span><span class='line'>
</span><span class='line'><span class="c"># Create a certificate and key pair for the given name and email</span>
</span><span class='line'><span class="nb">echo</span> -e <span class="s2">&quot;NA\nNA\nNA\nNA\nNA\n${NAME}\n${EMAIL}&quot;</span> | openssl req -new -x509 -sha256 -newkey rsa:2048 -nodes -keyout <span class="k">${</span><span class="nv">KEY</span><span class="k">}</span> -out <span class="k">${</span><span class="nv">CERTIFICATE</span><span class="k">}</span>  &gt; /dev/null 2&gt;&amp;1 
</span><span class='line'>
</span><span class='line'><span class="c"># Change permissions</span>
</span><span class='line'>chmod 400 <span class="k">${</span><span class="nv">KEY</span><span class="k">}</span>
</span><span class='line'>chmod 444 <span class="k">${</span><span class="nv">CERTIFICATE</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Encrypt</h2>

<p>The next script performs file encryption to a specified recipient certificate. It can optionally sign the file with your private key. The order of operations is as follows:</p>

<ol>
<li>The file is first compressed</li>
<li>A random keyfile is generated</li>
<li>The compressed file is symmetrically encrypted with the random keyfile using AES256</li>
<li>The random key is asymmetrically encrypted with the certificate using RSA</li>
<li>(optional) The file is signed using the private key of the sender, and the signature is encrypted symmetrically using the random key</li>
<li>All output files are bundled together into a tarball</li>
</ol>


<p>Run it like so:</p>

<pre><code>$ echo "This is a test" &gt; test.txt
$ ./encrypt.sh 
Usage: encrypt.sh &lt;file&gt; &lt;recipient_certificate&gt; [sender_private_key] [sender_certificate]

$ ./encrypt.sh test.txt Alice.certificate
Encryption Successful
</code></pre>

<p>Optionally the file can be signed by also providing your private key:</p>

<pre><code>$ ./encrypt.sh test.txt Alice.certificate Bob.secret
Encryption Successful
</code></pre>

<p>In this case, the file <code>test.txt</code> was encrypted to Alice and signed by Bob.</p>

<p>Here is the output:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2016/04/17/cryptography-using-openssl/03.png">
<img class="center" src="http://jrruethe.github.io/blog/2016/04/17/cryptography-using-openssl/04.png"></p>

<p>The produced tarball can be safely shared over an insecure channel; only the intended recipient is able to decrypt it.</p>

<p>The tarball will always contain the recipient metadata extracted from the recipient&rsquo;s public certificate. This is so it is easy to identify who is able to decrypt the file. Optionally, the sender can include their certificate metadata when signing a file, to make it easy to determine which certificate is needed to verify the signature. The metadata files contain nothing more than the sha1 fingerprints of the respective certificates:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2016/04/17/cryptography-using-openssl/05.png"></p>

<p>The script:</p>

<figure class='code'><figcaption><span> (encrypt.sh)</span><a href='http://jrruethe.github.io/downloads/code/encrypt.sh' title='Download code'> download</a></figcaption><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># encrypt.sh</span>
</span><span class='line'><span class="c"># Copyright (C) 2016 Joe Ruether jrruethe@gmail.com</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c"># it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c"># the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c"># (at your option) any later version.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c"># GNU General Public License for more details.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c"># along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Encrypts a file</span>
</span><span class='line'><span class="c"># encrypt.sh &lt;file&gt; &lt;recipient_certificate&gt; [sender_private_key] [sender_certificate]</span>
</span><span class='line'><span class="c"># 1) (Required) File to encrypt</span>
</span><span class='line'><span class="c"># 2) (Required) Certificate of the recipient</span>
</span><span class='line'><span class="c"># 3) (Optional) Private key of the sender</span>
</span><span class='line'><span class="c"># 4) (Optional) Certificate of the sender</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Stop on any error</span>
</span><span class='line'><span class="c"># set -e</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Declare an array of tasks to perform on exit</span>
</span><span class='line'><span class="nb">declare</span> -a on_exit_items
</span><span class='line'>
</span><span class='line'><span class="c"># This function is run on exit</span>
</span><span class='line'><span class="k">function </span>on_exit<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="k">for </span>i in <span class="s2">&quot;${on_exit_items[@]}&quot;</span>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'><span class="k">        </span><span class="nb">eval</span> <span class="nv">$i</span>
</span><span class='line'>    <span class="k">done</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Add to the list of tasks to run on exit</span>
</span><span class='line'><span class="k">function </span>add_on_exit<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nb">local </span><span class="nv">n</span><span class="o">=</span><span class="k">${#</span><span class="nv">on_exit_items</span><span class="p">[*]</span><span class="k">}</span>
</span><span class='line'>    on_exit_items<span class="o">[</span><span class="nv">$n</span><span class="o">]=</span><span class="s2">&quot;$*&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$n</span> -eq 0 <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">trap </span>on_exit EXIT
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$#&quot;</span> -lt 2 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">   </span><span class="nb">echo</span> <span class="s2">&quot;Usage: encrypt.sh &lt;file&gt; &lt;recipient_certificate&gt; [sender_private_key] [sender_certificate]&quot;</span>
</span><span class='line'>   <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nv">FILE</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="nv">RECIPIENT_CERTIFICATE</span><span class="o">=</span><span class="nv">$2</span>
</span><span class='line'><span class="nv">SIGNING_KEY</span><span class="o">=</span><span class="nv">$3</span>
</span><span class='line'><span class="nv">SENDER_CERTIFICATE</span><span class="o">=</span><span class="nv">$4</span>
</span><span class='line'>
</span><span class='line'><span class="nv">COMPRESSED_FILE</span><span class="o">=</span><span class="k">${</span><span class="nv">FILE</span><span class="k">}</span>.bz2
</span><span class='line'><span class="nv">ENCRYPTED_FILE</span><span class="o">=</span><span class="k">${</span><span class="nv">COMPRESSED_FILE</span><span class="k">}</span>.encrypted
</span><span class='line'><span class="nv">SYMMETRIC_KEY</span><span class="o">=</span>symmetric_key.bin
</span><span class='line'><span class="nv">ENCRYPTED_KEY</span><span class="o">=</span><span class="k">${</span><span class="nv">SYMMETRIC_KEY</span><span class="k">}</span>.encrypted
</span><span class='line'>
</span><span class='line'><span class="nv">RECIPIENT_PUBLIC_KEY</span><span class="o">=</span><span class="k">${</span><span class="nv">RECIPIENT_CERTIFICATE</span><span class="p">//certificate/public</span><span class="k">}</span>
</span><span class='line'><span class="nv">RECIPIENT_METADATA</span><span class="o">=</span>recipient.txt
</span><span class='line'><span class="nv">SENDER_METADATA</span><span class="o">=</span>sender.txt
</span><span class='line'>
</span><span class='line'><span class="nv">SIGNATURE</span><span class="o">=</span><span class="k">${</span><span class="nv">FILE</span><span class="k">}</span>.signature
</span><span class='line'><span class="nv">ENCRYPTED_SIGNATURE</span><span class="o">=</span><span class="k">${</span><span class="nv">SIGNATURE</span><span class="k">}</span>.encrypted
</span><span class='line'><span class="nv">OUTPUT</span><span class="o">=</span><span class="k">${</span><span class="nv">FILE</span><span class="k">}</span>.tar
</span><span class='line'>
</span><span class='line'><span class="c"># Get the public key from the certificate</span>
</span><span class='line'>openssl x509 -in <span class="k">${</span><span class="nv">RECIPIENT_CERTIFICATE</span><span class="k">}</span> -pubkey -noout &gt; <span class="k">${</span><span class="nv">RECIPIENT_PUBLIC_KEY</span><span class="k">}</span> 2&gt;/dev/null
</span><span class='line'><span class="nv">SUCCESS</span><span class="o">=</span><span class="nv">$?</span>
</span><span class='line'>add_on_exit rm -f <span class="k">${</span><span class="nv">RECIPIENT_PUBLIC_KEY</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="k">${</span><span class="nv">SUCCESS</span><span class="k">}</span> -ne 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">   </span><span class="nb">echo</span> <span class="s2">&quot;Invalid recipient certificate&quot;</span>
</span><span class='line'>   <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Get the recipient fingerprint metadata</span>
</span><span class='line'>openssl x509 -in <span class="k">${</span><span class="nv">RECIPIENT_CERTIFICATE</span><span class="k">}</span> -noout -fingerprint | awk -F <span class="s2">&quot;=&quot;</span> <span class="s1">&#39;{print $2}&#39;</span> &gt; <span class="k">${</span><span class="nv">RECIPIENT_METADATA</span><span class="k">}</span>
</span><span class='line'>add_on_exit rm -f <span class="k">${</span><span class="nv">RECIPIENT_METADATA</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Compress the file</span>
</span><span class='line'>bzip2 -9 -k <span class="k">${</span><span class="nv">FILE</span><span class="k">}</span>
</span><span class='line'>add_on_exit rm -f <span class="k">${</span><span class="nv">COMPRESSED_FILE</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Generate a random key</span>
</span><span class='line'>openssl rand -base64 128 -out <span class="k">${</span><span class="nv">SYMMETRIC_KEY</span><span class="k">}</span>
</span><span class='line'>add_on_exit shred <span class="k">${</span><span class="nv">SYMMETRIC_KEY</span><span class="k">}</span>
</span><span class='line'>add_on_exit rm -f <span class="k">${</span><span class="nv">SYMMETRIC_KEY</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Encrypt the file symmetrically using the random key</span>
</span><span class='line'>openssl enc -aes-256-cbc -salt -in <span class="k">${</span><span class="nv">COMPRESSED_FILE</span><span class="k">}</span> -out <span class="k">${</span><span class="nv">ENCRYPTED_FILE</span><span class="k">}</span> -pass file:<span class="k">${</span><span class="nv">SYMMETRIC_KEY</span><span class="k">}</span>
</span><span class='line'>add_on_exit rm -f <span class="k">${</span><span class="nv">ENCRYPTED_FILE</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Encrypt the symmetric key with the public key of the recipient</span>
</span><span class='line'>openssl rsautl -encrypt -inkey <span class="k">${</span><span class="nv">RECIPIENT_PUBLIC_KEY</span><span class="k">}</span> -pubin -in <span class="k">${</span><span class="nv">SYMMETRIC_KEY</span><span class="k">}</span> -out <span class="k">${</span><span class="nv">ENCRYPTED_KEY</span><span class="k">}</span>
</span><span class='line'>add_on_exit rm -f <span class="k">${</span><span class="nv">ENCRYPTED_KEY</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># If the file is being signed by the sender</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -z <span class="k">${</span><span class="nv">SIGNING_KEY</span><span class="k">}</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>
</span><span class='line'>   <span class="c"># Sign the file</span>
</span><span class='line'>   openssl dgst -sha256 -sign <span class="k">${</span><span class="nv">SIGNING_KEY</span><span class="k">}</span> -out <span class="k">${</span><span class="nv">SIGNATURE</span><span class="k">}</span> <span class="k">${</span><span class="nv">FILE</span><span class="k">}</span> &gt; /dev/null 2&gt;&amp;1
</span><span class='line'>   <span class="nv">SUCCESS</span><span class="o">=</span><span class="nv">$?</span>
</span><span class='line'>   add_on_exit shred <span class="k">${</span><span class="nv">SIGNATURE</span><span class="k">}</span>
</span><span class='line'>   add_on_exit rm -f <span class="k">${</span><span class="nv">SIGNATURE</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">if</span> <span class="o">[</span> <span class="k">${</span><span class="nv">SUCCESS</span><span class="k">}</span> -ne 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="s2">&quot;Invalid sender private key&quot;</span>
</span><span class='line'>      <span class="nb">exit </span>1
</span><span class='line'>   <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>   <span class="c"># Encrypt the signature symmetrically using the random key</span>
</span><span class='line'>   openssl enc -aes-256-cbc -salt -in <span class="k">${</span><span class="nv">SIGNATURE</span><span class="k">}</span> -out <span class="k">${</span><span class="nv">ENCRYPTED_SIGNATURE</span><span class="k">}</span> -pass file:<span class="k">${</span><span class="nv">SYMMETRIC_KEY</span><span class="k">}</span>
</span><span class='line'>   add_on_exit rm -f <span class="k">${</span><span class="nv">ENCRYPTED_SIGNATURE</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>   <span class="c"># Clear the variables for the tar command</span>
</span><span class='line'>   <span class="nv">ENCRYPTED_SIGNATURE</span><span class="o">=</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># If a sender is being specified</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -z <span class="k">${</span><span class="nv">SENDER_CERTIFICATE</span><span class="k">}</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>
</span><span class='line'>   <span class="c"># Get the sender fingerprint metadata</span>
</span><span class='line'>   openssl x509 -in <span class="k">${</span><span class="nv">SENDER_CERTIFICATE</span><span class="k">}</span> -noout -fingerprint 2&gt;/dev/null | awk -F <span class="s2">&quot;=&quot;</span> <span class="s1">&#39;{print $2}&#39;</span> &gt; <span class="k">${</span><span class="nv">SENDER_METADATA</span><span class="k">}</span>
</span><span class='line'>   <span class="nv">SUCCESS</span><span class="o">=</span><span class="k">${</span><span class="nv">PIPESTATUS</span><span class="p">[0]</span><span class="k">}</span>
</span><span class='line'>   add_on_exit rm -f <span class="k">${</span><span class="nv">SENDER_METADATA</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">if</span> <span class="o">[</span> <span class="k">${</span><span class="nv">SUCCESS</span><span class="k">}</span> -ne 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="s2">&quot;Invalid sender certificate&quot;</span>
</span><span class='line'>      <span class="nb">exit </span>1
</span><span class='line'>   <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>   <span class="c"># Clear the variable for the tar command</span>
</span><span class='line'>   <span class="nv">SENDER_METADATA</span><span class="o">=</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Bundle the output files together</span>
</span><span class='line'>tar cf <span class="k">${</span><span class="nv">OUTPUT</span><span class="k">}</span> <span class="k">${</span><span class="nv">ENCRYPTED_FILE</span><span class="k">}</span> <span class="k">${</span><span class="nv">ENCRYPTED_KEY</span><span class="k">}</span> <span class="k">${</span><span class="nv">RECIPIENT_METADATA</span><span class="k">}</span> <span class="k">${</span><span class="nv">ENCRYPTED_SIGNATURE</span><span class="k">}</span> <span class="k">${</span><span class="nv">SENDER_METADATA</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Encryption Successful&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Decrypt</h2>

<p>The final script is intended to decrypt bundles created by the above encryption script. It will:</p>

<ol>
<li>Extract the encrypted symmetric key</li>
<li>Decrypt the symmetric key using the given secret key</li>
<li>Extract the encrypted compressed file</li>
<li>Use the decrypted symmetric key to decrypt the compressed file</li>
<li>Decompress the file</li>
<li>(optional) Extract and verify the signature using the supplied certificate</li>
</ol>


<p>Run it like so:</p>

<pre><code>$ ./decrypt.sh 
Usage: decrypt.sh &lt;file&gt; &lt;recipient_private_key&gt; [sender_certificate]

$ ./decrypt.sh test.txt.tar Alice.secret Bob.certificate 
Verified OK
Decryption Successful
</code></pre>

<p>In this case, the file was decrypted by Alice, and verified to be sent by Bob.</p>

<p>Here is the output:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2016/04/17/cryptography-using-openssl/06.png"></p>

<p>The script:</p>

<figure class='code'><figcaption><span> (decrypt.sh)</span><a href='http://jrruethe.github.io/downloads/code/decrypt.sh' title='Download code'> download</a></figcaption><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># decrypt.sh</span>
</span><span class='line'><span class="c"># Copyright (C) 2016 Joe Ruether jrruethe@gmail.com</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c"># it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c"># the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c"># (at your option) any later version.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c"># GNU General Public License for more details.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c"># along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Decrypts a file</span>
</span><span class='line'><span class="c"># decrypt.sh &lt;file&gt; &lt;recipient_private_key&gt; [sender_certificate]</span>
</span><span class='line'><span class="c"># 1) (Required) File to decrypt</span>
</span><span class='line'><span class="c"># 2) (Required) Private key of the recipient</span>
</span><span class='line'><span class="c"># 3) (Optional) Certificate of the sender</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Stop on any error</span>
</span><span class='line'><span class="c"># set -e</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Declare an array of tasks to perform on exit</span>
</span><span class='line'><span class="nb">declare</span> -a on_exit_items
</span><span class='line'>
</span><span class='line'><span class="c"># This function is run on exit</span>
</span><span class='line'><span class="k">function </span>on_exit<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="k">for </span>i in <span class="s2">&quot;${on_exit_items[@]}&quot;</span>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'><span class="k">        </span><span class="nb">eval</span> <span class="nv">$i</span>
</span><span class='line'>    <span class="k">done</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Add to the list of tasks to run on exit</span>
</span><span class='line'><span class="k">function </span>add_on_exit<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nb">local </span><span class="nv">n</span><span class="o">=</span><span class="k">${#</span><span class="nv">on_exit_items</span><span class="p">[*]</span><span class="k">}</span>
</span><span class='line'>    on_exit_items<span class="o">[</span><span class="nv">$n</span><span class="o">]=</span><span class="s2">&quot;$*&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$n</span> -eq 0 <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">trap </span>on_exit EXIT
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$#&quot;</span> -lt 2 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">   </span><span class="nb">echo</span> <span class="s2">&quot;Usage: decrypt.sh &lt;file&gt; &lt;recipient_private_key&gt; [sender_certificate]&quot;</span>
</span><span class='line'>   <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nv">FILE</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="nv">RECIPIENT_PRIVATE_KEY</span><span class="o">=</span><span class="nv">$2</span>
</span><span class='line'><span class="nv">SENDER_CERTIFICATE</span><span class="o">=</span><span class="nv">$3</span>
</span><span class='line'>
</span><span class='line'><span class="nv">OUTPUT</span><span class="o">=</span><span class="k">${</span><span class="nv">FILE</span><span class="p">//.tar/</span><span class="k">}</span>
</span><span class='line'><span class="nv">COMPRESSED_FILE</span><span class="o">=</span><span class="k">${</span><span class="nv">OUTPUT</span><span class="k">}</span>.bz2
</span><span class='line'><span class="nv">ENCRYPTED_FILE</span><span class="o">=</span><span class="k">${</span><span class="nv">COMPRESSED_FILE</span><span class="k">}</span>.encrypted
</span><span class='line'><span class="nv">SYMMETRIC_KEY</span><span class="o">=</span>symmetric_key.bin
</span><span class='line'><span class="nv">ENCRYPTED_KEY</span><span class="o">=</span><span class="k">${</span><span class="nv">SYMMETRIC_KEY</span><span class="k">}</span>.encrypted
</span><span class='line'>
</span><span class='line'><span class="nv">SENDER_PUBLIC_KEY</span><span class="o">=</span><span class="k">${</span><span class="nv">SENDER_CERTIFICATE</span><span class="p">//certificate/public</span><span class="k">}</span>
</span><span class='line'><span class="nv">SIGNATURE</span><span class="o">=</span><span class="k">${</span><span class="nv">OUTPUT</span><span class="k">}</span>.signature
</span><span class='line'><span class="nv">ENCRYPTED_SIGNATURE</span><span class="o">=</span><span class="k">${</span><span class="nv">SIGNATURE</span><span class="k">}</span>.encrypted
</span><span class='line'>
</span><span class='line'><span class="c"># Unpack the encrypted key</span>
</span><span class='line'>tar xf <span class="k">${</span><span class="nv">FILE</span><span class="k">}</span> <span class="k">${</span><span class="nv">ENCRYPTED_KEY</span><span class="k">}</span> &gt; /dev/null 2&gt;&amp;1
</span><span class='line'><span class="nv">SUCCESS</span><span class="o">=</span><span class="nv">$?</span>
</span><span class='line'>add_on_exit rm -f <span class="k">${</span><span class="nv">ENCRYPTED_KEY</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="k">${</span><span class="nv">SUCCESS</span><span class="k">}</span> -ne 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">   </span><span class="nb">echo</span> <span class="s2">&quot;Not a valid encrypted file&quot;</span>
</span><span class='line'>   <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Decrypt the symmetric key</span>
</span><span class='line'>openssl rsautl -decrypt -inkey <span class="k">${</span><span class="nv">RECIPIENT_PRIVATE_KEY</span><span class="k">}</span> -in <span class="k">${</span><span class="nv">ENCRYPTED_KEY</span><span class="k">}</span> -out <span class="k">${</span><span class="nv">SYMMETRIC_KEY</span><span class="k">}</span> &gt; /dev/null 2&gt;&amp;1
</span><span class='line'><span class="nv">SUCCESS</span><span class="o">=</span><span class="nv">$?</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="k">${</span><span class="nv">SUCCESS</span><span class="k">}</span> -ne 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">   </span>add_on_exit rm -f <span class="k">${</span><span class="nv">SYMMETRIC_KEY</span><span class="k">}</span>
</span><span class='line'>   <span class="nb">echo</span> <span class="s2">&quot;Unable to decrypt: Incorrect key&quot;</span>
</span><span class='line'>   <span class="nb">exit </span>1
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">   </span>add_on_exit shred <span class="k">${</span><span class="nv">SYMMETRIC_KEY</span><span class="k">}</span>
</span><span class='line'>   add_on_exit rm -f <span class="k">${</span><span class="nv">SYMMETRIC_KEY</span><span class="k">}</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Unpack the encrypted file</span>
</span><span class='line'>tar xf <span class="k">${</span><span class="nv">FILE</span><span class="k">}</span> <span class="k">${</span><span class="nv">ENCRYPTED_FILE</span><span class="k">}</span> &gt; /dev/null 2&gt;&amp;1
</span><span class='line'><span class="nv">SUCCESS</span><span class="o">=</span><span class="nv">$?</span>
</span><span class='line'>add_on_exit rm -f <span class="k">${</span><span class="nv">ENCRYPTED_FILE</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="k">${</span><span class="nv">SUCCESS</span><span class="k">}</span> -ne 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">   </span><span class="nb">echo</span> <span class="s2">&quot;Not a valid encrypted file&quot;</span>
</span><span class='line'>   <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Decrypt the file</span>
</span><span class='line'>openssl enc -d -aes-256-cbc -in <span class="k">${</span><span class="nv">ENCRYPTED_FILE</span><span class="k">}</span> -out <span class="k">${</span><span class="nv">COMPRESSED_FILE</span><span class="k">}</span> -pass file:<span class="k">${</span><span class="nv">SYMMETRIC_KEY</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Decompress the file</span>
</span><span class='line'>bunzip2 -f <span class="k">${</span><span class="nv">COMPRESSED_FILE</span><span class="k">}</span> &gt; /dev/null 2&gt;&amp;1
</span><span class='line'>
</span><span class='line'><span class="c"># If the file is being verified</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -z <span class="k">${</span><span class="nv">SENDER_CERTIFICATE</span><span class="k">}</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>
</span><span class='line'>   <span class="c"># Unpack the signature</span>
</span><span class='line'>   tar xf <span class="k">${</span><span class="nv">FILE</span><span class="k">}</span> <span class="k">${</span><span class="nv">ENCRYPTED_SIGNATURE</span><span class="k">}</span> &gt; /dev/null 2&gt;&amp;1
</span><span class='line'>   <span class="nv">SUCCESS</span><span class="o">=</span><span class="nv">$?</span>
</span><span class='line'>   add_on_exit rm -f <span class="k">${</span><span class="nv">ENCRYPTED_SIGNATURE</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">if</span> <span class="o">[</span> <span class="k">${</span><span class="nv">SUCCESS</span><span class="k">}</span> -ne 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="s2">&quot;File is not signed&quot;</span>
</span><span class='line'>   <span class="k">else</span>
</span><span class='line'>      <span class="c"># Get the public key</span>
</span><span class='line'>      add_on_exit rm -f <span class="k">${</span><span class="nv">SENDER_PUBLIC_KEY</span><span class="k">}</span>
</span><span class='line'>      openssl x509 -in <span class="k">${</span><span class="nv">SENDER_CERTIFICATE</span><span class="k">}</span> -pubkey -noout &gt; <span class="k">${</span><span class="nv">SENDER_PUBLIC_KEY</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c"># Decrypt the signature</span>
</span><span class='line'>      openssl enc -d -aes-256-cbc -in <span class="k">${</span><span class="nv">ENCRYPTED_SIGNATURE</span><span class="k">}</span> -out <span class="k">${</span><span class="nv">SIGNATURE</span><span class="k">}</span> -pass file:<span class="k">${</span><span class="nv">SYMMETRIC_KEY</span><span class="k">}</span>
</span><span class='line'>      add_on_exit shred <span class="k">${</span><span class="nv">SIGNATURE</span><span class="k">}</span>
</span><span class='line'>      add_on_exit rm -f <span class="k">${</span><span class="nv">SIGNATURE</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c"># Verify the signature</span>
</span><span class='line'>      openssl dgst -sha256 -verify <span class="k">${</span><span class="nv">SENDER_PUBLIC_KEY</span><span class="k">}</span> -signature <span class="k">${</span><span class="nv">SIGNATURE</span><span class="k">}</span> <span class="k">${</span><span class="nv">OUTPUT</span><span class="k">}</span>
</span><span class='line'>      add_on_exit rm -f <span class="k">${</span><span class="nv">SIGNATURE</span><span class="k">}</span>
</span><span class='line'>   <span class="k">fi</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Decryption Successful&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Docker in Qubes]]></title>
    <link href="http://jrruethe.github.io/blog/2016/04/15/running-docker-in-qubes/"/>
    <updated>2016-04-15T18:09:15-04:00</updated>
    <id>http://jrruethe.github.io/blog/2016/04/15/running-docker-in-qubes</id>
    <content type="html"><![CDATA[<p>This is a quick post describing how to run Docker inside of a Qubes Appvm.</p>

<h2>Create a new template</h2>

<p>I chose to clone my existing Debian template. This tutorial assumes the template is Debian-based. Ideally your template would be very minimal, only requiring basic packages such as the following:</p>

<ul>
<li>git</li>
<li>gedit</li>
</ul>


<p>If you are also planning on using the dockerfile generator, you will need the following:</p>

<ul>
<li>ruby</li>
<li>ruby-dev</li>
<li>gcc</li>
<li>make</li>
<li>fpm (<code>sudo gem install fpm</code>)</li>
</ul>


<p>Here is my template:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2016/04/15/running-docker-in-qubes/01.png"></p>

<p>Make sure that the update proxy is disabled in the firewall settings:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2016/04/15/running-docker-in-qubes/02.png"></p>

<h2>Install Docker to the template<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></h2>

<p>Run the following commands in the terminal:</p>

<pre><code>sudo apt-get update
sudo apt-get install curl
curl -fsSL https://get.docker.com/ | sh
</code></pre>

<p>Next, enable the default user to use Docker:</p>

<pre><code>sudo usermod -aG docker user
</code></pre>

<h2>Change the default directory<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></h2>

<pre><code>sudo vim /etc/systemd/system/docker.service
</code></pre>

<p>Add the following to the file:</p>

<pre><code>[Service]
ExecStart=
ExecStart=/usr/bin/docker daemon -H fd:// -g /home/user/docker
</code></pre>

<p>Finally, run the following command to apply the configuration:</p>

<pre><code>sudo systemctl daemon-reload
</code></pre>

<h2>Create an Appvm</h2>

<p>First, poweroff the template. Then create an Appvm based on the template. Increase the available disk space, since the docker images are being stored in the persistent private storage.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2016/04/15/running-docker-in-qubes/03.png"></p>

<h2>Test it out</h2>

<p>Run the following command in the Appvm as the normal user:</p>

<pre><code>docker run -it --rm hello-world
</code></pre>

<p>You should see the following:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2016/04/15/running-docker-in-qubes/04.png"></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://docs.docker.com/linux/step_one/">https://docs.docker.com/linux/step_one/</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="https://docs.docker.com/engine/admin/systemd/">https://docs.docker.com/engine/admin/systemd/</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bitcoin Donation Proofs]]></title>
    <link href="http://jrruethe.github.io/blog/2016/01/12/bitcoin-donation-proofs/"/>
    <updated>2016-01-12T21:15:49-05:00</updated>
    <id>http://jrruethe.github.io/blog/2016/01/12/bitcoin-donation-proofs</id>
    <content type="html"><![CDATA[<p>As promised in my <a href="http://jrruethe.github.io/blog/2015/12/04/bitcoin-donations/">previous post</a>, I made some donations to show my support for open source software projects that accept Bitcoin. Below you will find the proofs.</p>

<p>Thank you all for everything you do, it is greatly appreciated and does not go unnoticed. Keep up the great work!</p>

<blockquote><p>Some sites did not provide static addresses. Donations to sites utilizing dynamic addresses are not listed, to prevent accidential reuse of those temporary addresses.</p></blockquote>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>-----BEGIN PGP SIGNED MESSAGE-----
</span><span class='line'>Hash: SHA1
</span><span class='line'>
</span><span class='line'> - Date        : 2015/12/19
</span><span class='line'>   Recipient   : Whonix
</span><span class='line'>   Source      : https://www.whonix.org/wiki/Donate
</span><span class='line'>   Address     : 1JgzCCSox56Sh4NnQJqRiwoxKi8oVSZBEd
</span><span class='line'>   Amount      : 0.021
</span><span class='line'>   Transaction : 186bec9c1ffb9f6aaf30acb029b3640cdb5b3ca64ca8c96e6d3525ee925be13a
</span><span class='line'>   Message     : "I, Joe Ruether, donated $10 to Whonix on Dec 19th, 2015"
</span><span class='line'>   
</span><span class='line'> - Date        : 2015/12/19
</span><span class='line'>   Recipient   : Rumble
</span><span class='line'>   Source      : http://disruptedsystems.org/
</span><span class='line'>   Address     : 1PXXMinxQgYUPXzZq6BixZpJTFeiCLqDqD
</span><span class='line'>   Amount      : 0.021
</span><span class='line'>   Transaction : 900fe2a9eb4c050d51cdc0c554b0ccb19e9060c6ee74367597ca30156b5bf24d
</span><span class='line'>   Message     : "I, Joe Ruether, donated $5 to Rumble on Dec 19th, 2015"
</span><span class='line'>
</span><span class='line'> - Date        : 2015/12/19
</span><span class='line'>   Recipient   : Armory
</span><span class='line'>   Source      : https://bitcoinarmory.com/contact/
</span><span class='line'>   Address     : 1ArmoryXcfq7TnCSuZa9fQjRYwJ4bkRKfv
</span><span class='line'>   Amount      : 0.021
</span><span class='line'>   Transaction : caeb52f8689ab152ba183675882c4a2176dbd95f7c01558905b6c74ed8a1f798
</span><span class='line'>   Message     : "I, Joe Ruether, donated $10 to Armory on Dec 19th, 2015"
</span><span class='line'>
</span><span class='line'> - Date        : 2015/12/18
</span><span class='line'>   Recipient   : Tails
</span><span class='line'>   Source      : https://tails.boum.org/contribute/how/donate/index.en.html
</span><span class='line'>   Address     : 1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2
</span><span class='line'>   Amount      : 0.021
</span><span class='line'>   Transaction : 179c3b282b395ebde1282e5faea23695c3e3deb3eaeb617e1ff65c2720eb60c4
</span><span class='line'>   Message     : "I, Joe Ruether, donated $10 to Tails on Dec 18th, 2015"
</span><span class='line'>
</span><span class='line'> - Date        : 2015/12/18
</span><span class='line'>   Recipient   : Veracrypt
</span><span class='line'>   Source      : https://veracrypt.codeplex.com/wikipage?title=Bitcoin%20Donation
</span><span class='line'>   Address     : 1NRoPQsm8by5iWyMMmHQy3P5takur3kYgG
</span><span class='line'>   Amount      : 0.021
</span><span class='line'>   Transaction : ae1e57806c194a4bd2fd22f9a1c003ec6e82062c0197d18c2c06f5f0a65f2466
</span><span class='line'>   Message     : "I, Joe Ruether, donated $10 to Veracrypt on Dec 18th, 2015"  
</span><span class='line'>
</span><span class='line'> - Date        : 2015/12/18
</span><span class='line'>   Recipient   : KeepassX
</span><span class='line'>   Source      : https://www.keepassx.org/donate
</span><span class='line'>   Address     : 1Lij3AvejBSbP58HM7uRmnuGcUpPWddPGt
</span><span class='line'>   Amount      : 0.021
</span><span class='line'>   Transaction : 727747188f5ac883bb20c3724bef6532b4e0b8663d6ed899ab437c7192d66008
</span><span class='line'>   Message     : "I, Joe Ruether, donated $10 to KeepassX on Dec 18th, 2015"
</span><span class='line'>
</span><span class='line'> - Date        : 2015/12/18
</span><span class='line'>   Recipient   : Free Software Foundation
</span><span class='line'>   Source      : https://my.fsf.org/donate
</span><span class='line'>   Address     : 1PC9aZC4hNX2rmmrt7uHTfYAS3hRbph4UN
</span><span class='line'>   Amount      : 0.021
</span><span class='line'>   Transaction : eb4c3ca8cb2dc255c6e65c97a9528e7140b569b336ddfea190d7a9d8523e26a6
</span><span class='line'>   Message     : "I, Joe Ruether, donated $10 to the Free Software Foundation on Dec 18th, 2015" 
</span><span class='line'>
</span><span class='line'> - Date        : 2015/12/18
</span><span class='line'>   Recipient   : Qubes
</span><span class='line'>   Source      : https://www.qubes-os.org/donate/
</span><span class='line'>   Address     : 14zockMSKKp5MK6X2cHJ3mQwm9MwYsJ39j
</span><span class='line'>   Amount      : 0.021
</span><span class='line'>   Transaction : f1eb94f2a14b33bcd33884da7d9eab314a967b9eb514e599604d518195f05140
</span><span class='line'>   Message     : "I, Joe Ruether, donated $10 to Qubes on Dec 18th, 2015"
</span><span class='line'>
</span><span class='line'>-----BEGIN PGP SIGNATURE-----
</span><span class='line'>Version: GnuPG v1
</span><span class='line'>
</span><span class='line'>iQEcBAEBAgAGBQJWlbpPAAoJEB7MsgHDevApgdoIAKekXgfkkUdnlV21kgAfSVBp
</span><span class='line'>6RZmSYhsYwPBK968qPLcHiRXHH4U42mRP4PKXcj4ylwED4KQVW432VKrz6/F7EuA
</span><span class='line'>Vm9QOjEAesb7gEfLOfI6eoC20aWRR3Y2DOsSOK1tlXm8jK+gv9RshvfBeLVnvF4s
</span><span class='line'>ZAQ8yUOjHyD77j8TKHF5vNMBf0OVnpJxXjS06/93zTpk16z21O+y2YmFpEOkZdPV
</span><span class='line'>tK4OmXv25DzlSUKIabhCEkYGfrfn0zbjfX+NEnAKxhdX5kdBMaKiL1vlMUAFptLg
</span><span class='line'>i6iZQYArzxFD+rGj64DqBLzPXbgEQWztVG8cJ0tKHWRZ9K/xFXBIsmBnAHIsd3s=
</span><span class='line'>=UnE4
</span><span class='line'>-----END PGP SIGNATURE-----</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bitcoin Donations]]></title>
    <link href="http://jrruethe.github.io/blog/2015/12/04/bitcoin-donations/"/>
    <updated>2015-12-04T20:37:39-05:00</updated>
    <id>http://jrruethe.github.io/blog/2015/12/04/bitcoin-donations</id>
    <content type="html"><![CDATA[<p>Its that time of year again, and I am reminded by the large banner at the top of Wikipedia. I have some spare change lying around, and I feel like showing my support to fellow programmers who maintain the software I use every day.</p>

<p>I am a strong supporter of Bitcoin and naturally I wanted to use it for donations. I have had my Bitcoin address posted on my blog, and have had a few donations from readers (thank you!). One of the best things about Bitcoin is that anyone can send and receive money without needing to sign up for anything. It is a great way to quickly and convieniently transfer cash, and you can be sure that your transaction reaches the intended person without needing to interact with any middleman.</p>

<p>First, I compiled a list of the major OSS software products I rely on, as well as projects I truely believe in, and found the donation pages for each. I discovered that many of them do provide a way to pay with Bitcoin; however, the methods, formats, and requirements varied greatly. This is a perfect opportunity to provide a review on how easy or difficult it is to donate Bitcoin to websites today. I took my list and trimmed it down to a small subset of different examples. This post will be reviewing the Bitcoin donation methods for the following sites:</p>

<ul>
<li><a href="https://bitcoinarmory.com/contact/">Armory</a></li>
<li><a href="http://www.debian.org/donations">Debian</a></li>
<li><a href="https://www.eclipse.org/donate/">Eclipse</a></li>
<li><a href="https://supporters.eff.org/donate">Electronic Frontier Foundation</a></li>
<li><a href="https://freedom.press/donate">Freedom of the Press Foundation</a></li>
<li><a href="https://my.fsf.org/donate/">Free Software Foundation</a></li>
<li><a href="https://donate.mozilla.org/en-US/give-bitcoin/">Mozilla</a></li>
<li><a href="https://www.qubes-os.org/donate/">Qubes</a></li>
<li><a href="https://www.qubes-os.org/donate/">RiseUp</a></li>
<li><a href="https://veracrypt.codeplex.com/wikipage?title=Bitcoin%20Donation">Veracrypt</a></li>
<li><a href="https://wikimediafoundation.org/wiki/Ways_to_Give#bitcoin">Wikipedia</a></li>
</ul>


<hr />

<h2>Doing it the right way</h2>

<p>I must really commend the Free Software Foundation and Qubes. Of all the sites I reviewed, I feel these sites are the only ones who are doing it &ldquo;right&rdquo;.</p>

<ul>
<li>All additional information is optional</li>
<li>A static Bitcoin address is displayed on the main donation page</li>
<li>With a QR code for easy scanning</li>
<li>And a GPG signed statement verifying ownership of the address</li>
</ul>


<p><img class="center" src="http://jrruethe.github.io/blog/2015/12/04/bitcoin-donations/01.png"></p>

<p>I want to bring special attention to this last point. Bitcoin addresses are almost impossible to remember and have no identifying features to link them to the owner. Hackers could exploit a website and change the address server-side, or a MitM attack could allow the address to be spoofed on the client side (the latter is especially true if using Tor, where the exit node can replace webpage content). For these reasons, Bitcoin addresses displayed on webpages should have an accompanying GPG signature to prove ownership and eliminate the risk of tampering.</p>

<p>A special mention to the folks at Armory. They have set up a <a href="https://bitcoinarmory.com/donation-match-list/">donation matching program</a>, where they provide <a href="https://s3.amazonaws.com/bitcoinarmory-simulnotes/signed_donation_addresses.txt">signed addresses</a> and a method for <a href="https://bitcoinarmory.com/donation-matching/#verify-donation-addresses">verifying the signatures</a>. Curiously, they do not sign their <a href="https://bitcoinarmory.com/contact/">own address</a> on their website (even though it can be obtained from their software).</p>

<p>Many sites had a static address displayed, but failed to provide a QR code for scanning. In fact, of all the I sites reviewed, only the following had QR codes for their static addreses:</p>

<ul>
<li>Free Software Foundation</li>
<li>Qubes</li>
<li>Veracrypt</li>
</ul>


<p>Many other sites use Bitpay or Coinbase to do dynamic addresses: temporary addresses that &ldquo;timeout&rdquo; after a short amount of time. Bitpay is an indespensible tool for merchants that also makes things very easy for the user; for example, on a webpage a user could specify how much they want to donate, and Bitpay will create a special QR code that tells Bitcoin clients to make a transaction for that amount. This interaction reduces the chance of mistyping an amount (remember, Bitcoin transactions cannot be revoked). Each transaction is isolated to a single address. Cycling addresses increases privacy for both the sender and receiver. It also makes creating a receipt easier, and helps clear up any confusion. In fact, the Bitcoin developers themselves discourage <a href="https://en.bitcoin.it/wiki/Address_reuse">address reuse</a>. Here is an example from the Freedom of the Press Foundation:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/12/04/bitcoin-donations/02.png"><br/>
(Note, don&rsquo;t actually use that address, it is expired!)</p>

<p>Bitpay&rsquo;s temporary addresses are a blessing and a curse; You cannot sign a temporary address. This also means I cannot share that address with anyone else if I want to promote that website or service; users are required to visit the page, fill out the form, and get their own temporary address to send to. I can&rsquo;t build up an &ldquo;address book&rdquo; of websites/services and their payment address.</p>

<p>RiseUp was the only site I could find that did dynamic addresses without using a 3rd party service like BitPay or Coinbase. Furthermore, they claim that they maintain the private key for the dynamically generated address, and that it doesn&rsquo;t expire. While the approach is novel, I think it leads to the worst of both worlds; they lost the ability to sign their addresses while at the same time didn&rsquo;t receive the other benefits of temporary addresses granted by a service like BitPay. Furthermore, anyone is able to cause RiseUp to generate a new address, but they must keep and manage each generated address, which could be troublesome. Finally, if you go with the &ldquo;address-book&rdquo; method, the dynamically generated addresses are <em>per-person</em>, which promotes tracking.</p>

<blockquote><p><strong>Address Reuse</strong><br/>
By now you may have noticed that I am making some contradictions. I labeled the display of a static address as the &ldquo;right way&rdquo;, then immediately followed up with the Bitcoin Dev&rsquo;s recommendations against address reuse. Remember that this post is in the context of donations. I think the distinction here is that something like Bitpay is perfect (and correct) for sales transactions where I buy a product or service, and displaying a static address is better for donations where I want to ensure the correct recipient gets the money. If I am buying something online, I typically don&rsquo;t care where the money goes as long as I receive what I bought. For example, Amazon heavily utilizes 3rd party merchants, to the point where I rarely notice whether I am paying Amazon directly or some other store. With donations, I am not receiving anything in return other than the reassurance that I am supporting something I believe in, so it becomes more important to verify that the correct entity is receiving my donation. Signatures on static addresses solve this problem. I&rsquo;m interested in hearing other arguments or solutions!</p></blockquote>

<p>Of all the forms I came across, the one for Eclipse was the by far the mosts intuitive and clear:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/12/04/bitcoin-donations/03.png"></p>

<p>The form is short and 100% optional. There is even a little checkbox to stay anonymous. Preselected donation amounts are available, as well as a box to specify your own number. I especially liked how I didn&rsquo;t have to scroll all over the page looking for the Bitcoin option; many of the sites I looked at hide the Bitcoin address at the bottom or side of their donation page instead of integrating that option in with the others. Well done Eclipse!</p>

<hr />

<h2>Doing it the wrong way</h2>

<p>Don&rsquo;t misunderstand, I am very happy that Bitcoin was an option for donations. However, I feel that some of these sites are missing the point; A Bitcoin transaction doesn&rsquo;t need any other information besides an address. If you want to receive a donation, you shouldn&rsquo;t need a name, address, email, phone number, etc required. Just take the money!</p>

<p>For example, the EFF requires my name, email, and <em>shipping address</em> to receive a Bitcoin donation:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/12/04/bitcoin-donations/04.png"></p>

<p>Wikipedia also requires a shipping address. Why is this information needed? What are they going to send me? Why can&rsquo;t I opt out?</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/12/04/bitcoin-donations/05.png"></p>

<p>Even Mozilla won&rsquo;t let me send them a Bitcoin donation without an email address:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/12/04/bitcoin-donations/06.png"></p>

<p>What could they need an email address for? A receipt? No need, the blockchain is a public ledger that replaces the need for a receipt. A thank you message? No need, afterall, I&rsquo;m the one thanking <em>you</em> with my donation! Signing me up on an email list? Most likely, and I don&rsquo;t need more spam.</p>

<p>Sorry guys, but you are missing the point. This tells me you are more interested in my information than my support.</p>

<hr />

<h2>Not doing it at all</h2>

<p>Unfortunately, Bitcoin still hasn&rsquo;t hit critical mass. By now, many people have at least heard of it, but the average person doesn&rsquo;t understand how to use it, how it works, or its benefits. There are still many websites that do not have a Bitcoin donation option. Some of the programs I use every day did not accept Bitcoin, however they did take PayPal.</p>

<p>The surprising one here was Debian. Not only do they not take Bitcoin, they don&rsquo;t even take Paypal. Their <a href="https://www.debian.org/donations">preferred methods</a> of payment are credit card or check. Look at how much stuff I need to fill out to donate:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/12/04/bitcoin-donations/07.png"></p>

<p>This right here is a prime example of how amazingly simple Bitcoin is.</p>

<p>However, they do bring up some <a href="https://lists.debian.org/debian-project/2014/08/msg00077.html">very interesting points</a> that offer a unique perspective on why accepting Bitcoin donations can be difficult, especially for a large organization:</p>

<ul>
<li>Keep donations in Bitcoin or convert to USD?</li>
<li>If convert, using who? Need a reliable exchange</li>
<li>If convert, when? Immediately, or try to make profit? Bitcoin is volatile</li>
<li>Poor choices here can affect public perception</li>
<li>Regulations on Bitcoin are still not stable</li>
</ul>


<hr />

<p>As you can see, there is a huge disparity in how different websites accept Bitcoin donations. Hopefully this post can give you ideas on how to accept Bitcoin donations on your own website. As a final note, thank you to all my readers for their support, it is appreciated!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Pool]]></title>
    <link href="http://jrruethe.github.io/blog/2015/11/26/object-pool/"/>
    <updated>2015-11-26T16:11:06-05:00</updated>
    <id>http://jrruethe.github.io/blog/2015/11/26/object-pool</id>
    <content type="html"><![CDATA[<p>An object pool is a specialized allocator that allocates memory in large chunks and deals them out in small slices. Malloc is typically an expensive call, especially for multiple small allocations, so significant performance improvements can be gained by managing memory directly. The object pool presented here is compatible with C++03, supports all standard containers, and offers O(1) amortized allocation and deallocation with configurable growth, limits, and alignment.</p>

<p>The pool works by allocating blocks of memory, partitioning them for the object type and alignment, then pushing all the addresses onto a stack representing available slots. Each allocation pops an address off the stack, each deallocation pushes an allocation onto the stack. When the stack is empty, another block is allocated and added to the linked list of blocks.</p>

<h2>Stack</h2>

<p>The primary component of the object pool is the stack of addresses that represent free memory slots for objects. However, this isn&rsquo;t implemented like a typical stack; rather, the stack itself is interleaved through the free slots of the memory block. This means no additional memory is required; the data structure that manages the free memory is stored <em>within</em> the free memory it is managing! Each free slot, which would normally be zeroed out, instead points to the next free slot. Pushing and popping simply involves overwriting these pointers.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">stack</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">T</span><span class="o">*</span>       <span class="n">pointer</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">pointer</span><span class="o">*</span> <span class="n">metapointer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">stack</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>      <span class="n">_top</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span>
</span><span class='line'>      <span class="n">_size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">push</span><span class="p">(</span><span class="n">pointer</span> <span class="n">ptr</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Store the current pointer at the given address</span>
</span><span class='line'>      <span class="o">*</span><span class="p">(</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">metapointer</span><span class="o">&gt;</span><span class="p">(</span><span class="n">ptr</span><span class="p">))</span> <span class="o">=</span> <span class="n">_top</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Advance the pointer</span>
</span><span class='line'>      <span class="n">_top</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Increment the size</span>
</span><span class='line'>      <span class="o">++</span><span class="n">_size</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pointer</span> <span class="n">pop</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">empty</span><span class="p">()){</span><span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">out_of_range</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">);}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Pop the top of the stack</span>
</span><span class='line'>      <span class="n">pointer</span> <span class="n">retval</span> <span class="o">=</span> <span class="n">_top</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Step back to the previous address</span>
</span><span class='line'>      <span class="n">_top</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">metapointer</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_top</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Decrement the size</span>
</span><span class='line'>      <span class="o">--</span><span class="n">_size</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Return the next free address</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">retval</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pointer</span> <span class="n">top</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">_top</span><span class="p">;}</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">size</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">_size</span><span class="p">;}</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">empty</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">_size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>  <span class="n">pointer</span> <span class="n">_top</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">_size</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Node</h2>

<p>If the object pool were statically sized, then only a single memory block would be required, and no linked list would be needed. However, to support growth, each memory block is treated as a node in a linked list, allowing for a dynamic number of blocks (and therefore a dynamic amount of allocated memory).</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">node</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">_object</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">node</span><span class="o">*</span> <span class="n">link</span><span class="p">(</span><span class="n">node</span><span class="o">*</span> <span class="n">next</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">_next</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">_next</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">node</span><span class="o">*</span> <span class="n">next</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">_next</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">U</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">node</span><span class="p">(</span><span class="n">U</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">arg</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>      <span class="n">_object</span><span class="p">(</span><span class="n">arg</span><span class="p">),</span>
</span><span class='line'>      <span class="n">_next</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">node</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>      <span class="n">_object</span><span class="p">(),</span>
</span><span class='line'>      <span class="n">_next</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>  <span class="n">T</span> <span class="n">_object</span><span class="p">;</span>
</span><span class='line'>  <span class="n">node</span><span class="o">*</span> <span class="n">_next</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Growth</h2>

<p>The growth of the pool can be controlled via a template parameter. This parameter is a functor that takes the current size of the pool and returns the new size that the pool should grow to. I provide functors to do exponential growth (like a vector) or linear growth, but it is easy to add a custom one to fine tune growth for your application.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">growth</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">virtual</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="k">operator</span><span class="p">()(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">)</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">exponential</span> <span class="o">:</span> <span class="k">public</span> <span class="n">growth</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="k">operator</span><span class="p">()(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">increment</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">linear</span> <span class="o">:</span> <span class="k">public</span> <span class="n">growth</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="k">operator</span><span class="p">()(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">increment</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Pool</h2>

<p>Finally, the pieces can all be put together to create the object pool. Allocation and deallocation consists of pushing and popping from the stack. If the stack is ever emptied, the pool grows by another block. The pool uses lazy allocation and has an efficient copy constructor to allow for quick rebinding; necessary for the standard containers.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">align</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">initial_size</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">final_size</span> <span class="o">=</span> <span class="n">max_allocations</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">,</span>
</span><span class='line'>          <span class="k">typename</span> <span class="n">growth</span> <span class="o">=</span> <span class="n">exponential</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">pool</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">T</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">boundary</span><span class="o">&lt;</span><span class="n">align</span><span class="o">&gt;</span> <span class="n">alignment</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">pad</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">align</span><span class="o">&gt;</span> <span class="n">padding</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">enum</span><span class="p">{</span><span class="n">unit</span> <span class="o">=</span> <span class="n">padding</span><span class="o">::</span><span class="n">value</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Satisfy the allocator traits</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">type</span>              <span class="n">value_type</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">value_type</span><span class="o">*</span>       <span class="n">pointer</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">value_type</span> <span class="k">const</span><span class="o">*</span> <span class="n">const_pointer</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">value_type</span><span class="o">&amp;</span>       <span class="n">reference</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">value_type</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">const_reference</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span>       <span class="n">size_type</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">ptrdiff_t</span>    <span class="n">difference_type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">byte</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">pointer</span><span class="o">*</span> <span class="n">metapointer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">U</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">rebind</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">typedef</span> <span class="n">pool</span><span class="o">&lt;</span><span class="n">U</span><span class="p">,</span> <span class="n">align</span><span class="p">,</span> <span class="n">initial_size</span><span class="p">,</span> <span class="n">final_size</span><span class="p">,</span> <span class="n">growth</span><span class="o">&gt;</span> <span class="n">other</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">grow</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Update the capacity</span>
</span><span class='line'>      <span class="n">_capacity</span> <span class="o">=</span> <span class="n">_size</span> <span class="o">?</span> <span class="n">_growth</span><span class="p">(</span><span class="n">_size</span><span class="p">)</span> <span class="o">:</span> <span class="n">initial_size</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Cap at the final size</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">_size</span> <span class="o">+</span> <span class="n">_capacity</span> <span class="o">&gt;</span> <span class="n">final_size</span><span class="p">)</span> <span class="n">_capacity</span> <span class="o">=</span> <span class="n">final_size</span> <span class="o">-</span> <span class="n">_size</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Bail out if we hit the upper limit</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">_capacity</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">bad_alloc</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Add this new capacity to our total size</span>
</span><span class='line'>      <span class="n">_size</span> <span class="o">+=</span> <span class="n">_capacity</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Allocate a new block of memory as a linked list node</span>
</span><span class='line'>      <span class="n">_current</span> <span class="o">=</span> <span class="n">_current</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">(</span><span class="k">new</span> <span class="n">node</span><span class="o">&lt;</span><span class="n">block</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_capacity</span> <span class="o">*</span> <span class="n">unit</span> <span class="o">+</span> <span class="n">alignment</span><span class="o">::</span><span class="n">value</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Access the memory</span>
</span><span class='line'>      <span class="kt">void</span><span class="o">*</span> <span class="n">memory</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_current</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Shift context to the new memory block</span>
</span><span class='line'>      <span class="n">_context</span> <span class="o">=</span> <span class="n">partition</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">align</span><span class="o">&gt;</span><span class="p">(</span><span class="n">memory</span><span class="p">,</span> <span class="n">_capacity</span> <span class="o">*</span> <span class="n">unit</span> <span class="o">+</span> <span class="n">alignment</span><span class="o">::</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Push the slots to the stack</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_capacity</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="n">_free</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_context</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pointer</span> <span class="n">allocate</span><span class="p">(</span><span class="n">size_type</span> <span class="n">count</span><span class="p">,</span> <span class="n">const_pointer</span> <span class="n">hint</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// If we are out of slots, add more</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">_free</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="n">grow</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Return the next slot</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">_free</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">deallocate</span><span class="p">(</span><span class="n">pointer</span> <span class="n">ptr</span><span class="p">,</span> <span class="n">size_type</span> <span class="n">count</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Push this pointer onto the free list</span>
</span><span class='line'>      <span class="n">_free</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">size_type</span> <span class="n">max_size</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// This pool only supports allocating one object at a time</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pool</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>      <span class="n">_head</span><span class="p">(),</span>
</span><span class='line'>      <span class="n">_current</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_head</span><span class="p">),</span>
</span><span class='line'>      <span class="n">_size</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>      <span class="n">_capacity</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">U</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">pool</span><span class="p">(</span><span class="n">pool</span><span class="o">&lt;</span><span class="n">U</span><span class="p">,</span> <span class="n">align</span><span class="p">,</span> <span class="n">initial_size</span><span class="p">,</span> <span class="n">final_size</span><span class="p">,</span> <span class="n">growth</span><span class="o">&gt;</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">obj</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>      <span class="n">_head</span><span class="p">(),</span>
</span><span class='line'>      <span class="n">_current</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_head</span><span class="p">),</span>
</span><span class='line'>      <span class="n">_size</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>      <span class="n">_capacity</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">~</span><span class="n">pool</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Start at the initial block</span>
</span><span class='line'>      <span class="n">node</span><span class="o">&lt;</span><span class="n">block</span><span class="o">&gt;*</span> <span class="n">current</span> <span class="o">=</span> <span class="n">_head</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Iterate through each block</span>
</span><span class='line'>      <span class="k">while</span><span class="p">(</span><span class="n">current</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="c1">// Get the next block</span>
</span><span class='line'>          <span class="n">node</span><span class="o">&lt;</span><span class="n">block</span><span class="o">&gt;*</span> <span class="n">next</span> <span class="o">=</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Delete the current block</span>
</span><span class='line'>          <span class="k">delete</span> <span class="n">current</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Advance to the next block</span>
</span><span class='line'>          <span class="n">current</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>  <span class="n">node</span><span class="o">&lt;</span><span class="n">block</span><span class="o">&gt;</span>  <span class="n">_head</span><span class="p">;</span>
</span><span class='line'>  <span class="n">node</span><span class="o">&lt;</span><span class="n">block</span><span class="o">&gt;*</span> <span class="n">_current</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">_size</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">_capacity</span><span class="p">;</span>
</span><span class='line'>  <span class="n">partition</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">align</span><span class="o">&gt;</span> <span class="n">_context</span><span class="p">;</span>
</span><span class='line'>  <span class="n">stack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">_free</span><span class="p">;</span>
</span><span class='line'>  <span class="n">growth</span> <span class="n">_growth</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Stateless</h2>

<p>C++03 allocators are required to be stateless. The standard containers do not accept an allocator instance, rather they construct one themselves. This means that two <code>std::set</code>s of type T will each maintain their own allocator. Clearly, the above pool is not stateless, however we can emulate that behavior by using a singleton. In this manner, there will only ever be one instance of the pool for each type, and all the containers will share the same pool.</p>

<p>This is implemented using a <code>stateless</code> allocator adapter. Each call to allocate / deallocate is routed through a singleton to the underlying policy.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span>
</span><span class='line'>          <span class="k">typename</span> <span class="n">Policy</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">stateless</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// Forward typedefs</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">T</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">type</span>              <span class="n">value_type</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">value_type</span><span class="o">*</span>       <span class="n">pointer</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">value_type</span> <span class="k">const</span><span class="o">*</span> <span class="n">const_pointer</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">value_type</span><span class="o">&amp;</span>       <span class="n">reference</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">value_type</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">const_reference</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span>       <span class="n">size_type</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">ptrdiff_t</span>    <span class="n">difference_type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">U</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">struct</span> <span class="n">rebind</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">typedef</span> <span class="n">stateless</span><span class="o">&lt;</span><span class="n">U</span><span class="p">,</span> <span class="k">typename</span> <span class="n">Policy</span><span class="o">::</span><span class="k">template</span> <span class="n">rebind</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;::</span><span class="n">other</span><span class="o">&gt;</span> <span class="n">other</span><span class="p">;</span>
</span><span class='line'>   <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">stateless</span><span class="p">(</span><span class="kt">void</span><span class="p">){}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">U</span><span class="p">,</span> <span class="k">typename</span> <span class="n">PolicyU</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">stateless</span><span class="p">(</span><span class="n">stateless</span><span class="o">&lt;</span><span class="n">U</span><span class="p">,</span> <span class="n">PolicyU</span><span class="o">&gt;</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">){}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">pointer</span> <span class="n">allocate</span><span class="p">(</span><span class="n">size_type</span> <span class="n">count</span><span class="p">,</span> <span class="n">const_pointer</span> <span class="n">hint</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">Policy</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">().</span><span class="n">allocate</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">hint</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">deallocate</span><span class="p">(</span><span class="n">pointer</span> <span class="n">ptr</span><span class="p">,</span> <span class="n">size_type</span> <span class="n">count</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">Policy</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">().</span><span class="n">deallocate</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">size_type</span> <span class="n">max_size</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">Policy</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">().</span><span class="n">max_size</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Hybrid</h2>

<p>One caveat to the object pool is that it only supports the allocation of a single object at a time. This means the object pool will not work for <code>vector</code>s and some implementations of <code>deque</code>, because these data structures allocate multiple contiguous objects at a time. However, the point of the object pool is to alleviate performance issues related to multiple calls of malloc with small sizes. Vectors do this automatically, so the object pool cannot improve their performance.</p>

<p>Rather than trying to remember which data structures and implementations the pool supports, it would be better to allow the pool to support <em>all</em> the containers. To do this, a <code>hybrid</code> allocator adapter is used that forwards all allocations of a single object to the pool, and all allocations of multiple objects to the heap.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span>
</span><span class='line'>          <span class="k">typename</span> <span class="n">S</span><span class="p">,</span>
</span><span class='line'>          <span class="k">typename</span> <span class="n">M</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">hybrid</span> <span class="o">:</span> <span class="k">public</span> <span class="n">S</span><span class="p">,</span>
</span><span class='line'>                  <span class="k">public</span> <span class="n">M</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Template parameters</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">T</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">S</span> <span class="n">single</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">M</span> <span class="n">multiple</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Satisfy the allocator traits</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">type</span>              <span class="n">value_type</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">value_type</span><span class="o">*</span>       <span class="n">pointer</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">value_type</span> <span class="k">const</span><span class="o">*</span> <span class="n">const_pointer</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">value_type</span><span class="o">&amp;</span>       <span class="n">reference</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">value_type</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">const_reference</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span>       <span class="n">size_type</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">ptrdiff_t</span>    <span class="n">difference_type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">U</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">rebind</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">typedef</span> <span class="n">hybrid</span><span class="o">&lt;</span><span class="n">U</span><span class="p">,</span>
</span><span class='line'>                          <span class="k">typename</span>   <span class="n">single</span><span class="o">::</span><span class="k">template</span> <span class="n">rebind</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;::</span><span class="n">other</span><span class="p">,</span>
</span><span class='line'>                          <span class="k">typename</span> <span class="n">multiple</span><span class="o">::</span><span class="k">template</span> <span class="n">rebind</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;::</span><span class="n">other</span>
</span><span class='line'>                        <span class="o">&gt;</span> <span class="n">other</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">hybrid</span><span class="p">(</span><span class="kt">void</span><span class="p">){}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">U</span><span class="p">,</span>
</span><span class='line'>              <span class="k">typename</span> <span class="n">SinglePolicyU</span><span class="p">,</span>
</span><span class='line'>              <span class="k">typename</span> <span class="n">MultiplePolicyU</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">hybrid</span><span class="p">(</span><span class="n">hybrid</span><span class="o">&lt;</span><span class="n">U</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">SinglePolicyU</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">MultiplePolicyU</span><span class="o">&gt;</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>      <span class="n">single</span><span class="p">(</span><span class="n">other</span><span class="p">),</span>
</span><span class='line'>      <span class="n">multiple</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Resolve ambiguities by forwarding allocation / deallocation</span>
</span><span class='line'>  <span class="c1">// requests to the proper policy</span>
</span><span class='line'>  <span class="n">pointer</span> <span class="n">allocate</span><span class="p">(</span><span class="n">size_type</span> <span class="n">count</span><span class="p">,</span> <span class="n">const_pointer</span> <span class="n">hint</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">single</span><span class="o">::</span><span class="n">allocate</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">hint</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">multiple</span><span class="o">::</span><span class="n">allocate</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">hint</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">deallocate</span><span class="p">(</span><span class="n">pointer</span> <span class="n">ptr</span><span class="p">,</span> <span class="n">size_type</span> <span class="n">count</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">single</span><span class="o">::</span><span class="n">deallocate</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">multiple</span><span class="o">::</span><span class="n">deallocate</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">size_type</span> <span class="n">max_size</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">multiple</span><span class="o">::</span><span class="n">max_size</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Final Result</h2>

<p>The pool and all of it&rsquo;s pieces are very configurable, but a good set of defaults can be selected that will work just fine for most cases. It is best to take all the policies, traits, and adapters, and fold them all together into a single struct or typedef to make it easier to use. Then, it can be simply plugged into the allocator template parameter of any standard container.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">fast_allocator</span> <span class="o">:</span> <span class="k">public</span>
</span><span class='line'>   <span class="n">allocator</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span>
</span><span class='line'>               <span class="n">hybrid</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">stateless</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span>
</span><span class='line'>                                     <span class="n">pool</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span>
</span><span class='line'>                                        <span class="mi">16</span><span class="p">,</span>
</span><span class='line'>                                        <span class="mi">16</span><span class="p">,</span>
</span><span class='line'>                                        <span class="n">max_allocations</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">,</span>
</span><span class='line'>                                        <span class="n">exponential</span>
</span><span class='line'>                                       <span class="o">&gt;</span>
</span><span class='line'>                                    <span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">heap</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span>
</span><span class='line'>                             <span class="mi">16</span>
</span><span class='line'>                             <span class="o">&gt;</span>
</span><span class='line'>                       <span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>              <span class="n">object_traits</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&gt;</span>
</span><span class='line'><span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">Foo</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">less</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">fast_allocator</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">PooledFooSet</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memory Blocks]]></title>
    <link href="http://jrruethe.github.io/blog/2015/11/25/memory-blocks/"/>
    <updated>2015-11-25T16:10:58-05:00</updated>
    <id>http://jrruethe.github.io/blog/2015/11/25/memory-blocks</id>
    <content type="html"><![CDATA[<p>Memory pools work by taking a large chunk of memory and dealing out small pieces of it upon allocation requests. Object pools are a specialized version that treat the memory as an array of objects, such that each &ldquo;slot&rdquo; is the same size. In reality, managing an object pool involves more than <em>just</em> an array of objects due to alignment and padding.</p>

<p>When doing 100% of your own memory management, it becomes useful to have a set of tools to assist with organizing memory. You can think of a chunk of memory as being similar to an empty hard drive; the act of aligning, partitioning, and padding the memory is similar to formatting a hard drive with a filesystem.</p>

<p>There are a few different ways to acquire a block of memory. The following lines allocate a block of 32 bytes:</p>

<pre><code>char memory[32];
char* memory = static_cast&lt;char*&gt;(malloc(32));
</code></pre>

<p>Notice how <code>sizeof(memory)</code> for each of those lines will give different results. A contiguous block of memory is represented by a starting address and a size; both values are needed to do anything useful with it. For static and local stack memory, the size is known at compile time, however for dynamic memory allocated on the heap, the size must be maintained separately.</p>

<h3>Memory Block</h3>

<p>A class that acts similar to a smart pointer for memory blocks can do the memory management for us, including holding the size and calling free upon destruction. The following is an implementation of a memory block class:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">block</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="kt">char</span> <span class="n">byte</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Constructor, size in bytes</span>
</span><span class='line'>  <span class="n">block</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>      <span class="n">_memory</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>      <span class="n">_size</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">_memory</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">byte</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">malloc</span><span class="p">(</span><span class="n">size</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Default Constructor</span>
</span><span class='line'>  <span class="n">block</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>      <span class="n">_memory</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>      <span class="n">_size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Destructor</span>
</span><span class='line'>  <span class="o">~</span><span class="n">block</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="n">_memory</span><span class="p">)</span> <span class="n">free</span><span class="p">(</span><span class="n">_memory</span><span class="p">);}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Access a specific byte of memory</span>
</span><span class='line'>  <span class="n">byte</span><span class="o">&amp;</span> <span class="k">operator</span><span class="p">[](</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span><span class="p">){</span><span class="k">return</span> <span class="n">_memory</span><span class="p">[</span><span class="n">i</span><span class="p">];}</span>
</span><span class='line'>  <span class="n">byte</span> <span class="k">const</span><span class="o">&amp;</span> <span class="k">operator</span><span class="p">[](</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">_memory</span><span class="p">[</span><span class="n">i</span><span class="p">];}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Dereference operator makes the block act like a pointer</span>
</span><span class='line'>  <span class="n">byte</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">*</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="o">*</span><span class="n">_memory</span><span class="p">;}</span>
</span><span class='line'>  <span class="n">byte</span> <span class="k">const</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">*</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="o">*</span><span class="n">_memory</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Address-of operator returns the address of the memory</span>
</span><span class='line'>  <span class="n">byte</span><span class="o">*</span> <span class="k">operator</span><span class="o">&amp;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">_memory</span><span class="p">;}</span>
</span><span class='line'>  <span class="n">byte</span> <span class="k">const</span><span class="o">*</span> <span class="k">operator</span><span class="o">&amp;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">_memory</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Size of the memory in bytes</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">_size</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>  <span class="n">byte</span><span class="o">*</span> <span class="n">_memory</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">_size</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using this class is simple:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">block</span> <span class="n">memory</span><span class="p">(</span><span class="mi">32</span><span class="p">);</span>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">memory</span><span class="p">,</span> <span class="mh">0x41</span><span class="p">,</span> <span class="n">memory</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">memory</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">memory</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">memory</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Outputs:</p>

<pre><code>32
A
A
</code></pre>

<p>As you can see, the memory block class acts just like a pointer to an array of bytes. This is a convienient building block for creating an object pool.</p>

<h3>Padding</h3>

<p>When creating an array of objects, you may need to ensure that each object is properly aligned. If you ensure that the first object is aligned, and that each object is padded properly, then you have the guarantee that <em>all</em> the objects in the array are aligned. Padding the object will result in some excess space being used in order to make sure the next object is properly aligned. Below is a small helper class that can pad any type to the next multiple of <code>X</code> bytes.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">multiple</span> <span class="o">=</span> <span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">pad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">enum</span><span class="p">{</span><span class="n">value</span> <span class="o">=</span> <span class="p">((</span><span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="o">+</span> <span class="n">multiple</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="n">multiple</span><span class="p">)</span> <span class="o">*</span> <span class="n">multiple</span><span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">pad</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">enum</span><span class="p">{</span><span class="n">value</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">)};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is an example:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">Data</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">17</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Data</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">pad</span><span class="o">&lt;</span><span class="n">Data</span><span class="p">,</span> <span class="mi">2</span><span class="o">&gt;::</span><span class="n">value</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">pad</span><span class="o">&lt;</span><span class="n">Data</span><span class="p">,</span> <span class="mi">4</span><span class="o">&gt;::</span><span class="n">value</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">pad</span><span class="o">&lt;</span><span class="n">Data</span><span class="p">,</span> <span class="mi">8</span><span class="o">&gt;::</span><span class="n">value</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">pad</span><span class="o">&lt;</span><span class="n">Data</span><span class="p">,</span> <span class="mi">16</span><span class="o">&gt;::</span><span class="n">value</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Outputs:</p>

<pre><code>17
18
20
24
32
</code></pre>

<h3>Partitioning</h3>

<p>Once you have a raw memory block, it needs to be partitioned before it can be used. The act of partitioning will align and pad the memory block and allow slots to be accessed for object storage. In other words, a partitioned memory block will act just like an array:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">align</span> <span class="o">=</span> <span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">partition</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Pad T for alignment</span>
</span><span class='line'>  <span class="k">enum</span><span class="p">{</span><span class="n">unit</span> <span class="o">=</span> <span class="n">pad</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">align</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Default Constructor</span>
</span><span class='line'>  <span class="n">partition</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>      <span class="n">_memory</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>      <span class="n">_size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Constructor</span>
</span><span class='line'>  <span class="n">partition</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">memory</span><span class="p">,</span>
</span><span class='line'>              <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>     <span class="n">_memory</span><span class="p">(</span><span class="n">boundary</span><span class="o">&lt;</span><span class="n">align</span><span class="o">&gt;::</span><span class="n">next</span><span class="p">(</span><span class="n">memory</span><span class="p">)),</span>
</span><span class='line'>     <span class="n">_size</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Return the number of T&#39;s that can fit inside the memory</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">capacity</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="n">_size</span> <span class="o">-</span> <span class="n">align</span><span class="p">,</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> <span class="o">/</span> <span class="n">unit</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Access a specific T</span>
</span><span class='line'>  <span class="n">T</span><span class="o">&amp;</span> <span class="k">operator</span><span class="p">[](</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="n">capacity</span><span class="p">()){</span><span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">out_of_range</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">);}</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">*</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*&gt;</span><span class="p">(</span>
</span><span class='line'>                   <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span><span class="o">&gt;</span><span class="p">(</span>
</span><span class='line'>                      <span class="n">_memory</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">unit</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">void</span><span class="o">*</span> <span class="n">_memory</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">_size</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is some example usage, borrowing the memory dumper from a <a href="http://jrruethe.github.io/blog/2015/08/23/placement-new/">previous blog post</a>:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">Data</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Data</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>     <span class="n">memset</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="mh">0xAA</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buffer</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">memory</span><span class="p">[</span><span class="mi">54</span><span class="p">];</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">memory</span><span class="p">,</span> <span class="mh">0xCC</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">memory</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">partition</span><span class="o">&lt;</span><span class="n">Data</span><span class="p">,</span> <span class="mi">8</span><span class="o">&gt;</span> <span class="n">array</span><span class="p">(</span><span class="o">&amp;</span><span class="n">memory</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">memory</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">dump_memory</span><span class="p">(</span><span class="n">memory</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">memory</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">array</span><span class="p">.</span><span class="n">capacity</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;0x%016lX</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">memory</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;0x%016lX</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;0x%016lX</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;0x%016lX</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">array</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">Data</span><span class="p">();</span>
</span><span class='line'>  <span class="n">array</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">Data</span><span class="p">();</span>
</span><span class='line'>  <span class="n">array</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="n">Data</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">dump_memory</span><span class="p">(</span><span class="n">memory</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">memory</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the output:</p>

<pre><code>-----------------------------------------------------------------------
54 bytes              0  1  2  3   4  5  6  7   8  9  A  B   C  D  E  F
0x00007FFFE9D71680:  CC CC CC CC  CC CC CC CC  CC CC CC CC  CC CC CC CC
0x00007FFFE9D71690:  CC CC CC CC  CC CC CC CC  CC CC CC CC  CC CC CC CC
0x00007FFFE9D716A0:  CC CC CC CC  CC CC CC CC  CC CC CC CC  CC CC CC CC
0x00007FFFE9D716B0:  CC CC CC CC  CC CC
-----------------------------------------------------------------------
5
0x00007FFFE9D71680
0x00007FFFE9D71688
0x00007FFFE9D71690
0x00007FFFE9D71698
-----------------------------------------------------------------------
54 bytes              0  1  2  3   4  5  6  7   8  9  A  B   C  D  E  F
0x00007FFFE9D71680:  CC CC CC CC  CC CC CC CC  AA AA AA AA  AA AA CC CC
0x00007FFFE9D71690:  CC CC CC CC  CC CC CC CC  CC CC CC CC  CC CC CC CC
0x00007FFFE9D716A0:  AA AA AA AA  AA AA CC CC  AA AA AA AA  AA AA CC CC
0x00007FFFE9D716B0:  CC CC CC CC  CC CC
-----------------------------------------------------------------------
</code></pre>

<p>As you can see, the data objects stored inside the partitioned memory are padded and 8 byte aligned. The alignment caveats mentioned in the <a href="http://jrruethe.github.io/blog/2015/08/23/placement-new/">previous post</a> apply, including the wasted space at the beginning of the array.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Test]]></title>
    <link href="http://jrruethe.github.io/blog/2015/11/24/google-test/"/>
    <updated>2015-11-24T16:10:22-05:00</updated>
    <id>http://jrruethe.github.io/blog/2015/11/24/google-test</id>
    <content type="html"><![CDATA[<p>This post is a quick introduction to Google Test and how to use it to test your C++ code. Google Test is a unit testing framework that is easy to use and creates meaningful tests with intuitive output.</p>

<h3>Installing</h3>

<p>On Debian based systems, you will want to install the following packages:</p>

<ul>
<li>libgtest-dev</li>
<li>build-essential</li>
<li>cmake</li>
</ul>


<p>Note that <code>libgtest-dev</code> includes the headers and sources, but not the compiled libraries. Follow the instructions below to compile and install the libraries<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>:</p>

<pre><code>cd /tmp
mkdir build
cd build
cmake -DCMAKE_BUILD_TYPE=RELEASE /usr/src/gtest/
make
sudo mv libgtest* /usr/lib/
</code></pre>

<p>You could also use <code>checkinstall</code> to create a deb package containing the library files.</p>

<h3>Using</h3>

<p>To get started, you will need to:</p>

<ol>
<li>Include the Google Test headers</li>
<li>Write a <code>TEST</code> section</li>
<li>Initiate the unit tests from <code>main()</code></li>
</ol>


<p>Tests are composed of various <code>EXPECT_*</code> statements to ensure that functions return expected values, etc. For a full description of the various types of tests that can be written using Google Test, refer to the documents below:</p>

<ul>
<li><a href="https://github.com/google/googletest/blob/master/googletest/docs/V1_7_Primer.md">Primer</a></li>
<li><a href="https://github.com/google/googletest/blob/master/googletest/docs/V1_7_FAQ.md">FAQ</a></li>
<li><a href="https://github.com/google/googletest/blob/master/googletest/docs/V1_7_AdvancedGuide.md">Advanced Guide</a></li>
<li><a href="https://github.com/google/googletest/blob/master/googlemock/docs/ForDummies.md">Google Mock</a></li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;gtest/gtest.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">TEST</span><span class="p">(</span><span class="n">TestGroup</span><span class="p">,</span> <span class="n">TestCase</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">EXPECT_EQ</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="o">::</span><span class="n">testing</span><span class="o">::</span><span class="n">InitGoogleTest</span><span class="p">(</span><span class="o">&amp;</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">RUN_ALL_TESTS</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>One thing to remember with the <code>EXPECT_*</code> statements is that the <em>first</em> argument is the hardcoded expected value (ie: the &ldquo;truth&rdquo;), and the <code>second</code> parameter is the variable or function call to be tested.</p>

<p>To compile, you need to link against both the compiled gtest library as well as pthread:</p>

<pre><code>g++ -g -O0 main.cpp -lgtest -pthread
</code></pre>

<p>The output will look something like this:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="p">[</span><span class="o">==========</span><span class="p">]</span> <span class="n">Running</span> <span class="mi">1</span> <span class="n">test</span> <span class="n">from</span> <span class="mi">1</span> <span class="n">test</span> <span class="k">case</span><span class="p">.</span>
</span><span class='line'><span class="p">[</span><span class="o">----------</span><span class="p">]</span> <span class="n">Global</span> <span class="n">test</span> <span class="n">environment</span> <span class="n">set</span><span class="o">-</span><span class="n">up</span><span class="p">.</span>
</span><span class='line'><span class="p">[</span><span class="o">----------</span><span class="p">]</span> <span class="mi">1</span> <span class="n">test</span> <span class="n">from</span> <span class="n">TestGroup</span>
</span><span class='line'><span class="p">[</span> <span class="n">RUN</span>      <span class="p">]</span> <span class="n">TestGroup</span><span class="p">.</span><span class="n">TestCase</span>
</span><span class='line'><span class="p">[</span>       <span class="n">OK</span> <span class="p">]</span> <span class="n">TestGroup</span><span class="p">.</span><span class="n">TestCase</span> <span class="p">(</span><span class="mi">0</span> <span class="n">ms</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="o">----------</span><span class="p">]</span> <span class="mi">1</span> <span class="n">test</span> <span class="n">from</span> <span class="n">TestGroup</span> <span class="p">(</span><span class="mi">0</span> <span class="n">ms</span> <span class="n">total</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="o">----------</span><span class="p">]</span> <span class="n">Global</span> <span class="n">test</span> <span class="n">environment</span> <span class="n">tear</span><span class="o">-</span><span class="n">down</span>
</span><span class='line'><span class="p">[</span><span class="o">==========</span><span class="p">]</span> <span class="mi">1</span> <span class="n">test</span> <span class="n">from</span> <span class="mi">1</span> <span class="n">test</span> <span class="k">case</span> <span class="n">ran</span><span class="p">.</span> <span class="p">(</span><span class="mi">0</span> <span class="n">ms</span> <span class="n">total</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span>  <span class="n">PASSED</span>  <span class="p">]</span> <span class="mi">1</span> <span class="n">test</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Google Test is a great way to ensure that your code is working properly. I often use Google Test with a relaxed form of <em>Test Driven Development</em><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://askubuntu.com/questions/145887/why-no-library-files-installed-for-google-test">Why no library files installed for google test?</a> &ndash; Wojciech Migda <a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="https://en.wikipedia.org/wiki/Test-driven_development">Test Driven Development</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aligned Heap]]></title>
    <link href="http://jrruethe.github.io/blog/2015/11/23/aligned-heap/"/>
    <updated>2015-11-23T18:01:02-05:00</updated>
    <id>http://jrruethe.github.io/blog/2015/11/23/aligned-heap</id>
    <content type="html"><![CDATA[<p>In the <a href="http://jrruethe.github.io/blog/2015/11/22/allocators/">previous post</a>, I introduced an allocator framework that supports pluggable policies. An example heap policy was given. This post will expand on the heap to give it alignment abilities. You may want to refer to <a href="http://jrruethe.github.io/blog/2015/08/23/placement-new/">another previous post</a> on alignment.</p>

<p>The code modifications are simple; allocate a little more data, align the pointer when allocating, then unalign it before deallocating:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span>
</span><span class='line'>         <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">align</span> <span class="o">=</span> <span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">heap</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ALLOCATOR_TRAITS</span><span class="p">(</span><span class="n">T</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">U</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">rebind</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">typedef</span> <span class="n">heap</span><span class="o">&lt;</span><span class="n">U</span><span class="p">,</span> <span class="n">align</span><span class="o">&gt;</span> <span class="n">other</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Default Constructor</span>
</span><span class='line'>  <span class="n">heap</span><span class="p">(</span><span class="kt">void</span><span class="p">){}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Copy Constructor</span>
</span><span class='line'>  <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">U</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">heap</span><span class="p">(</span><span class="n">heap</span><span class="o">&lt;</span><span class="n">U</span><span class="p">,</span> <span class="n">align</span><span class="o">&gt;</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">){}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Allocate memory</span>
</span><span class='line'>  <span class="n">pointer</span> <span class="n">allocate</span><span class="p">(</span><span class="n">size_type</span> <span class="n">count</span><span class="p">,</span> <span class="n">const_pointer</span> <span class="n">hint</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Request additional memory to perform alignment</span>
</span><span class='line'>      <span class="kt">void</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="o">::</span><span class="k">operator</span> <span class="k">new</span><span class="p">((</span><span class="n">count</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">type</span><span class="p">))</span> <span class="o">+</span> <span class="n">boundary</span><span class="o">&lt;</span><span class="n">align</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">,</span> <span class="o">::</span><span class="n">std</span><span class="o">::</span><span class="n">nothrow</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Align the pointer</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">pointer</span><span class="o">&gt;</span><span class="p">(</span><span class="n">boundary</span><span class="o">&lt;</span><span class="n">align</span><span class="o">&gt;::</span><span class="n">align</span><span class="p">(</span><span class="n">ptr</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Deallocate memory</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">deallocate</span><span class="p">(</span><span class="n">pointer</span> <span class="n">ptr</span><span class="p">,</span> <span class="n">size_type</span> <span class="n">count</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Unalign the pointer and delete the memory</span>
</span><span class='line'>      <span class="o">::</span><span class="k">operator</span> <span class="k">delete</span><span class="p">(</span><span class="n">boundary</span><span class="o">&lt;</span><span class="n">align</span><span class="o">&gt;::</span><span class="n">unalign</span><span class="p">(</span><span class="n">ptr</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Max number of objects that can be allocated in one call</span>
</span><span class='line'>  <span class="n">size_type</span> <span class="n">max_size</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">max_allocations</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the aligned heap no different than the previous version. If you leave out the alignment template parameter, it will act the same as before.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number marked'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Example</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Example</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>      <span class="n">value</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">bool</span> <span class="k">operator</span><span class="o">&lt;</span><span class="p">(</span><span class="n">Example</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">value</span> <span class="o">&lt;</span> <span class="n">other</span><span class="p">.</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// Increase scope</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line marked start end'>     <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">Example</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">less</span><span class="o">&lt;</span><span class="n">Example</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">allocator</span><span class="o">&lt;</span><span class="n">Example</span><span class="p">,</span> <span class="n">heap</span><span class="o">&lt;</span><span class="n">Example</span><span class="p">,</span> <span class="mi">16</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">foo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">foo</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">Example</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span>
</span><span class='line'>      <span class="n">foo</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">Example</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>      <span class="n">foo</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">Example</span><span class="p">(</span><span class="mi">4</span><span class="p">));</span>
</span><span class='line'>      <span class="n">foo</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">Example</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// Leaving scope</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Allocators]]></title>
    <link href="http://jrruethe.github.io/blog/2015/11/22/allocators/"/>
    <updated>2015-11-22T16:10:49-05:00</updated>
    <id>http://jrruethe.github.io/blog/2015/11/22/allocators</id>
    <content type="html"><![CDATA[<p>This post will discuss how to make a STL compliant allocator.</p>

<p>All of the standard containers support a 2nd (or 3rd) template parameter to specify the allocator that should be used. Each container allocates memory to store the objects it contains, and it uses the allocator to obtain the memory required for this storage. By using a custom allocator, you can remain in control of how memory is managed.</p>

<p>Custom allocators are useful for a variety of cases:</p>

<ul>
<li>Reducing system call overhead when requesting multiple small memory blocks</li>
<li>Improving cache efficiency by keeping memory contiguous</li>
<li>Using standard containers with memory-mapped io, or a memory-mapped file for persistent containers</li>
<li>Maintaining 100% control of memory for embedded systems or game development</li>
</ul>


<p>Wikipedia summarizes it well<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>:</p>

<blockquote><p>One of the main reasons for writing a custom allocator is performance. Utilizing a specialized custom allocator may substantially improve the performance or memory usage, or both, of the program. The default allocator uses operator new to allocate memory. This is often implemented as a thin layer around the C heap allocation functions, which are usually optimized for infrequent allocation of large memory blocks. This approach may work well with containers that mostly allocate large chunks of memory, like vector and deque. However, for containers that require frequent allocations of small objects, such as map and list, using the default allocator is generally slow. Other common problems with a malloc-based allocator include poor locality of reference, and excessive memory fragmentation.</p></blockquote>

<p>The allocators discussed in this post are meant to be used with C++03. C++11 adds more support for custom allocators, and makes them easier to implement. Furthermore, C++03 allocators are compatible with C++11, but not the other way around.</p>

<p>Creating a custom allocator may seem difficult, but the core concept is pretty simple. Here are the basic rules:</p>

<ul>
<li>Cannot have state (C++03 only)</li>
<li>Must support certain typedefs and methods</li>
<li>Must support type rebinding</li>
<li>Allocators of the same type must compare equally</li>
</ul>


<p>No state also means no virtual functions, as the vtable can be considered state. Normal inheritance is okay, however it is generally considered bad practice to derive from std::allocator. Instead, we will create our own allocator using policies and traits. The methods that need to be implemented can be separated into two categories: those that are related to the allocator, and those that are related to the object being allocated. This distinction defines the policy and traits we will implement.<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<blockquote><p><strong>Policies and Traits</strong><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup><br/>
Policies are classes (or class templates) to inject behavior into a parent class, typically through inheritance. By decomposing a parent interface into orthogonal (independent) dimensions, policy classes form the building blocks of more complex interfaces. Traits are class templates to extract properties from a generic type. Traits are often used in template-metaprogramming and SFINAE tricks to overload a function template based on a type condition.</p></blockquote>

<h3>Object Traits</h3>

<p>The first thing to define is the object traits. This structure is responsible for creating and destroying objects, as well as returning the address of an object. Note that classes support overriding the &ldquo;address-of&rdquo; operator, so the object traits will need to be specialized for those classes. The object traits can also be specialized for a type to keep track of the number of instantiations using the allocator, much like the object counter works.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">object_traits</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">T</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">U</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">struct</span> <span class="n">rebind</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">typedef</span> <span class="n">object_traits</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span> <span class="n">other</span><span class="p">;</span>
</span><span class='line'>   <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Constructor</span>
</span><span class='line'>   <span class="n">object_traits</span><span class="p">(</span><span class="kt">void</span><span class="p">){}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Copy Constructor</span>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">U</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="n">object_traits</span><span class="p">(</span><span class="n">object_traits</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">){}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Address of object</span>
</span><span class='line'>   <span class="n">type</span><span class="o">*</span>       <span class="n">address</span><span class="p">(</span><span class="n">type</span><span class="o">&amp;</span>       <span class="n">obj</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">;}</span>
</span><span class='line'>   <span class="n">type</span> <span class="k">const</span><span class="o">*</span> <span class="n">address</span><span class="p">(</span><span class="n">type</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">obj</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Construct object</span>
</span><span class='line'>   <span class="kt">void</span> <span class="n">construct</span><span class="p">(</span><span class="n">type</span><span class="o">*</span> <span class="n">ptr</span><span class="p">,</span> <span class="n">type</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">ref</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// In-place copy construct</span>
</span><span class='line'>      <span class="k">new</span><span class="p">(</span><span class="n">ptr</span><span class="p">)</span> <span class="n">type</span><span class="p">(</span><span class="n">ref</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Destroy object</span>
</span><span class='line'>   <span class="kt">void</span> <span class="n">destroy</span><span class="p">(</span><span class="n">type</span><span class="o">*</span> <span class="n">ptr</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Call destructor</span>
</span><span class='line'>      <span class="n">ptr</span><span class="o">-&gt;~</span><span class="n">type</span><span class="p">();</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Rebinding</h3>

<p>Notice the special <code>rebind</code> struct in the above code. This is a convention used by the STL to allow for chainging the type of the allocator. For example, when you make a <code>std::list&lt;T&gt;</code>, internally the type is being rebound to <code>std::list&lt;Node&lt;T&gt; &gt;</code>, because lists store nodes that contain a T, not the T itself. To support this, the allocator itself must support rebinding such that memory is allocated for the node, not just T.</p>

<h3>Allocator Traits</h3>

<p>The allocator policies require a certain set of typedefs to be present. In most cases, they can all be derived from the type of the allocator, so it makes sense to use a macro:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#define ALLOCATOR_TRAITS(T)                \</span>
</span><span class='line'><span class="cp">typedef T                 type;            \</span>
</span><span class='line'><span class="cp">typedef type              value_type;      \</span>
</span><span class='line'><span class="cp">typedef value_type*       pointer;         \</span>
</span><span class='line'><span class="cp">typedef value_type const* const_pointer;   \</span>
</span><span class='line'><span class="cp">typedef value_type&amp;       reference;       \</span>
</span><span class='line'><span class="cp">typedef value_type const&amp; const_reference; \</span>
</span><span class='line'><span class="cp">typedef std::size_t       size_type;       \</span>
</span><span class='line'><span class="cp">typedef std::ptrdiff_t    difference_type; \</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Allocator Policy</h3>

<p>Next, the actual allocator policy needs to be defined. The allocator policy is responsible for allocating and deallocating memory. For this example, a simple heap allocator will work. The functionality will mimic that of the standard allocator:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">max_allocations</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">enum</span><span class="p">{</span><span class="n">value</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span><span class="o">&gt;</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">)};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">heap</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ALLOCATOR_TRAITS</span><span class="p">(</span><span class="n">T</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">U</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">rebind</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">typedef</span> <span class="n">heap</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span> <span class="n">other</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Default Constructor</span>
</span><span class='line'>  <span class="n">heap</span><span class="p">(</span><span class="kt">void</span><span class="p">){}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Copy Constructor</span>
</span><span class='line'>  <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">U</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">heap</span><span class="p">(</span><span class="n">heap</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">){}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Allocate memory</span>
</span><span class='line'>  <span class="n">pointer</span> <span class="n">allocate</span><span class="p">(</span><span class="n">size_type</span> <span class="n">count</span><span class="p">,</span> <span class="n">const_pointer</span> <span class="cm">/* hint */</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="n">max_size</span><span class="p">()){</span><span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">bad_alloc</span><span class="p">();}</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">pointer</span><span class="o">&gt;</span><span class="p">(</span><span class="o">::</span><span class="k">operator</span> <span class="k">new</span><span class="p">(</span><span class="n">count</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">type</span><span class="p">),</span> <span class="o">::</span><span class="n">std</span><span class="o">::</span><span class="n">nothrow</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Delete memory</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">deallocate</span><span class="p">(</span><span class="n">pointer</span> <span class="n">ptr</span><span class="p">,</span> <span class="n">size_type</span> <span class="cm">/* count */</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="o">::</span><span class="k">operator</span> <span class="k">delete</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Max number of objects that can be allocated in one call</span>
</span><span class='line'>  <span class="n">size_type</span> <span class="n">max_size</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">max_allocations</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Allocator</h3>

<p>Now that we have all the pieces, it is time to bring them all together. The actual allocator class is nothing more than a wrapper to combine the above into one common place. The key to the allocator wrapper is that it inherits from the allocator policy and object traits, thus the combination satisfies all the requirements for a compliant allocator.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#define FORWARD_ALLOCATOR_TRAITS(C)                  \</span>
</span><span class='line'><span class="cp">typedef typename C::value_type      value_type;      \</span>
</span><span class='line'><span class="cp">typedef typename C::pointer         pointer;         \</span>
</span><span class='line'><span class="cp">typedef typename C::const_pointer   const_pointer;   \</span>
</span><span class='line'><span class="cp">typedef typename C::reference       reference;       \</span>
</span><span class='line'><span class="cp">typedef typename C::const_reference const_reference; \</span>
</span><span class='line'><span class="cp">typedef typename C::size_type       size_type;       \</span>
</span><span class='line'><span class="cp">typedef typename C::difference_type difference_type; \</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span>
</span><span class='line'>         <span class="k">typename</span> <span class="n">PolicyT</span> <span class="o">=</span> <span class="n">heap</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>         <span class="k">typename</span> <span class="n">TraitsT</span> <span class="o">=</span> <span class="n">object_traits</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">allocator</span> <span class="o">:</span> <span class="k">public</span> <span class="n">PolicyT</span><span class="p">,</span>
</span><span class='line'>                  <span class="k">public</span> <span class="n">TraitsT</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Template parameters</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">PolicyT</span> <span class="n">Policy</span><span class="p">;</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">TraitsT</span> <span class="n">Traits</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">FORWARD_ALLOCATOR_TRAITS</span><span class="p">(</span><span class="n">Policy</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">U</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">rebind</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">allocator</span><span class="o">&lt;</span><span class="n">U</span><span class="p">,</span>
</span><span class='line'>                         <span class="k">typename</span> <span class="n">Policy</span><span class="o">::</span><span class="k">template</span> <span class="n">rebind</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;::</span><span class="n">other</span><span class="p">,</span>
</span><span class='line'>                         <span class="k">typename</span> <span class="n">Traits</span><span class="o">::</span><span class="k">template</span> <span class="n">rebind</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;::</span><span class="n">other</span>
</span><span class='line'>                        <span class="o">&gt;</span> <span class="n">other</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Constructor</span>
</span><span class='line'>    <span class="n">allocator</span><span class="p">(</span><span class="kt">void</span><span class="p">){}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Copy Constructor</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">U</span><span class="p">,</span>
</span><span class='line'>             <span class="k">typename</span> <span class="n">PolicyU</span><span class="p">,</span>
</span><span class='line'>             <span class="k">typename</span> <span class="n">TraitsU</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">allocator</span><span class="p">(</span><span class="n">allocator</span><span class="o">&lt;</span><span class="n">U</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">PolicyU</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">TraitsU</span><span class="o">&gt;</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>       <span class="n">Policy</span><span class="p">(</span><span class="n">other</span><span class="p">),</span>
</span><span class='line'>       <span class="n">Traits</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice how the rebinding structure works here; the policy and traits classes are both rebound to the new type when the overall allocator is rebound.</p>

<h3>Equality operators</h3>

<p>The STL uses the equality operator to determine if memory allocated by one allocator can be deallocated with another. Normally, a heap allocator can be used interchangably between types, so the equality operator would return true. However, with this allocator framework, different policies can be plugged in, and some policies may not be interchangable. Therefore, the equality operator will default to false. Specializations of the equality operators can be made for specific policies to register equality, such as he heap policy:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// Two allocators are not equal unless a specialization says so</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">PolicyT</span><span class="p">,</span> <span class="k">typename</span> <span class="n">TraitsT</span><span class="p">,</span>
</span><span class='line'>         <span class="k">typename</span> <span class="n">U</span><span class="p">,</span> <span class="k">typename</span> <span class="n">PolicyU</span><span class="p">,</span> <span class="k">typename</span> <span class="n">TraitsU</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">bool</span> <span class="k">operator</span><span class="o">==</span><span class="p">(</span><span class="n">allocator</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">PolicyT</span><span class="p">,</span> <span class="n">TraitsT</span><span class="o">&gt;</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">left</span><span class="p">,</span>
</span><span class='line'>                <span class="n">allocator</span><span class="o">&lt;</span><span class="n">U</span><span class="p">,</span> <span class="n">PolicyU</span><span class="p">,</span> <span class="n">TraitsU</span><span class="o">&gt;</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Also implement inequality</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">PolicyT</span><span class="p">,</span> <span class="k">typename</span> <span class="n">TraitsT</span><span class="p">,</span>
</span><span class='line'>         <span class="k">typename</span> <span class="n">U</span><span class="p">,</span> <span class="k">typename</span> <span class="n">PolicyU</span><span class="p">,</span> <span class="k">typename</span> <span class="n">TraitsU</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">bool</span> <span class="k">operator</span><span class="o">!=</span><span class="p">(</span><span class="n">allocator</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">PolicyT</span><span class="p">,</span> <span class="n">TraitsT</span><span class="o">&gt;</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">left</span><span class="p">,</span>
</span><span class='line'>                <span class="n">allocator</span><span class="o">&lt;</span><span class="n">U</span><span class="p">,</span> <span class="n">PolicyU</span><span class="p">,</span> <span class="n">TraitsU</span><span class="o">&gt;</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="o">!</span><span class="p">(</span><span class="n">left</span> <span class="o">==</span> <span class="n">right</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Comparing an allocator to anything else should not show equality</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">PolicyT</span><span class="p">,</span> <span class="k">typename</span> <span class="n">TraitsT</span><span class="p">,</span>
</span><span class='line'>         <span class="k">typename</span> <span class="n">OtherAllocator</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">bool</span> <span class="k">operator</span><span class="o">==</span><span class="p">(</span><span class="n">allocator</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">PolicyT</span><span class="p">,</span> <span class="n">TraitsT</span><span class="o">&gt;</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">left</span><span class="p">,</span>
</span><span class='line'>                <span class="n">OtherAllocator</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Also implement inequality</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">PolicyT</span><span class="p">,</span> <span class="k">typename</span> <span class="n">TraitsT</span><span class="p">,</span>
</span><span class='line'>         <span class="k">typename</span> <span class="n">OtherAllocator</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">bool</span> <span class="k">operator</span><span class="o">!=</span><span class="p">(</span><span class="n">allocator</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">PolicyT</span><span class="p">,</span> <span class="n">TraitsT</span><span class="o">&gt;</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">left</span><span class="p">,</span>
</span><span class='line'>                <span class="n">OtherAllocator</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">!</span><span class="p">(</span><span class="n">left</span> <span class="o">==</span> <span class="n">right</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Specialize for the heap policy</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">TraitsT</span><span class="p">,</span>
</span><span class='line'>         <span class="k">typename</span> <span class="n">U</span><span class="p">,</span> <span class="k">typename</span> <span class="n">TraitsU</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">bool</span> <span class="k">operator</span><span class="o">==</span><span class="p">(</span><span class="n">allocator</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">heap</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">TraitsT</span><span class="o">&gt;</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">left</span><span class="p">,</span>
</span><span class='line'>                <span class="n">allocator</span><span class="o">&lt;</span><span class="n">U</span><span class="p">,</span> <span class="n">heap</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">TraitsU</span><span class="o">&gt;</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Also implement inequality</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">TraitsT</span><span class="p">,</span>
</span><span class='line'>         <span class="k">typename</span> <span class="n">U</span><span class="p">,</span> <span class="k">typename</span> <span class="n">TraitsU</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">bool</span> <span class="k">operator</span><span class="o">!=</span><span class="p">(</span><span class="n">allocator</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">heap</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">TraitsT</span><span class="o">&gt;</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">left</span><span class="p">,</span>
</span><span class='line'>                <span class="n">allocator</span><span class="o">&lt;</span><span class="n">U</span><span class="p">,</span> <span class="n">heap</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">TraitsU</span><span class="o">&gt;</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="o">!</span><span class="p">(</span><span class="n">left</span> <span class="o">==</span> <span class="n">right</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using the Allocator</h3>

<p>Using the allocator is simple, just pass it into the 2nd (or 3rd) template parameter of a container. Remember that some containers (like <code>set</code>) have a second template parameter that accepts a comparator.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Example</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Example</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>      <span class="n">value</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">bool</span> <span class="k">operator</span><span class="o">&lt;</span><span class="p">(</span><span class="n">Example</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">value</span> <span class="o">&lt;</span> <span class="n">other</span><span class="p">.</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// Increase scope</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">Example</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">less</span><span class="o">&lt;</span><span class="n">Example</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">allocator</span><span class="o">&lt;</span><span class="n">Example</span><span class="p">,</span> <span class="n">heap</span><span class="o">&lt;</span><span class="n">Example</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">foo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">foo</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">Example</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span>
</span><span class='line'>      <span class="n">foo</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">Example</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>      <span class="n">foo</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">Example</span><span class="p">(</span><span class="mi">4</span><span class="p">));</span>
</span><span class='line'>      <span class="n">foo</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">Example</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// Leaving scope</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that is how to make an allocator! A future blog post will discuss different policies that can be created.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://stackoverflow.com/questions/14718055/what-is-the-difference-between-a-trait-and-a-policy/14723986#14723986">What is the difference between a trait and a policy?</a> &ndash; TemplateRex<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="http://www.codeproject.com/Articles/4795/C-Standard-Allocator-An-Introduction-and-Implement">C++ Standard Allocator, An Introduction and Implementation</a> &ndash; Lai Shiaw San Kent<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><a href="https://en.wikipedia.org/wiki/Allocator_%28C%2B%2B%29#Custom_allocators">Allocator (C++)</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stopwatch]]></title>
    <link href="http://jrruethe.github.io/blog/2015/11/14/stopwatch/"/>
    <updated>2015-11-14T11:37:52-05:00</updated>
    <id>http://jrruethe.github.io/blog/2015/11/14/stopwatch</id>
    <content type="html"><![CDATA[<p>Object counters and memory pools are great ways to monitor the memory usage of your program from within. It can also be useful to monitor the amount of time being spent executing from within your program. This post presents a stopwatch that can provide statistics on how long something takes to run.</p>

<p>This project will require the following libraries to compile:</p>

<ul>
<li>libboost-chrono-dev</li>
<li>libboost-thread-dev</li>
<li>libboost-system-dev</li>
</ul>


<p>The idea with the stopwatch is to provide simple <code>start</code> and <code>stop</code> methods to monitor execution time, and store statistics that can be programatically accessed. Two stopwatch types will be presented: a static stopwatch and an instantiatable stopwatch. Each has its uses, with advantages and disadvantages:</p>

<ul>
<li>Static stopwatches can be differentiated using tags, and can be accessed anywhere</li>
<li>Object stopwatches can be managed at runtime, but must be passed around to be effective</li>
</ul>


<p>First, we must define the statistics that will be managed:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">Statistics</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">Count</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Count</span>  <span class="n">last</span><span class="p">;</span>    <span class="c1">// Last measured difference</span>
</span><span class='line'>   <span class="n">Count</span>  <span class="n">min</span><span class="p">;</span>     <span class="c1">// Minimum measured difference</span>
</span><span class='line'>   <span class="n">Count</span>  <span class="n">max</span><span class="p">;</span>     <span class="c1">// Maximum measured difference</span>
</span><span class='line'>   <span class="n">Count</span>  <span class="n">samples</span><span class="p">;</span> <span class="c1">// Number of samples taken</span>
</span><span class='line'>   <span class="n">Count</span>  <span class="n">total</span><span class="p">;</span>   <span class="c1">// Total measured difference</span>
</span><span class='line'>   <span class="kt">double</span> <span class="n">average</span><span class="p">;</span> <span class="c1">// Average measured difference</span>
</span><span class='line'>   <span class="n">Count</span>  <span class="n">mark</span><span class="p">;</span>    <span class="c1">// Time when started</span>
</span><span class='line'>   <span class="kt">bool</span>   <span class="n">running</span><span class="p">;</span> <span class="c1">// Flag indicating that the stopwatch is running</span>
</span><span class='line'>   <span class="kt">bool</span>   <span class="n">cleared</span><span class="p">;</span> <span class="c1">// Flag indicating that the stopwatch is cleared</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Statistics</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>      <span class="n">last</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>      <span class="n">min</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>      <span class="n">max</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>      <span class="n">samples</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>      <span class="n">total</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>      <span class="n">average</span><span class="p">(</span><span class="mf">0.0</span><span class="p">),</span>
</span><span class='line'>      <span class="n">mark</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>      <span class="n">running</span><span class="p">(</span><span class="kc">false</span><span class="p">),</span>
</span><span class='line'>      <span class="n">cleared</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">Statistics</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">stats</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; - Last    : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">stats</span><span class="p">.</span><span class="n">last</span>    <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>         <span class="o">&lt;&lt;</span> <span class="s">&quot; - Min     : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">stats</span><span class="p">.</span><span class="n">min</span>     <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>         <span class="o">&lt;&lt;</span> <span class="s">&quot; - Max     : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">stats</span><span class="p">.</span><span class="n">max</span>     <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>         <span class="o">&lt;&lt;</span> <span class="s">&quot; - Average : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">stats</span><span class="p">.</span><span class="n">average</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>         <span class="o">&lt;&lt;</span> <span class="s">&quot; - Total   : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">stats</span><span class="p">.</span><span class="n">total</span>   <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>         <span class="o">&lt;&lt;</span> <span class="s">&quot; - Samples : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">stats</span><span class="p">.</span><span class="n">samples</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">os</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we need the actual implementation to track those statistics. It will provide <code>start</code>, <code>stop</code>, and <code>reset</code>, and will utilize a clock to get the timestamps to measure. Both the static and object types will utilize this implementation:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">ClockT</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">StopwatchImplementation</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">ClockT</span> <span class="n">Clock</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">Count</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="kt">void</span> <span class="n">_start</span><span class="p">(</span><span class="n">Statistics</span><span class="o">&amp;</span> <span class="n">stats</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">stats</span><span class="p">.</span><span class="n">mark</span> <span class="o">=</span> <span class="n">_clock</span><span class="p">();</span> <span class="c1">// Get the current time</span>
</span><span class='line'>      <span class="n">stats</span><span class="p">.</span><span class="n">running</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>  <span class="c1">// Stopwatch is now running</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="kt">void</span> <span class="n">_stop</span><span class="p">(</span><span class="n">Statistics</span><span class="o">&amp;</span> <span class="n">stats</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Only update the statistics if the stopwatch was running</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">stats</span><span class="p">.</span><span class="n">running</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="c1">// No longer running</span>
</span><span class='line'>         <span class="n">stats</span><span class="p">.</span><span class="n">running</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Grab the current time</span>
</span><span class='line'>         <span class="n">Count</span> <span class="n">now</span> <span class="o">=</span> <span class="n">_clock</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Calculate the difference while avoiding overflow</span>
</span><span class='line'>         <span class="n">stats</span><span class="p">.</span><span class="n">last</span> <span class="o">=</span> <span class="n">now</span> <span class="o">&gt;</span> <span class="n">stats</span><span class="p">.</span><span class="n">mark</span>
</span><span class='line'>                      <span class="o">?</span> <span class="n">now</span> <span class="o">-</span> <span class="n">stats</span><span class="p">.</span><span class="n">mark</span>
</span><span class='line'>                      <span class="o">:</span> <span class="n">stats</span><span class="p">.</span><span class="n">mark</span> <span class="o">-</span> <span class="n">now</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Keep track of the total and samples</span>
</span><span class='line'>         <span class="n">stats</span><span class="p">.</span><span class="n">total</span> <span class="o">+=</span> <span class="n">stats</span><span class="p">.</span><span class="n">last</span><span class="p">;</span>
</span><span class='line'>         <span class="o">++</span><span class="n">stats</span><span class="p">.</span><span class="n">samples</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Do not take a min from a cleared state, or it will be zero</span>
</span><span class='line'>         <span class="n">stats</span><span class="p">.</span><span class="n">min</span> <span class="o">=</span> <span class="n">stats</span><span class="p">.</span><span class="n">cleared</span>
</span><span class='line'>                     <span class="o">?</span> <span class="n">stats</span><span class="p">.</span><span class="n">last</span>
</span><span class='line'>                     <span class="o">:</span> <span class="n">std</span><span class="o">::</span><span class="n">min</span><span class="p">(</span><span class="n">stats</span><span class="p">.</span><span class="n">min</span><span class="p">,</span> <span class="n">stats</span><span class="p">.</span><span class="n">last</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Get the max</span>
</span><span class='line'>         <span class="n">stats</span><span class="p">.</span><span class="n">max</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="n">stats</span><span class="p">.</span><span class="n">max</span><span class="p">,</span> <span class="n">stats</span><span class="p">.</span><span class="n">last</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Calculate the average</span>
</span><span class='line'>         <span class="n">stats</span><span class="p">.</span><span class="n">average</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">(</span><span class="n">stats</span><span class="p">.</span><span class="n">total</span><span class="p">)</span> <span class="o">/</span>
</span><span class='line'>                         <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">(</span><span class="n">stats</span><span class="p">.</span><span class="n">samples</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// No longer cleared</span>
</span><span class='line'>         <span class="n">stats</span><span class="p">.</span><span class="n">cleared</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="kt">void</span> <span class="n">_reset</span><span class="p">(</span><span class="n">Statistics</span><span class="o">&amp;</span> <span class="n">stats</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">stats</span><span class="p">.</span><span class="n">last</span>    <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">stats</span><span class="p">.</span><span class="n">min</span>     <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">stats</span><span class="p">.</span><span class="n">max</span>     <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">stats</span><span class="p">.</span><span class="n">samples</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">stats</span><span class="p">.</span><span class="n">total</span>   <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">stats</span><span class="p">.</span><span class="n">average</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">stats</span><span class="p">.</span><span class="n">mark</span>    <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">stats</span><span class="p">.</span><span class="n">running</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>      <span class="n">stats</span><span class="p">.</span><span class="n">cleared</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="kt">void</span> <span class="n">_print</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">name</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">Statistics</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">stats</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">stats</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="n">Clock</span> <span class="n">_clock</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will notice that the clock has been completely abstracted away from the stopwatch implementation, allowing any functor to be plugged in. By default, we will use <code>boost::chrono::high_resolution_clock</code> with configurable units. Here is the clock implementation:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Resolution</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Clock</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">Count</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Clock</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>      <span class="c1">// Initialize the reference to creation time</span>
</span><span class='line'>      <span class="n">_duration_reference</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">high_resolution_clock</span><span class="o">::</span><span class="n">now</span><span class="p">())</span>
</span><span class='line'>   <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Count</span> <span class="k">operator</span><span class="p">()(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Return the difference between now and the reference in the resolution units</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">Count</span><span class="o">&gt;</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">duration_cast</span><span class="o">&lt;</span><span class="n">Resolution</span><span class="o">&gt;</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">high_resolution_clock</span><span class="o">::</span><span class="n">now</span><span class="p">()</span> <span class="o">-</span> <span class="n">_duration_reference</span><span class="p">).</span><span class="n">count</span><span class="p">());</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>   <span class="n">boost</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">high_resolution_clock</span><span class="o">::</span><span class="n">time_point</span> <span class="n">_duration_reference</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are many different configurations that the clock can use:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">typedef</span> <span class="n">detail</span><span class="o">::</span><span class="n">Clock</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">hours</span><span class="o">&gt;</span>        <span class="n">HourClock</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">detail</span><span class="o">::</span><span class="n">Clock</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">minutes</span><span class="o">&gt;</span>      <span class="n">MinuteClock</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">detail</span><span class="o">::</span><span class="n">Clock</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">seconds</span><span class="o">&gt;</span>      <span class="n">SecondClock</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">detail</span><span class="o">::</span><span class="n">Clock</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">milliseconds</span><span class="o">&gt;</span> <span class="n">MillisecondClock</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">detail</span><span class="o">::</span><span class="n">Clock</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">microseconds</span><span class="o">&gt;</span> <span class="n">MicrosecondClock</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">detail</span><span class="o">::</span><span class="n">Clock</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">nanoseconds</span><span class="o">&gt;</span>  <span class="n">NanosecondClock</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have all the pieces, time to make the static and object stopwatch types. First, the static one. It is a static class with a template parameter that allows static instantiations to be differentiated. All methods are static and forwarded to the base class:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">TagT</span>   <span class="o">=</span> <span class="kt">void</span><span class="p">,</span>             <span class="c1">// Specify a tag for &quot;compile-time&quot; instances</span>
</span><span class='line'>         <span class="k">typename</span> <span class="n">ClockT</span> <span class="o">=</span> <span class="n">MicrosecondClock</span><span class="o">&gt;</span> <span class="c1">// Default to the microsecond clock</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Stopwatch</span> <span class="o">:</span> <span class="k">public</span> <span class="n">detail</span><span class="o">::</span><span class="n">StopwatchImplementation</span><span class="o">&lt;</span><span class="n">ClockT</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">TagT</span>   <span class="n">Tag</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">ClockT</span> <span class="n">Clock</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">Stopwatch</span><span class="o">&lt;</span><span class="n">Tag</span><span class="p">,</span> <span class="n">Clock</span><span class="o">&gt;</span> <span class="n">Self</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">detail</span><span class="o">::</span><span class="n">StopwatchImplementation</span><span class="o">&lt;</span><span class="n">Clock</span><span class="o">&gt;</span> <span class="n">Base</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">Count</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Forward to the base implementation</span>
</span><span class='line'>   <span class="k">static</span> <span class="kt">void</span> <span class="n">start</span> <span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">Base</span><span class="o">::</span><span class="n">_start</span> <span class="p">(</span><span class="n">_statistics</span><span class="p">);}</span>
</span><span class='line'>   <span class="k">static</span> <span class="kt">void</span> <span class="n">stop</span>  <span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">Base</span><span class="o">::</span><span class="n">_stop</span>  <span class="p">(</span><span class="n">_statistics</span><span class="p">);}</span>
</span><span class='line'>   <span class="k">static</span> <span class="kt">void</span> <span class="n">reset</span> <span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">Base</span><span class="o">::</span><span class="n">_reset</span> <span class="p">(</span><span class="n">_statistics</span><span class="p">);}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">Base</span><span class="o">::</span><span class="n">_print</span><span class="p">(</span><span class="n">name</span><span class="p">(),</span> <span class="n">_statistics</span><span class="p">,</span> <span class="n">os</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Accessors</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="n">Count</span>  <span class="n">last</span>    <span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="k">return</span> <span class="n">_statistics</span><span class="p">.</span><span class="n">last</span><span class="p">;}</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="n">Count</span>  <span class="n">min</span>     <span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="k">return</span> <span class="n">_statistics</span><span class="p">.</span><span class="n">min</span><span class="p">;}</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="n">Count</span>  <span class="n">max</span>     <span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="k">return</span> <span class="n">_statistics</span><span class="p">.</span><span class="n">max</span><span class="p">;}</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="n">Count</span>  <span class="n">samples</span> <span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="k">return</span> <span class="n">_statistics</span><span class="p">.</span><span class="n">samples</span><span class="p">;}</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="n">Count</span>  <span class="n">total</span>   <span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="k">return</span> <span class="n">_statistics</span><span class="p">.</span><span class="n">total</span><span class="p">;}</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">double</span> <span class="n">average</span> <span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="k">return</span> <span class="n">_statistics</span><span class="p">.</span><span class="n">average</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="n">detail</span><span class="o">::</span><span class="n">Statistics</span> <span class="n">_statistics</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Return the name of the tag as a string</span>
</span><span class='line'>   <span class="k">static</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">units</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">demangle</span><span class="p">(</span><span class="k">typeid</span><span class="p">(</span><span class="n">Tag</span><span class="p">).</span><span class="n">name</span><span class="p">());</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Prevent this class from being instantiated</span>
</span><span class='line'>   <span class="n">Stopwatch</span><span class="p">(</span><span class="kt">void</span><span class="p">){}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice how the tag type defaults to <code>void</code>. We want to specialize the stopwatch for the void type and allow the specialization to act as the object stopwatch. This allows us to omit the tag type to instantiate an object:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// Specialize on the void tag to allow creating instances</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">ClockT</span> <span class="o">=</span> <span class="n">MicrosecondClock</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Stopwatch</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">,</span> <span class="n">ClockT</span><span class="o">&gt;</span> <span class="o">:</span> <span class="k">public</span> <span class="n">detail</span><span class="o">::</span><span class="n">StopwatchImplementation</span><span class="o">&lt;</span><span class="n">ClockT</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">ClockT</span>                                 <span class="n">Clock</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">Stopwatch</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">,</span> <span class="n">Clock</span><span class="o">&gt;</span>                 <span class="n">Self</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">detail</span><span class="o">::</span><span class="n">StopwatchImplementation</span><span class="o">&lt;</span><span class="n">Clock</span><span class="o">&gt;</span> <span class="n">Base</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span>                     <span class="n">Count</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Stopwatch</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">tag</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>      <span class="n">_tag</span><span class="p">(</span><span class="n">tag</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Forward to the base implementation</span>
</span><span class='line'>   <span class="kt">void</span> <span class="n">start</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span><span class="n">Base</span><span class="o">::</span><span class="n">_start</span> <span class="p">(</span><span class="n">_statistics</span><span class="p">);}</span>
</span><span class='line'>   <span class="kt">void</span> <span class="n">stop</span>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span><span class="n">Base</span><span class="o">::</span><span class="n">_stop</span>  <span class="p">(</span><span class="n">_statistics</span><span class="p">);}</span>
</span><span class='line'>   <span class="kt">void</span> <span class="n">reset</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span><span class="n">Base</span><span class="o">::</span><span class="n">_reset</span> <span class="p">(</span><span class="n">_statistics</span><span class="p">);}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">Base</span><span class="o">::</span><span class="n">_print</span><span class="p">(</span><span class="n">_tag</span><span class="p">,</span> <span class="n">_statistics</span><span class="p">,</span> <span class="n">os</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">Self</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">obj</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">os</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">os</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Accessors</span>
</span><span class='line'>   <span class="kr">inline</span> <span class="n">Count</span>  <span class="n">last</span>    <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">_statistics</span><span class="p">.</span><span class="n">last</span><span class="p">;}</span>
</span><span class='line'>   <span class="kr">inline</span> <span class="n">Count</span>  <span class="n">min</span>     <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">_statistics</span><span class="p">.</span><span class="n">min</span><span class="p">;}</span>
</span><span class='line'>   <span class="kr">inline</span> <span class="n">Count</span>  <span class="n">max</span>     <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">_statistics</span><span class="p">.</span><span class="n">max</span><span class="p">;}</span>
</span><span class='line'>   <span class="kr">inline</span> <span class="n">Count</span>  <span class="n">samples</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">_statistics</span><span class="p">.</span><span class="n">samples</span><span class="p">;}</span>
</span><span class='line'>   <span class="kr">inline</span> <span class="n">Count</span>  <span class="n">total</span>   <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">_statistics</span><span class="p">.</span><span class="n">total</span><span class="p">;}</span>
</span><span class='line'>   <span class="kr">inline</span> <span class="kt">double</span> <span class="n">average</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">_statistics</span><span class="p">.</span><span class="n">average</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// The tag for this object</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">_tag</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// A statistics object specifically for this stopwatch instance</span>
</span><span class='line'>   <span class="n">detail</span><span class="o">::</span><span class="n">Statistics</span> <span class="n">_statistics</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are all set! Time to test it out:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// Define a tag</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Static</span><span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">using</span> <span class="k">namespace</span> <span class="n">stopwatch</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">Stopwatch</span><span class="o">&lt;</span><span class="n">Static</span><span class="p">,</span> <span class="n">MillisecondClock</span><span class="o">&gt;</span> <span class="n">static_stopwatch</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Stopwatch</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">,</span> <span class="n">MillisecondClock</span><span class="o">&gt;</span> <span class="n">object_stopwatch</span><span class="p">(</span><span class="s">&quot;Object&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">static_stopwatch</span><span class="o">::</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>      <span class="n">object_stopwatch</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">boost</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">posix_time</span><span class="o">::</span><span class="n">milliseconds</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">static_stopwatch</span><span class="o">::</span><span class="n">stop</span><span class="p">();</span>
</span><span class='line'>      <span class="n">object_stopwatch</span><span class="p">.</span><span class="n">stop</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">static_stopwatch</span><span class="o">::</span><span class="n">print</span><span class="p">();</span>
</span><span class='line'>  <span class="n">object_stopwatch</span><span class="p">.</span><span class="n">print</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To compile this, run the following command:</p>

<pre><code>g++ stopwatch.cpp -l boost_chrono -l boost_system -l boost_thread
</code></pre>

<p>The output I get is:</p>

<pre><code>Static:
 - Last    : 10
 - Min     : 10
 - Max     : 11
 - Average : 10.19
 - Total   : 1019
 - Samples : 100
Object:
 - Last    : 10
 - Min     : 10
 - Max     : 11
 - Average : 10.19
 - Total   : 1019
 - Samples : 100
</code></pre>

<p>As you can see, both types give the same results.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerfile Generator]]></title>
    <link href="http://jrruethe.github.io/blog/2015/09/20/dockerfile-generator/"/>
    <updated>2015-09-20T15:19:17-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/09/20/dockerfile-generator</id>
    <content type="html"><![CDATA[<p>A lot of the Dockerfiles I write use the same template and tricks. I decided to write a ruby script to generate my Dockerfiles for me based on a minimal amount of input. I did this for a couple reasons:</p>

<ul>
<li>I wanted my images to be as small as possible</li>
<li>I wanted consistent and readable Dockerfiles</li>
<li>I wanted to make it easy to update my images</li>
<li>I wanted all my images to be easy to port to the Raspberry Pi</li>
</ul>


<h2>Dockerfile Tricks</h2>

<h3>Keeping the image small</h3>

<p>Every command in a Dockerfile causes a layer to be committed. Once a layer is committed, files on that layer can be hidden, but not deleted. For that reason, it becomes advantageous to run multiple commands at a time. For example, don&rsquo;t do this:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>RUN apt-get update
</span><span class='line'>RUN apt-get install -y build_essential
</span><span class='line'>RUN apt-get clean
</span></code></pre></td></tr></table></div></figure>


<p>Line 2 will download a bunch of packages and install them. Line 3 attempts to clean up the packages that were downloaded, but it&rsquo;s too late; they were already committed to the layer and can only be hidden. The overall image will be large because that layer still needs to be downloaded.</p>

<p>A better approach is:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>RUN apt-get update <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    apt-get install -y build_essential <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    apt-get clean
</span></code></pre></td></tr></table></div></figure>


<p>This will run all three commands and apply the end result to a single layer, greatly reducing the image size.</p>

<h4>The ADD command</h4>

<p>The <code>ADD</code> command hinders our ability to keep the image small, because it will commit files to a layer without giving a chance to delete those files later. This is fine for files that are supposed to be permanently in the image, but what about temporary files? For example:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ADD some_package.deb /
</span><span class='line'>
</span><span class='line'>RUN dpkg -i /some_package.deb <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    rm -f /some_package.deb
</span></code></pre></td></tr></table></div></figure>


<p>The package removal will only hide the file; the image still contains the data on a lower layer.</p>

<p>Instead, a better approach is to run a web server and download temporary files to your image, allowing the same <code>RUN</code> statement to later delete the temporary files. To do this, start a server before building your image:</p>

<pre><code>python -m SimpleHTTPServer 8888
</code></pre>

<p>Then do the following in your Dockerfile:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>RUN wget http://&lt;ip_address&gt;:8888/package.deb <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    <span class="o">(</span>dpkg -i package.deb <span class="o">||</span> <span class="nb">true</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    apt-get -y -f install --no-install-recommends <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span></code></pre></td></tr></table></div></figure>


<p>Replace <code>&lt;ip_address&gt;</code> with your <em>internal</em> ip address. To get that, use the following command:</p>

<pre><code>ip route get 8.8.8.8 | awk '{print $NF; exit}'
</code></pre>

<h3>Keeping the Dockerfile readable</h3>

<p>From the previous section, it stands to reason that putting all the commands on a single <code>RUN</code> statement will yield the smallest image (assuming you clean up after yourself). If there are a lot of commands, it can be difficult to read what is going on.</p>

<p>One trick is to interleave comments into the <code>RUN</code> statement by using backticks. Another common thing to do is add blank lines using backslashes, and align all the backslashes to the right:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>RUN <span class="sb">`</span><span class="c"># Update package list`             &amp;&amp; \</span>
</span><span class='line'>     apt-get update                     <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                           <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Install development tools`       &amp;&amp; \</span>
</span><span class='line'>     apt-get install -y build_essential <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                           <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Delete cached packages`          &amp;&amp; \</span>
</span><span class='line'>     apt-get clean
</span></code></pre></td></tr></table></div></figure>


<p>The result is much more readable, but it is tedious to make sure all the spacing is correct.</p>

<h2>Dockerfile Generator</h2>

<p>Incorporating the above tricks, I wrote a Dockerfile generator to quickly create Dockerfiles for simple projects:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># dockerfile-generator.rb</span>
</span><span class='line'><span class="c1"># Copyright (C) 2015 Joe Ruether jrruethe@gmail.com</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c1"># it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c1"># the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c1"># (at your option) any later version.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c1"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c1"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c1"># GNU General Public License for more details.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c1"># along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;set&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;yaml&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Dockerfile</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@from</span>       <span class="o">=</span> <span class="s2">&quot;phusion/baseimage:0.9.16&quot;</span>
</span><span class='line'>    <span class="vi">@maintainer</span> <span class="o">=</span> <span class="s2">&quot;Joe Ruether&quot;</span>
</span><span class='line'>    <span class="vi">@user</span>       <span class="o">=</span> <span class="s2">&quot;user&quot;</span>
</span><span class='line'>    <span class="vi">@service</span>    <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@requirements</span> <span class="o">=</span> <span class="no">Set</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@packages</span>     <span class="o">=</span> <span class="no">Set</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@volumes</span>      <span class="o">=</span> <span class="no">Set</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@ports</span>        <span class="o">=</span> <span class="no">Set</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Files to add before and after the run command</span>
</span><span class='line'>    <span class="vi">@adds</span>       <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="vi">@configures</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Command lists for the run section</span>
</span><span class='line'>    <span class="vi">@begin_commands</span>        <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="vi">@pre_install_commands</span>  <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="vi">@install_commands</span>      <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="vi">@post_install_commands</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="vi">@run_commands</span>          <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="vi">@end_commands</span>          <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Set if deb packages need dependencies to be resolved</span>
</span><span class='line'>    <span class="vi">@deb_flag</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Used to download deb files from the host  </span>
</span><span class='line'>    <span class="vi">@ip_address</span> <span class="o">=</span> <span class="sb">`ip route get 8.8.8.8 | awk &#39;{print $NF; exit}&#39;`</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">##############################################################################</span>
</span><span class='line'>  <span class="kp">public</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># string ()</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">finalize</span>
</span><span class='line'>    <span class="n">lines</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;FROM </span><span class="si">#{</span><span class="vi">@from</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;MAINTAINER </span><span class="si">#{</span><span class="vi">@maintainer</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="vi">@ports</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;EXPOSE </span><span class="si">#{</span><span class="nb">p</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;&quot;</span> <span class="k">if</span> <span class="o">!</span><span class="vi">@ports</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>    <span class="n">lines</span> <span class="o">+=</span> <span class="vi">@adds</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;&quot;</span> <span class="k">if</span> <span class="o">!</span><span class="vi">@adds</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="n">build_run_command</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="n">lines</span> <span class="o">+=</span> <span class="vi">@configures</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;&quot;</span> <span class="k">if</span> <span class="o">!</span><span class="vi">@configures</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>    <span class="vi">@volumes</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;VOLUME </span><span class="si">#{</span><span class="n">v</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;&quot;</span> <span class="k">if</span> <span class="o">!</span><span class="vi">@volumes</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;ENTRYPOINT [</span><span class="se">\&quot;</span><span class="s2">/sbin/my_init</span><span class="se">\&quot;</span><span class="s2">]&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># void (string)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">set_user</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>    <span class="n">add_begin_command</span> <span class="n">comment</span> <span class="s2">&quot;Adjusting user permissions&quot;</span>
</span><span class='line'>    <span class="n">add_begin_command</span> <span class="s2">&quot;usermod -u 1000 </span><span class="si">#{</span><span class="n">user</span><span class="si">}</span><span class="s2"> &amp;&amp; groupmod -g 1000 </span><span class="si">#{</span><span class="n">user</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">add_begin_command</span> <span class="n">blank</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># void (string)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">set_service</span><span class="p">(</span><span class="n">service</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@service</span> <span class="o">=</span> <span class="n">service</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># void (string, string)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">destination</span> <span class="o">=</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@adds</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;ADD </span><span class="si">#{</span><span class="n">source</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">destination</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># void (string, string)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">configure</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">destination</span> <span class="o">=</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@configures</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;ADD </span><span class="si">#{</span><span class="n">source</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">destination</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># void (int)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">expose</span><span class="p">(</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@ports</span><span class="o">.</span><span class="n">add</span> <span class="n">port</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># void (string, string, string)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_repository</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">deb</span><span class="p">,</span> <span class="n">key</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">add_pre_install_command</span> <span class="n">comment</span> <span class="s2">&quot;Adding </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2"> repository&quot;</span>
</span><span class='line'>    <span class="n">add_pre_install_command</span> <span class="s2">&quot;wget -O - </span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2"> | apt-key add -&quot;</span> <span class="k">if</span> <span class="n">key</span>
</span><span class='line'>    <span class="n">add_pre_install_command</span> <span class="s2">&quot;echo &#39;</span><span class="si">#{</span><span class="n">deb</span><span class="si">}</span><span class="s2">&#39; &gt;&gt; /etc/apt/sources.list.d/</span><span class="si">#{</span><span class="nb">name</span><span class="o">.</span><span class="n">downcase</span><span class="si">}</span><span class="s2">.list&quot;</span>
</span><span class='line'>    <span class="n">add_pre_install_command</span> <span class="n">blank</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@requirements</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;wget&quot;</span>
</span><span class='line'>    <span class="vi">@requirements</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;ssl-cert&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># void (string, string)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_ppa</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">ppa</span><span class="p">)</span>
</span><span class='line'>    <span class="n">add_pre_install_command</span> <span class="n">comment</span> <span class="s2">&quot;Adding </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2"> PPA&quot;</span>
</span><span class='line'>    <span class="n">add_pre_install_command</span> <span class="s2">&quot;add-apt-repository -y </span><span class="si">#{</span><span class="n">ppa</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">add_pre_install_command</span> <span class="n">blank</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@requirements</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;software-properties-common&quot;</span>
</span><span class='line'>    <span class="vi">@requirements</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;python-software-properties&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># void (string)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">install_package</span><span class="p">(</span><span class="n">package</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@packages</span><span class="o">.</span><span class="n">add</span> <span class="n">package</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># void (string)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">install_deb</span><span class="p">(</span><span class="n">deb</span><span class="p">)</span>
</span><span class='line'>    <span class="n">add_install_command</span> <span class="n">comment</span> <span class="s2">&quot;Installing deb package&quot;</span>
</span><span class='line'>    <span class="n">add_install_command</span> <span class="s2">&quot;wget http://</span><span class="si">#{</span><span class="vi">@ip_address</span><span class="si">}</span><span class="s2">:8888/</span><span class="si">#{</span><span class="n">deb</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">add_install_command</span> <span class="s2">&quot;(dpkg -i </span><span class="si">#{</span><span class="n">deb</span><span class="si">}</span><span class="s2"> || true)&quot;</span>
</span><span class='line'>    <span class="n">add_install_command</span> <span class="n">blank</span>
</span><span class='line'>    <span class="n">add_post_install_command</span> <span class="s2">&quot;rm -f </span><span class="si">#{</span><span class="n">deb</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@packages</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;wget&quot;</span>
</span><span class='line'>    <span class="vi">@deb_flag</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># void (string)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
</span><span class='line'>    <span class="n">command</span><span class="o">.</span><span class="n">strip!</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">command</span><span class="o">.</span><span class="n">start_with?</span> <span class="s2">&quot;#&quot;</span>
</span><span class='line'>      <span class="n">add_run_command</span> <span class="n">comment</span> <span class="n">command</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">strip</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">command</span><span class="o">.</span><span class="n">match</span> <span class="sr">/^\s*$/</span>
</span><span class='line'>      <span class="n">add_run_command</span> <span class="n">blank</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">add_run_command</span> <span class="n">command</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># void (string)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_volume</span><span class="p">(</span><span class="n">volume</span><span class="p">)</span>
</span><span class='line'>    <span class="n">add_end_command</span> <span class="n">comment</span> <span class="s2">&quot;Fixing permission errors for volume&quot;</span>
</span><span class='line'>    <span class="n">add_end_command</span> <span class="s2">&quot;chown -R </span><span class="si">#{</span><span class="vi">@user</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="vi">@user</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">volume</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">add_end_command</span> <span class="n">blank</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@volumes</span><span class="o">.</span><span class="n">add</span> <span class="n">volume</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">##############################################################################</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># string (string)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">comment</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;`</span><span class="se">\#</span><span class="s2"> </span><span class="si">#{</span><span class="n">string</span><span class="si">}</span><span class="s2">`&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># string ()</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">blank</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="se">\\</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># [string] ([string])</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">build_install_command</span><span class="p">(</span><span class="n">packages</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Convert the set to an array</span>
</span><span class='line'>    <span class="n">packages</span> <span class="o">=</span> <span class="n">packages</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Specify the command</span>
</span><span class='line'>    <span class="n">command</span> <span class="o">=</span> <span class="s2">&quot;apt-get install -y --no-install-recommends&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Make an array of paddings</span>
</span><span class='line'>    <span class="n">lines</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot; &quot;</span> <span class="o">*</span> <span class="n">command</span><span class="o">.</span><span class="n">length</span><span class="p">()</span><span class="o">]</span> <span class="o">*</span> <span class="n">packages</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Overwrite the first line with the command</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">command</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Append the packages and backslashes to each line</span>
</span><span class='line'>    <span class="n">lines</span> <span class="o">=</span> <span class="n">lines</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">packages</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span><span class="p">{</span><span class="o">|</span><span class="n">l</span><span class="p">,</span> <span class="nb">p</span><span class="o">|</span> <span class="n">l</span> <span class="o">+=</span> <span class="s2">&quot; </span><span class="si">#{</span><span class="nb">p</span><span class="si">}</span><span class="s2"> </span><span class="se">\\</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Convert the backslash on the last line to &quot;&amp;&amp; \&quot;</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">[-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">lines</span><span class="o">[-</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">2</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;&amp;&amp; </span><span class="se">\\</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Add comment and blank</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">comment</span><span class="p">(</span><span class="s2">&quot;Installing packages&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="n">blank</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># string ()</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">build_run_command</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">lines</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Any packages that were requirements can be removed from the packages list</span>
</span><span class='line'>    <span class="vi">@packages</span> <span class="o">=</span> <span class="vi">@packages</span><span class="o">.</span><span class="n">difference</span> <span class="vi">@requirements</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">lines</span> <span class="o">+=</span> <span class="n">begin_commands</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># If required packages were specified</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">!</span><span class="vi">@requirements</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>      <span class="c1"># Update the package list</span>
</span><span class='line'>      <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="n">comment</span> <span class="s2">&quot;Updating Package List&quot;</span>
</span><span class='line'>      <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;apt-get update&quot;</span>
</span><span class='line'>      <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="n">blank</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Install requirements</span>
</span><span class='line'>      <span class="n">lines</span> <span class="o">+=</span> <span class="n">build_install_command</span> <span class="vi">@requirements</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Run pre-install commands</span>
</span><span class='line'>    <span class="n">lines</span> <span class="o">+=</span> <span class="n">pre_install_commands</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Add apt-cacher proxy</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="n">comment</span> <span class="s2">&quot;Adding apt-cacher-ng proxy&quot;</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;echo &#39;Acquire::http { Proxy </span><span class="se">\&quot;</span><span class="s2">http://172.17.42.1:3142</span><span class="se">\&quot;</span><span class="s2">; };&#39; &gt; /etc/apt/apt.conf.d/01proxy&quot;</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="n">blank</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Update</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="n">comment</span> <span class="s2">&quot;Updating Package List&quot;</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;apt-get update&quot;</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="n">blank</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Install packages</span>
</span><span class='line'>    <span class="n">lines</span> <span class="o">+=</span> <span class="n">build_install_command</span> <span class="vi">@packages</span> <span class="k">unless</span> <span class="vi">@packages</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Run install commands</span>
</span><span class='line'>    <span class="n">lines</span> <span class="o">+=</span> <span class="n">install_commands</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># If manual deb packages were specified</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@deb_flag</span>
</span><span class='line'>      <span class="c1"># Resolve their dependencies</span>
</span><span class='line'>      <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="n">comment</span> <span class="s2">&quot;Installing deb package dependencies&quot;</span>
</span><span class='line'>      <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;apt-get -y -f install --no-install-recommends&quot;</span>
</span><span class='line'>      <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="n">blank</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Run post-install commands</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">!</span><span class="vi">@post_install_commands</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>      <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="n">comment</span> <span class="s2">&quot;Removing temporary files&quot;</span>
</span><span class='line'>      <span class="n">lines</span> <span class="o">+=</span> <span class="n">post_install_commands</span>
</span><span class='line'>      <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="n">blank</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Clean up</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="n">comment</span> <span class="s2">&quot;Cleaning up after installation&quot;</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*&quot;</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="n">blank</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Remove apt-cacher proxy</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="n">comment</span> <span class="s2">&quot;Removing apt-cacher-ng proxy&quot;</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;rm -f /etc/apt/apt.conf.d/01proxy&quot;</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="n">blank</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Run commands</span>
</span><span class='line'>    <span class="n">lines</span> <span class="o">+=</span> <span class="n">run_commands</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="n">blank</span> <span class="k">if</span> <span class="o">!</span><span class="vi">@run_commands</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Enable service on startup</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@service</span>
</span><span class='line'>      <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="n">comment</span> <span class="s2">&quot;Enable service on startup&quot;</span>
</span><span class='line'>      <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;sed -i </span><span class="se">\&quot;</span><span class="s2">s@exit 0@service </span><span class="si">#{</span><span class="vi">@service</span><span class="si">}</span><span class="s2"> start@g</span><span class="se">\&quot;</span><span class="s2"> /etc/rc.local&quot;</span>
</span><span class='line'>      <span class="n">lines</span><span class="o">.</span><span class="n">push</span> <span class="n">blank</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># End commands</span>
</span><span class='line'>    <span class="n">lines</span> <span class="o">+=</span> <span class="n">end_commands</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Determine the longest line</span>
</span><span class='line'>    <span class="n">longest_length</span> <span class="o">=</span> <span class="n">lines</span><span class="o">.</span><span class="n">max_by</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:length</span><span class="p">)</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># For each line</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">l</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Determine how many spaces needed to indent</span>
</span><span class='line'>      <span class="n">length_to_extend</span> <span class="o">=</span> <span class="n">longest_length</span> <span class="o">-</span> <span class="n">l</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Indent the line</span>
</span><span class='line'>      <span class="n">length_to_extend</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">l</span><span class="o">.</span><span class="n">start_with?</span> <span class="s2">&quot;`&quot;</span>
</span><span class='line'>      <span class="n">l</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s2">&quot; &quot;</span> <span class="o">*</span> <span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s2">&quot;`&quot;</span><span class="p">)</span> <span class="p">?</span> <span class="mi">4</span> <span class="p">:</span> <span class="mi">5</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Add or Extend end markers </span>
</span><span class='line'>      <span class="k">if</span> <span class="n">l</span><span class="o">.</span><span class="n">end_with?</span> <span class="s2">&quot; &amp;&amp; </span><span class="se">\\</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">length_to_extend</span> <span class="o">+=</span> <span class="mi">5</span>
</span><span class='line'>        <span class="n">l</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="o">-</span><span class="mi">6</span><span class="p">,</span> <span class="s2">&quot; &quot;</span> <span class="o">*</span> <span class="n">length_to_extend</span><span class="p">)</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="n">l</span><span class="o">.</span><span class="n">end_with?</span> <span class="s2">&quot; </span><span class="se">\\</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">length_to_extend</span> <span class="o">+=</span> <span class="mi">5</span>
</span><span class='line'>        <span class="n">l</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="s2">&quot; &quot;</span> <span class="o">*</span> <span class="n">length_to_extend</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">l</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&quot; &quot;</span> <span class="o">*</span> <span class="n">length_to_extend</span><span class="p">)</span>
</span><span class='line'>        <span class="n">l</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&quot; &amp;&amp; </span><span class="se">\\</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># First line should start with &quot;RUN&quot;</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;RUN&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Last line should not end with marker</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">[-</span><span class="mi">1</span><span class="o">].</span><span class="n">gsub!</span> <span class="s2">&quot; &amp;&amp; </span><span class="se">\\</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">[-</span><span class="mi">1</span><span class="o">].</span><span class="n">gsub!</span> <span class="s2">&quot; </span><span class="se">\\</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Last line might be blank now, do it again</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">lines</span><span class="o">[-</span><span class="mi">1</span><span class="o">].</span><span class="n">match</span> <span class="sr">/^\s*$/</span>
</span><span class='line'>      <span class="n">lines</span><span class="o">.</span><span class="n">delete_at</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Last line should not end with marker</span>
</span><span class='line'>      <span class="n">lines</span><span class="o">[-</span><span class="mi">1</span><span class="o">].</span><span class="n">gsub!</span> <span class="s2">&quot; &amp;&amp; </span><span class="se">\\</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>      <span class="n">lines</span><span class="o">[-</span><span class="mi">1</span><span class="o">].</span><span class="n">gsub!</span> <span class="s2">&quot; </span><span class="se">\\</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Make a string</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">join</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">##############################################################################</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Some metaprogramming to handle the various command lists</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">handle</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">class_eval</span><span class="p">(</span><span class="s2">&quot;def </span><span class="si">#{</span><span class="n">arg</span><span class="si">}</span><span class="s2">;@</span><span class="si">#{</span><span class="n">arg</span><span class="si">}</span><span class="s2">;end&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">class_eval</span><span class="p">(</span><span class="s2">&quot;def add_</span><span class="si">#{</span><span class="n">arg</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">2</span><span class="o">]</span><span class="si">}</span><span class="s2">(val);@</span><span class="si">#{</span><span class="n">arg</span><span class="si">}</span><span class="s2">.push val;end&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">handle</span> <span class="ss">:begin_commands</span>
</span><span class='line'>  <span class="n">handle</span> <span class="ss">:pre_install_commands</span>
</span><span class='line'>  <span class="n">handle</span> <span class="ss">:install_commands</span>
</span><span class='line'>  <span class="n">handle</span> <span class="ss">:post_install_commands</span>
</span><span class='line'>  <span class="n">handle</span> <span class="ss">:run_commands</span>
</span><span class='line'>  <span class="n">handle</span> <span class="ss">:end_commands</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">################################################################################</span>
</span><span class='line'><span class="c1"># Parse Dockerfile.yml</span>
</span><span class='line'>
</span><span class='line'><span class="n">dockerfile</span> <span class="o">=</span> <span class="no">Dockerfile</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">yaml</span> <span class="o">=</span> <span class="ss">YAML</span><span class="p">:</span><span class="ss">:load_file</span><span class="p">(</span><span class="s2">&quot;Dockerfile.yml&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Parse User tag</span>
</span><span class='line'><span class="n">dockerfile</span><span class="o">.</span><span class="n">set_user</span> <span class="n">yaml</span><span class="o">[</span><span class="s2">&quot;User&quot;</span><span class="o">]</span> <span class="k">if</span> <span class="n">yaml</span><span class="o">.</span><span class="n">has_key?</span> <span class="s2">&quot;User&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Parse Service tag</span>
</span><span class='line'><span class="n">dockerfile</span><span class="o">.</span><span class="n">set_service</span> <span class="n">yaml</span><span class="o">[</span><span class="s2">&quot;Service&quot;</span><span class="o">]</span> <span class="k">if</span> <span class="n">yaml</span><span class="o">.</span><span class="n">has_key?</span> <span class="s2">&quot;Service&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Parse Add tag</span>
</span><span class='line'><span class="n">yaml</span><span class="o">[</span><span class="s2">&quot;Add&quot;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">i</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">Hash</span>
</span><span class='line'>    <span class="n">dockerfile</span><span class="o">.</span><span class="n">add</span> <span class="n">i</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">i</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">dockerfile</span><span class="o">.</span><span class="n">add</span> <span class="n">i</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span> <span class="k">if</span> <span class="n">yaml</span><span class="o">.</span><span class="n">has_key?</span> <span class="s2">&quot;Add&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Parse Repositories tag</span>
</span><span class='line'><span class="n">yaml</span><span class="o">[</span><span class="s2">&quot;Repositories&quot;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">r</span><span class="o">[</span><span class="s2">&quot;URL&quot;</span><span class="o">].</span><span class="n">start_with?</span> <span class="s2">&quot;deb &quot;</span>
</span><span class='line'>    <span class="n">dockerfile</span><span class="o">.</span><span class="n">add_repository</span><span class="p">(</span><span class="n">r</span><span class="o">[</span><span class="s2">&quot;Name&quot;</span><span class="o">]</span><span class="p">,</span> <span class="n">r</span><span class="o">[</span><span class="s2">&quot;URL&quot;</span><span class="o">]</span><span class="p">,</span> <span class="n">r</span><span class="o">[</span><span class="s2">&quot;Key&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">r</span><span class="o">[</span><span class="s2">&quot;URL&quot;</span><span class="o">].</span><span class="n">start_with?</span> <span class="s2">&quot;ppa:&quot;</span>
</span><span class='line'>    <span class="n">dockerfile</span><span class="o">.</span><span class="n">add_ppa</span><span class="p">(</span><span class="n">r</span><span class="o">[</span><span class="s2">&quot;Name&quot;</span><span class="o">]</span><span class="p">,</span> <span class="n">r</span><span class="o">[</span><span class="s2">&quot;URL&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span> <span class="k">if</span> <span class="n">yaml</span><span class="o">.</span><span class="n">has_key?</span> <span class="s2">&quot;Repositories&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Parse Install tag</span>
</span><span class='line'><span class="n">yaml</span><span class="o">[</span><span class="s2">&quot;Install&quot;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">package</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">package</span><span class="o">.</span><span class="n">end_with?</span> <span class="s2">&quot;.deb&quot;</span>
</span><span class='line'>    <span class="n">dockerfile</span><span class="o">.</span><span class="n">install_deb</span> <span class="n">package</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">dockerfile</span><span class="o">.</span><span class="n">install_package</span> <span class="n">package</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span> <span class="k">if</span> <span class="n">yaml</span><span class="o">.</span><span class="n">has_key?</span> <span class="s2">&quot;Install&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Parse Run tag</span>
</span><span class='line'><span class="n">yaml</span><span class="o">[</span><span class="s2">&quot;Run&quot;</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>  <span class="n">dockerfile</span><span class="o">.</span><span class="n">run</span> <span class="n">line</span>
</span><span class='line'><span class="k">end</span> <span class="k">if</span> <span class="n">yaml</span><span class="o">.</span><span class="n">has_key?</span> <span class="s2">&quot;Run&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Parse Configure tag</span>
</span><span class='line'><span class="n">yaml</span><span class="o">[</span><span class="s2">&quot;Configure&quot;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">i</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">Hash</span>
</span><span class='line'>    <span class="n">dockerfile</span><span class="o">.</span><span class="n">add</span> <span class="n">i</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">i</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">dockerfile</span><span class="o">.</span><span class="n">add</span> <span class="n">i</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span> <span class="k">if</span> <span class="n">yaml</span><span class="o">.</span><span class="n">has_key?</span> <span class="s2">&quot;Configure&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Parse Expose tag</span>
</span><span class='line'><span class="n">yaml</span><span class="o">[</span><span class="s2">&quot;Expose&quot;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">port</span><span class="o">|</span>
</span><span class='line'>  <span class="n">dockerfile</span><span class="o">.</span><span class="n">expose</span> <span class="n">port</span>
</span><span class='line'><span class="k">end</span> <span class="k">if</span> <span class="n">yaml</span><span class="o">.</span><span class="n">has_key?</span> <span class="s2">&quot;Expose&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Parse Volumes tag</span>
</span><span class='line'><span class="n">yaml</span><span class="o">[</span><span class="s2">&quot;Volumes&quot;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">volume</span><span class="o">|</span>
</span><span class='line'>  <span class="n">dockerfile</span><span class="o">.</span><span class="n">add_volume</span> <span class="n">volume</span>
</span><span class='line'><span class="k">end</span> <span class="k">if</span> <span class="n">yaml</span><span class="o">.</span><span class="n">has_key?</span> <span class="s2">&quot;Volumes&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Output Dockerfile</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">dockerfile</span><span class="o">.</span><span class="n">finalize</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run it from a directory that contains a <code>Dockerfile.yml</code> and it will print out a Dockerfile:</p>

<pre><code>ruby dockerfile-generator.rb &gt; Dockerfile
</code></pre>

<h3>Dockerfile.yml Specifications</h3>

<p>A simplified Dockerfile specification can be put into <code>Dockerfile.yml</code>. The supported items are explained below. All items are optional.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># Specify a user that the service will run as, used for fixing permissions on volumes.</span>
</span><span class='line'><span class="l-Scalar-Plain">User</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">www-data</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Specify the service that will run on startup.</span>
</span><span class='line'><span class="l-Scalar-Plain">Service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">apache2</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Adds a file to / or the specified destination.</span>
</span><span class='line'><span class="c1"># Tar files are automatically unpacked.</span>
</span><span class='line'><span class="c1"># Remote files are allowed.</span>
</span><span class='line'><span class="c1"># Files are added before any commands are run.</span>
</span><span class='line'><span class="l-Scalar-Plain">Add</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">root_filesystem.tar</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Foo.txt</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/home/user/</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http://www.foo.com/Foo.txt</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/home/user/bar.txt</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Add Repositories and PPAs.</span>
</span><span class='line'><span class="c1"># URLs are either a complete deb line in sources.list format or a PPA.</span>
</span><span class='line'><span class="c1"># Keys are optional.</span>
</span><span class='line'><span class="l-Scalar-Plain">Repositories</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Owncloud</span>
</span><span class='line'>   <span class="l-Scalar-Plain">URL</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">deb http://download.opensuse.org/repositories/isv:/ownCloud:/community/xUbuntu_14.04/ /</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Key</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://download.opensuse.org/repositories/isv:ownCloud:community/xUbuntu_14.04/Release.key</span>
</span><span class='line'>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Bitcoin</span>
</span><span class='line'>   <span class="l-Scalar-Plain">URL</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ppa:bitcoin/bitcoin</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Install packages or deb files.</span>
</span><span class='line'><span class="l-Scalar-Plain">Install</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">build_essential</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">some_package.deb</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Run commands verbatim in bash format. Note the pipe character.</span>
</span><span class='line'><span class="l-Scalar-Plain">Run</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'> <span class="no"># This is a comment</span>
</span><span class='line'> <span class="no">echo Hello</span>
</span><span class='line'>
</span><span class='line'> <span class="no"># Another comment</span>
</span><span class='line'> <span class="no">rm -rf /</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Exactly the same as Add, however files are added AFTER commands are run.</span>
</span><span class='line'><span class="l-Scalar-Plain">Configure</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">root_filesystem.tar</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Foo.txt</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/home/user/</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http://www.foo.com/Foo.txt</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/home/user/bar.txt</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Ports to expose.</span>
</span><span class='line'><span class="l-Scalar-Plain">Expose</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">80</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">443</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Volumes to expose to the host.</span>
</span><span class='line'><span class="l-Scalar-Plain">Volumes</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/var/www/owncloud</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/mnt</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Examples</h3>

<p>Making a Dockerfile is really easy with this generator. The generated Dockerfile will automatically use an <code>apt-cacher-ng</code> container for downloading packages, which is handy if you are making a lot of images or rebuilding often. Therefore, remember to run the <code>apt-cacher-ng</code> container before building other images. Also remember to run the python web server if you are installing deb packages manually.</p>

<h4>Apt-cacher-ng</h4>

<p>First step is to create the <code>apt-cacher-ng</code> image so it can be used to build other images. Below is the <code>Dockerfile.yml</code>:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">User</span>   <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">apt-cacher-ng</span>
</span><span class='line'><span class="l-Scalar-Plain">Service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">apt-cacher-ng</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Install</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">apt-cacher-ng</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Expose</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">3142</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Volumes</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/var/cache/apt-cacher-ng</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thats it! Generating the Dockerfile yields (scroll to the right to see the <code>&amp;&amp; \</code> markers):</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>FROM phusion/baseimage:0.9.16
</span><span class='line'>MAINTAINER Joe Ruether
</span><span class='line'>
</span><span class='line'>EXPOSE 3142
</span><span class='line'>
</span><span class='line'>RUN <span class="sb">`</span><span class="c"># Adjusting user permissions`                                                            &amp;&amp; \</span>
</span><span class='line'>     usermod -u 1000 apt-cacher-ng <span class="o">&amp;&amp;</span> groupmod -g 1000 apt-cacher-ng                          <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Adding apt-cacher-ng proxy`                                                            &amp;&amp; \</span>
</span><span class='line'>     <span class="nb">echo</span> <span class="s1">&#39;Acquire::http { Proxy &quot;http://172.17.42.1:3142&quot;; };&#39;</span> &gt; /etc/apt/apt.conf.d/01proxy <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Updating Package List`                                                                 &amp;&amp; \</span>
</span><span class='line'>     apt-get update                                                                           <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Installing packages`                                                                   &amp;&amp; \</span>
</span><span class='line'>     apt-get install -y --no-install-recommends apt-cacher-ng                                 <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Cleaning up after installation`                                                        &amp;&amp; \</span>
</span><span class='line'>     apt-get clean <span class="o">&amp;&amp;</span> rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*                           <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Removing apt-cacher-ng proxy`                                                          &amp;&amp; \</span>
</span><span class='line'>     rm -f /etc/apt/apt.conf.d/01proxy                                                        <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Enable service on startup`                                                             &amp;&amp; \</span>
</span><span class='line'>     sed -i <span class="s2">&quot;s@exit 0@service apt-cacher-ng start@g&quot;</span> /etc/rc.local                            <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Fixing permission errors for volume`                                                   &amp;&amp; \</span>
</span><span class='line'>     chown -R apt-cacher-ng:apt-cacher-ng /var/cache/apt-cacher-ng
</span><span class='line'>
</span><span class='line'>VOLUME /var/cache/apt-cacher-ng
</span><span class='line'>
</span><span class='line'>ENTRYPOINT <span class="o">[</span><span class="s2">&quot;/sbin/my_init&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since it obviously cannot use <code>apt-cacher-ng</code> to build itself, simply remove those lines for this image:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>FROM phusion/baseimage:0.9.16
</span><span class='line'>MAINTAINER Joe Ruether
</span><span class='line'>
</span><span class='line'>EXPOSE 3142
</span><span class='line'>
</span><span class='line'>RUN <span class="sb">`</span><span class="c"># Updating Package List`                                                                 &amp;&amp; \</span>
</span><span class='line'>     apt-get update                                                                           <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Installing packages`                                                                   &amp;&amp; \</span>
</span><span class='line'>     apt-get install -y --no-install-recommends apt-cacher-ng                                 <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Cleaning up after installation`                                                        &amp;&amp; \</span>
</span><span class='line'>     apt-get clean <span class="o">&amp;&amp;</span> rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*                           <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Enable service on startup`                                                             &amp;&amp; \</span>
</span><span class='line'>     sed -i <span class="s2">&quot;s@exit 0@service apt-cacher-ng start@g&quot;</span> /etc/rc.local                            <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Fixing permission errors for volume`                                                   &amp;&amp; \</span>
</span><span class='line'>     chown -R apt-cacher-ng:apt-cacher-ng /var/cache/apt-cacher-ng
</span><span class='line'>
</span><span class='line'>VOLUME /var/cache/apt-cacher-ng
</span><span class='line'>
</span><span class='line'>ENTRYPOINT <span class="o">[</span><span class="s2">&quot;/sbin/my_init&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Owncloud</h4>

<p>Lets try something a little more complicated. Here, I present two Owncloud images. The first one is built using the latest code in the repository, while the second is built with specifically downloaded versions of deb files.</p>

<h5>Latest From Repository</h5>

<p>Dockerfile.yml:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">User</span>   <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">www-data</span>
</span><span class='line'><span class="l-Scalar-Plain">Service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">apache2</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Repositories</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Owncloud</span>
</span><span class='line'>   <span class="l-Scalar-Plain">URL</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">deb http://download.opensuse.org/repositories/isv:/ownCloud:/community/xUbuntu_14.04/ /</span>
</span><span class='line'>   <span class="l-Scalar-Plain">Key</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://download.opensuse.org/repositories/isv:ownCloud:community/xUbuntu_14.04/Release.key</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Install</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">owncloud</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Run</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'> <span class="no"># Enable SSL</span>
</span><span class='line'> <span class="no">a2enmod ssl &amp;&amp; a2ensite default-ssl</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Expose</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">443</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Volumes</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/var/www/owncloud</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/mnt</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generated Dockerfile:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>FROM phusion/baseimage:0.9.16
</span><span class='line'>MAINTAINER Joe Ruether
</span><span class='line'>
</span><span class='line'>EXPOSE 443
</span><span class='line'>
</span><span class='line'>RUN <span class="sb">`</span><span class="c"># Updating Package List`                                                                                                                &amp;&amp; \</span>
</span><span class='line'>     apt-get update                                                                                                                          <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                                                                <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Installing packages`                                                                                                                  &amp;&amp; \</span>
</span><span class='line'>     apt-get install -y --no-install-recommends wget                                                                                            <span class="se">\</span>
</span><span class='line'>                                                ssl-cert                                                                                     <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                                                                <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Adding Owncloud repository`                                                                                                           &amp;&amp; \</span>
</span><span class='line'>     wget -O - http://download.opensuse.org/repositories/isv:ownCloud:community/xUbuntu_14.04/Release.key | apt-key add -                    <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>     <span class="nb">echo</span> <span class="s1">&#39;deb http://download.opensuse.org/repositories/isv:/ownCloud:/community/xUbuntu_14.04/ /&#39;</span> &gt;&gt; /etc/apt/sources.list.d/owncloud.list <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                                                                <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Adding apt-cacher-ng proxy`                                                                                                           &amp;&amp; \</span>
</span><span class='line'>     <span class="nb">echo</span> <span class="s1">&#39;Acquire::http { Proxy &quot;http://172.17.42.1:3142&quot;; };&#39;</span> &gt; /etc/apt/apt.conf.d/01proxy                                                <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                                                                <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Updating Package List`                                                                                                                &amp;&amp; \</span>
</span><span class='line'>     apt-get update                                                                                                                          <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                                                                <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Installing packages`                                                                                                                  &amp;&amp; \</span>
</span><span class='line'>     apt-get install -y --no-install-recommends owncloud                                                                                     <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                                                                <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Cleaning up after installation`                                                                                                       &amp;&amp; \</span>
</span><span class='line'>     apt-get clean <span class="o">&amp;&amp;</span> rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*                                                                          <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                                                                <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Removing apt-cacher-ng proxy`                                                                                                         &amp;&amp; \</span>
</span><span class='line'>     rm -f /etc/apt/apt.conf.d/01proxy                                                                                                       <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                                                                <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Enable SSL`                                                                                                                           &amp;&amp; \</span>
</span><span class='line'>     a2enmod ssl <span class="o">&amp;&amp;</span> a2ensite default-ssl                                                                                                     <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                                                                <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Enable service on startup`                                                                                                            &amp;&amp; \</span>
</span><span class='line'>     sed -i <span class="s2">&quot;s@exit 0@service apache2 start@g&quot;</span> /etc/rc.local                                                                                 <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                                                                <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Fixing permission errors for volume`                                                                                                  &amp;&amp; \</span>
</span><span class='line'>     chown -R www-data:www-data /var/www/owncloud                                                                                            <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                                                                <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Fixing permission errors for volume`                                                                                                  &amp;&amp; \</span>
</span><span class='line'>     chown -R www-data:www-data /mnt
</span><span class='line'>
</span><span class='line'>VOLUME /var/www/owncloud
</span><span class='line'>VOLUME /mnt
</span><span class='line'>
</span><span class='line'>ENTRYPOINT <span class="o">[</span><span class="s2">&quot;/sbin/my_init&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Specific Version</h5>

<p>Dockerfile.yml:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">User</span>   <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">www-data</span>
</span><span class='line'><span class="l-Scalar-Plain">Service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">apache2</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Install</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">owncloud_8.1.3-13.1_all.deb</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">owncloud-server_8.1.3-13.1_all.deb</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">owncloud-config-apache_8.1.3-13.1_all.deb</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Run</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'> <span class="no"># Enable SSL</span>
</span><span class='line'> <span class="no">a2enmod ssl &amp;&amp; a2ensite default-ssl</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Expose</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">443</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Volumes</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/var/www/owncloud</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/mnt</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generated Dockerfile:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>FROM phusion/baseimage:0.9.16
</span><span class='line'>MAINTAINER Joe Ruether
</span><span class='line'>
</span><span class='line'>EXPOSE 443
</span><span class='line'>
</span><span class='line'>RUN <span class="sb">`</span><span class="c"># Adding apt-cacher-ng proxy`                                                            &amp;&amp; \</span>
</span><span class='line'>     <span class="nb">echo</span> <span class="s1">&#39;Acquire::http { Proxy &quot;http://172.17.42.1:3142&quot;; };&#39;</span> &gt; /etc/apt/apt.conf.d/01proxy <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Updating Package List`                                                                 &amp;&amp; \</span>
</span><span class='line'>     apt-get update                                                                           <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Installing packages`                                                                   &amp;&amp; \</span>
</span><span class='line'>     apt-get install -y --no-install-recommends wget                                          <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Installing deb package`                                                                &amp;&amp; \</span>
</span><span class='line'>     wget http://192.168.1.106:8888/owncloud_8.1.3-13.1_all.deb                               <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>     <span class="o">(</span>dpkg -i owncloud_8.1.3-13.1_all.deb <span class="o">||</span> <span class="nb">true</span><span class="o">)</span>                                            <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Installing deb package`                                                                &amp;&amp; \</span>
</span><span class='line'>     wget http://192.168.1.106:8888/owncloud-server_8.1.3-13.1_all.deb                        <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>     <span class="o">(</span>dpkg -i owncloud-server_8.1.3-13.1_all.deb <span class="o">||</span> <span class="nb">true</span><span class="o">)</span>                                     <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Installing deb package`                                                                &amp;&amp; \</span>
</span><span class='line'>     wget http://192.168.1.106:8888/owncloud-config-apache_8.1.3-13.1_all.deb                 <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>     <span class="o">(</span>dpkg -i owncloud-config-apache_8.1.3-13.1_all.deb <span class="o">||</span> <span class="nb">true</span><span class="o">)</span>                              <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Installing deb package dependencies`                                                   &amp;&amp; \</span>
</span><span class='line'>     apt-get -y -f install --no-install-recommends                                            <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Removing temporary files`                                                              &amp;&amp; \</span>
</span><span class='line'>     rm -f owncloud_8.1.3-13.1_all.deb                                                        <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>     rm -f owncloud-server_8.1.3-13.1_all.deb                                                 <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>     rm -f owncloud-config-apache_8.1.3-13.1_all.deb                                          <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Cleaning up after installation`                                                        &amp;&amp; \</span>
</span><span class='line'>     apt-get clean <span class="o">&amp;&amp;</span> rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*                           <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Removing apt-cacher-ng proxy`                                                          &amp;&amp; \</span>
</span><span class='line'>     rm -f /etc/apt/apt.conf.d/01proxy                                                        <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Enable SSL`                                                                            &amp;&amp; \</span>
</span><span class='line'>     a2enmod ssl <span class="o">&amp;&amp;</span> a2ensite default-ssl                                                      <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Enable service on startup`                                                             &amp;&amp; \</span>
</span><span class='line'>     sed -i <span class="s2">&quot;s@exit 0@service apache2 start@g&quot;</span> /etc/rc.local                                  <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Fixing permission errors for volume`                                                   &amp;&amp; \</span>
</span><span class='line'>     chown -R www-data:www-data /var/www/owncloud                                             <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>                                                                                                 <span class="se">\</span>
</span><span class='line'>    <span class="sb">`</span><span class="c"># Fixing permission errors for volume`                                                   &amp;&amp; \</span>
</span><span class='line'>     chown -R www-data:www-data /mnt
</span><span class='line'>
</span><span class='line'>VOLUME /var/www/owncloud
</span><span class='line'>VOLUME /mnt
</span><span class='line'>
</span><span class='line'>ENTRYPOINT <span class="o">[</span><span class="s2">&quot;/sbin/my_init&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, this script is pretty handy for quickly creating Docker images that are consistent and readable while maintaining a small image size.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Screenshots in Qubes]]></title>
    <link href="http://jrruethe.github.io/blog/2015/09/17/screenshots-in-qubes/"/>
    <updated>2015-09-17T18:51:55-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/09/17/screenshots-in-qubes</id>
    <content type="html"><![CDATA[<p>One of the security concepts of Qubes is that all work is done in separate VMs. The &ldquo;admin console&rdquo; for the Xen hypervisor is known as <code>dom0</code> and is responsible for managing the desktop environment. <code>dom0</code> is never supposed to interact with the other VMs, usb devices, or the network.</p>

<p>However, when taking a screenshot, they are inevitably stored inside <code>dom0</code>. What can be done about this?</p>

<p>Laurent Ghugonis<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> shared a very handy script for taking a screenshot and sending it to a VM<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. You can find that script below. I have a few minor edits, but Laurent gets all the credit:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Take screenshot(s) in Qubes Dom0 and copy to AppVM</span>
</span><span class='line'><span class="c"># Dependencies: scrot (sudo qubes-dom0-update scrot)</span>
</span><span class='line'><span class="c"># My KDE shortcuts:</span>
</span><span class='line'><span class="c"># Meta-C       : qvm-screenshot.sh -s -n</span>
</span><span class='line'><span class="c"># Meta-Shift-C : qvm-screenshot.sh -s -n -m</span>
</span><span class='line'><span class="c"># Meta-Alt-C   : qvm-screenshot.sh -s -q</span>
</span><span class='line'><span class="c"># 2013, Laurent Ghigonis &lt;laurent@p1sec.com&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Modified 2015, Joe Ruether &lt;jrruethe@gmail.com&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">DOM0_SHOTS_DIR</span><span class="o">=</span><span class="nv">$HOME</span>/Pictures
</span><span class='line'><span class="nv">APPVM_SHOTS_DIR</span><span class="o">=</span>/home/user/Pictures
</span><span class='line'><span class="nv">QUBES_DOM0_APPVMS</span><span class="o">=</span>/var/lib/qubes/appvms/
</span><span class='line'>
</span><span class='line'>usage<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="nb">echo</span> <span class="s2">&quot;$program [-hlmqs]&quot;</span>
</span><span class='line'>   <span class="nb">echo</span> -e <span class="s2">&quot;\t-m : take multiple shots&quot;</span>
</span><span class='line'>   <span class="nb">echo</span> -e <span class="s2">&quot;\t-n : after screenshot, run nautilus in AppVM&quot;</span>
</span><span class='line'>   <span class="nb">echo</span> -e <span class="s2">&quot;\t-q : only take screenshot, no blabla&quot;</span>
</span><span class='line'>   <span class="nb">echo</span> -e <span class="s2">&quot;\t-s : select window&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">program</span><span class="o">=</span><span class="s2">&quot;`basename $0`&quot;</span>
</span><span class='line'><span class="nv">mode_multi</span><span class="o">=</span>0
</span><span class='line'><span class="nv">mode_nautilus</span><span class="o">=</span>0
</span><span class='line'><span class="nv">mode_select</span><span class="o">=</span>0
</span><span class='line'><span class="nv">opts</span><span class="o">=</span><span class="s2">&quot;$(getopt -o hmnqs -n &quot;</span><span class="nv">$program</span><span class="s2">&quot; -- &quot;</span><span class="nv">$@</span><span class="s2">&quot;)&quot;</span>
</span><span class='line'><span class="nv">err</span><span class="o">=</span><span class="nv">$?</span>
</span><span class='line'><span class="nb">eval set</span> -- <span class="s2">&quot;$opts&quot;</span>
</span><span class='line'><span class="k">while </span><span class="nb">true</span>; <span class="k">do case</span> <span class="nv">$1</span> in
</span><span class='line'>   -h<span class="o">)</span> usage; <span class="nb">exit </span>1 ;;
</span><span class='line'>   -q<span class="o">)</span> <span class="nv">mode_quick</span><span class="o">=</span>1; <span class="nb">shift</span> ;;
</span><span class='line'>   -m<span class="o">)</span> <span class="nv">mode_multi</span><span class="o">=</span>1; <span class="nb">shift</span> ;;
</span><span class='line'>   -n<span class="o">)</span> <span class="nv">mode_nautilus</span><span class="o">=</span>1; <span class="nb">shift</span> ;;
</span><span class='line'>   -s<span class="o">)</span> <span class="nv">mode_select</span><span class="o">=</span>1; <span class="nb">shift</span> ;;
</span><span class='line'>   --<span class="o">)</span> <span class="nb">shift</span>; <span class="nb">break</span> ;;
</span><span class='line'><span class="k">esac done</span>
</span><span class='line'><span class="o">[[</span> <span class="nv">$err</span> -ne 0 <span class="o">]]</span> <span class="o">&amp;&amp;</span> usage <span class="o">&amp;&amp;</span> <span class="nb">exit </span>1
</span><span class='line'>
</span><span class='line'><span class="nv">shotslist</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'>mkdir -p <span class="nv">$DOM0_SHOTS_DIR</span> <span class="o">||</span><span class="nb">exit </span>1
</span><span class='line'><span class="k">while </span><span class="nb">true</span>; <span class="k">do</span>
</span><span class='line'><span class="k">   </span><span class="nv">d</span><span class="o">=</span><span class="sb">`</span>date +<span class="s2">&quot;%Y%m%d%H%M%S&quot;</span><span class="sb">`</span>
</span><span class='line'>   <span class="nv">shotname</span><span class="o">=</span><span class="nv">$d</span>.png
</span><span class='line'>   <span class="k">if</span> <span class="o">[</span> <span class="nv">$mode_select</span> -eq 1 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="s2">&quot;[-] making shot, click on a window&quot;</span>
</span><span class='line'>      scrot <span class="nv">$@</span> -s -b <span class="nv">$DOM0_SHOTS_DIR</span>/<span class="nv">$shotname</span> <span class="o">||</span><span class="nb">break</span>
</span><span class='line'><span class="nb">   </span><span class="k">else</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="s2">&quot;[-] making shot of root window&quot;</span>
</span><span class='line'>      scrot <span class="nv">$@</span> <span class="nv">$DOM0_SHOTS_DIR</span>/<span class="nv">$shotname</span> <span class="o">||</span><span class="nb">break</span>
</span><span class='line'><span class="nb">   </span><span class="k">fi</span>
</span><span class='line'>   <span class="o">[[</span> <span class="nv">$mode_quick</span> -eq 1 <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">exit </span>1
</span><span class='line'>
</span><span class='line'>   <span class="nb">echo</span> <span class="s2">&quot;[-] saving $DOM0_SHOTS_DIR/$shotname&quot;</span>
</span><span class='line'>   mv <span class="nv">$DOM0_SHOTS_DIR</span>/<span class="nv">$tmpname</span> <span class="nv">$DOM0_SHOTS_DIR</span>/<span class="nv">$shotname</span>
</span><span class='line'>
</span><span class='line'>   <span class="nv">shotslist</span><span class="o">=</span><span class="s2">&quot;${shotslist}${shotname}:&quot;</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">[[</span> <span class="nv">$mode_multi</span> -eq 1 <span class="o">]]</span> <span class="o">&amp;&amp;</span> kdialog --yesno <span class="s2">&quot;Other shot ?&quot;</span> <span class="o">||</span> <span class="nb">break</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nv">choice</span><span class="o">=</span><span class="sb">`</span>ls <span class="nv">$QUBES_DOM0_APPVMS</span> |sed <span class="s1">&#39;s/\([^ ]*\)/\1 \1/g&#39;</span><span class="sb">`</span>
</span><span class='line'><span class="nv">appvm</span><span class="o">=</span><span class="sb">`</span>kdialog --menu <span class="s2">&quot;Select destination AppVM&quot;</span> <span class="nv">$choice</span> --title <span class="s2">&quot;$program&quot;</span><span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> X<span class="s2">&quot;$appvm&quot;</span> !<span class="o">=</span> X<span class="s2">&quot;&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">   if</span> <span class="o">[</span> <span class="nv">$mode_nautilus</span> -eq 1 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="s2">&quot;[-] running nautilus in AppVM&quot;</span>
</span><span class='line'>      qvm-run <span class="nv">$appvm</span> <span class="s2">&quot;nautilus $APPVM_SHOTS_DIR&quot;</span>
</span><span class='line'>   <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">   </span><span class="nb">echo</span> <span class="s2">&quot;[-] copy to AppVM $appvm&quot;</span>
</span><span class='line'>   qvm-run <span class="nv">$appvm</span> <span class="s2">&quot;mkdir -p $APPVM_SHOTS_DIR&quot;</span>
</span><span class='line'>   <span class="nv">IFS</span><span class="o">=</span><span class="s2">&quot;:&quot;</span>; <span class="k">for </span>shot in <span class="nv">$shotslist</span>; <span class="k">do</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="s2">&quot;[-] copying $APPVM_SHOTS_DIR/$shot&quot;</span>
</span><span class='line'>      cat <span class="nv">$DOM0_SHOTS_DIR</span>/<span class="nv">$shot</span> <span class="se">\</span>
</span><span class='line'>         |qvm-run --pass-io <span class="nv">$appvm</span> <span class="s2">&quot;cat &gt; $APPVM_SHOTS_DIR/$shot&quot;</span>
</span><span class='line'>      rm -f <span class="nv">$DOM0_SHOTS_DIR</span>/<span class="nv">$shot</span>
</span><span class='line'>   <span class="k">done</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">   </span><span class="nb">echo</span> <span class="s2">&quot;no AppVM name provided&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;[*] done&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Save this script in the home directory of <code>dom0</code> as <code>qvm-screenshot.sh</code>. You can run the following commands in a <code>dom0</code> terminal, assuming the script was downloaded inside a VM named <code>Work</code>:</p>

<pre><code>qvm-run --pass-io Work 'cat ~/Downloads/qvm-screenshot.sh' &gt; ~/qvm-screenshot.sh
chmod 755 ~/qvm-screenshot.sh
</code></pre>

<p>Next, open up Start &ndash;> System Tools &ndash;> System Settings, and select &ldquo;Shortcuts and Gestures&rdquo;</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/09/17/screenshots-in-qubes/01.png"></p>

<p>I use &ldquo;Print Screen&rdquo; and &ldquo;Print Window&rdquo;, tied to the <code>PrtSc</code> and <code>Ctrl+PrtSc</code> keys respectively. Print Screen simply takes a screenshot of the entire desktop, while Print Window only captures the window that is clicked on after the keypress. You can see my setup at the bottom of this post.</p>

<p>Activating the keypress will yield the following window:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/09/17/screenshots-in-qubes/02.png"></p>

<p>Simply select the VM you want the screenshot saved to, and it will appear in that VM&rsquo;s Pictures folder.</p>

<p>Also, if you are interested, Laurent also shared a script for recording video of the desktop<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/09/17/screenshots-in-qubes/03.png">
<img class="center" src="http://jrruethe.github.io/blog/2015/09/17/screenshots-in-qubes/04.png">
<img class="center" src="http://jrruethe.github.io/blog/2015/09/17/screenshots-in-qubes/05.png">
<img class="center" src="http://jrruethe.github.io/blog/2015/09/17/screenshots-in-qubes/06.png"></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://groups.google.com/forum/#!msg/qubes-devel/CwSPqtPYTRQ/7Dp7Tw28adUJ">https://groups.google.com/forum/#!msg/qubes-devel/CwSPqtPYTRQ/7Dp7Tw28adUJ</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="http://git.zx2c4.com/laurent-tools/tree/tools/qvm-screenshot.sh">http://git.zx2c4.com/laurent-tools/tree/tools/qvm-screenshot.sh</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><a href="http://git.zx2c4.com/laurent-tools/tree/tools/qvm-screenrecord.sh">http://git.zx2c4.com/laurent-tools/tree/tools/qvm-screenrecord.sh</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Qubes]]></title>
    <link href="http://jrruethe.github.io/blog/2015/09/12/setting-up-qubes/"/>
    <updated>2015-09-12T11:35:50-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/09/12/setting-up-qubes</id>
    <content type="html"><![CDATA[<p>I have recently switched to Qubes OS and I really like it. It has some very handy tools that make working with a secure system seamless. I decided I wanted to write about my setup and how to fix the minor problems I encountered. As a test, this entire post was written using Qubes, as a way for me to prove to myself that I could still be productive and have an easy-to-use system while remaining secure.</p>

<h2>Understanding Qubes</h2>

<p>Qubes is not a distribution of Linux. Rather, it is a set of tools built on top of the Xen hypervisor, allowing you to interoperate between multiple isolated virtual machines. Each virtual machine is &ldquo;paravirtualized&rdquo;, meaning they all share a common Linux kernel but have separated filesystems, devices, etc. Furthermore, the filesystems are layered such that multiple separate VMs can share a common underlying template to save storage space. In my mind, this is similar in concept to how Docker works. Unlike Docker, which utilizes Linux kernel namespaces, Qubes utilizes hardware enforced isolation via virtualization capabilities in the CPU, so it is much more secure.</p>

<p>The main interface is called <code>dom0</code>, and acts as an administration panel for Xen, allowing the user to easily manage and manipulate the various virtual machines. Each virtual machine is given a color so the user can visually assess which security domain they are working in at all times. The Qubes tools allow for secure file/clipboard copying between VMs, controlled networking, and seamless application interaction; You will barely even notice that you are working with a series of virtual machines under the hood.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/09/12/setting-up-qubes/01.png"></p>

<p>It is important to understand that Qubes grants the ability to easily create a secure computing environment, but it relies heavily on the user to utilize best practices; it will not prevent foolish mistakes. The user must be mindful about keeping data and connections isolated; Qubes helps you do it effectively.</p>

<p>Read more about Qubes <a href="https://www.qubes-os.org/doc/SimpleIntro/">here</a>.</p>

<h2>Considerations before migrating to Qubes</h2>

<p>Qubes 3.0 works very well and is very usable. Its VM management and interaction tool are well done, easy to use, and non-intrusive. However, using Qubes comes with a significant drawback:</p>

<ul>
<li>No non-mass-storage USB devices in VMs</li>
</ul>


<p>Do not misunderstand; Mass storage devices such as flash drives and external hard drives (block devices) work flawlessly and can be assigned to any VM very easily. However, devices such as USB network cards or Yubikey smartcards do not work in the VMs.</p>

<p>The USB devices do work in <code>dom0</code>, meaning that USB keyboards and mice are fine. It would be dangerous to connect a USB network card to <code>dom0</code>, because <code>dom0</code> should be airgapped.</p>

<blockquote><p><strong>Airgapped</strong><br/>
Airgapping means the machine is never connected to the internet. It is completely isolated, as in &ldquo;separated by a gap of air&rdquo;. Most of the time, airgapping refers to two physically separated machines, however in the case of Qubes it refers a virtual machine separated from the network. Ideally, files are only ever copied <em>into</em> the airgapped machine, never out of it.</p></blockquote>

<p>There are various hints on the forums that people have gotten this to work, but it seems to be hardware dependent. My laptop has two USB controllers; one dedicated to the touchscreen (which also works flawlessly, by the way), the other dedicated to the external ports. This means that if I assign my USB controller to a VM, <em>only</em> that VM has access to those devices. This interferes with my USB wireless mouse. In theory, this should be OK. In practice, I haven&rsquo;t been able to get my VMs to boot when they have the USB controller assigned to them, and I don&rsquo;t seem to be able to reassign the USB controller back to <code>dom0</code> easily.</p>

<p>However, these issues are fairly easy for me to work around. If I need 3G/4G modem, I use a mobile wireless hotspot and just connect to the Wifi. Similarily, my printer is network enabled, so I don&rsquo;t need to connect it via USB. As for Yubikeys, the &ldquo;keyboard&rdquo; capabilities work out of the box, and Qubes&#8217; Split-GPG functionality can substitute the smartcard functionality of the Yubikey.</p>

<p>Read more about these considerations <a href="https://www.qubes-os.org/doc/UserFaq/">here</a>.</p>

<h2>Getting Qubes</h2>

<p>Simply download <code>Qubes-R3.0-rc2-x86_64-DVD.iso</code> from <a href="https://www.qubes-os.org/doc/QubesDownloads/">here</a>. Be sure to also grab the signature file. Before attempting to burn / install Qubes, you should <a href="https://www.qubes-os.org/doc/VerifyingSignatures/">verify the signatures</a>.</p>

<h2>Installing Qubes</h2>

<p>The installer is pretty straightforward. I chose to do manual partitioning, with a <code>boot</code> drive of 2GB using <code>ext4</code> and a <code>root</code> drive taking the remaining space using <code>btrfs</code> and <code>luks</code> encryption. My plan in the future is to have a Tails iso available for booting from the <code>boot</code> drive. My disk has limited space, so I chose <code>btrfs</code> for its compression abilities. Finally, be sure to also install the <code>fedora-21</code> and <code>debian-8</code> templates.</p>

<h2>Creating Domains</h2>

<p>The first thing I do is clone the standard <code>fedora-21</code> and <code>debian-8</code> templates, such that I always have a fresh working fallback in case something goes wrong when modifying them. I typically use two separate <code>debian-8</code> templates; one for a minimal image that won&rsquo;t change often, and one for an &ldquo;experimental&rdquo; image that I install various software to.</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/09/12/setting-up-qubes/02.png"></p>

<p>I like to have a few primary domains:</p>

<ul>
<li>Personal (Yellow): My configured browser, email, instant messaging, and blogging setup.</li>
<li>Work (Orange): Stuff I am working on, experiments, etc.</li>
<li>Vault (Green): Passwords, keys, sensitive files.</li>
</ul>


<p>Qubes is all about isolation. My sensitive files are isolated away to the Vault, which has no network access and never touches a USB drive. I use Qubes&#8217; secure file copying from another trusted VM to put things into the Vault.</p>

<p>Other secondary domains include the system proxies, Whonix, and a VM dedicated to Tor:</p>

<ul>
<li>sys-net (Red): Manages the network devices, has direct internet access</li>
<li>sys-firewall (Green): A trusted firewall that grants other VMs internet access</li>
<li>sys-tor (Green): A Tor proxy that grants other VMs Tor access</li>
<li>sys-gpg (Green): A special domain for GPG subkey storage</li>
<li>sys-whonix (Violet): The Whonix gateway</li>
<li>Tor (Orange): Special domain containing only a web browser configured to use Tor</li>
<li>Whonix (Violet): The Whonix workstation</li>
</ul>


<p>Here is a diagram of how the VM &ldquo;inheritance&rdquo; is set up:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/09/12/setting-up-qubes/03.png"></p>

<p>As you can see, I have multiple domains that I use at a &ldquo;personal&rdquo; level, so they share the same template, which I try to keep minimal and stable. Separate from that is my &ldquo;testing&rdquo; template that I do my work in. This typically involves installing experimental software, or development tools / libraries that I don&rsquo;t want cluttering up my personal domain.</p>

<p>Here is a diagram of how the VM networking is set up:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/09/12/setting-up-qubes/04.png"></p>

<p>There are a couple things to note here:</p>

<ul>
<li>All domains get network access from the firewall. This isolates the system from the internet as much as possible.</li>
<li>Sensitive VMs such as <code>sys-gpg</code> and the <code>Vault</code> do not (and will never have) network access. This keeps them airgapped.</li>
<li>The Whonix templates must access the internet through the Whonix gateway, otherwise they won&rsquo;t be able to update.</li>
</ul>


<p>For the most part, Qubes works great out of the box, however there are a few things that need small fixes, especially after performing the first software update in <code>dom0</code> and the template VMs.</p>

<h2>Fixing Nautilus in Debian <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></h2>

<p>After updating, Nautilus won&rsquo;t open due to a dbus error.
To fix this, replace the contents of <code>/usr/bin/qubes-desktop-run</code> in your Debian templates with the following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">gi.repository</span> <span class="kn">import</span> <span class="n">Gio</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">dbus</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">myname</span><span class="p">,</span> <span class="n">desktop</span><span class="p">,</span> <span class="o">*</span><span class="n">files</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">launcher</span> <span class="o">=</span> <span class="n">Gio</span><span class="o">.</span><span class="n">DesktopAppInfo</span><span class="o">.</span><span class="n">new_from_filename</span><span class="p">(</span><span class="n">desktop</span><span class="p">)</span>
</span><span class='line'>    <span class="n">activatable</span> <span class="o">=</span> <span class="n">launcher</span><span class="o">.</span><span class="n">get_boolean</span><span class="p">(</span><span class="s">&#39;DBusActivatable&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">activatable</span><span class="p">:</span>
</span><span class='line'>        <span class="n">bus</span> <span class="o">=</span> <span class="n">dbus</span><span class="o">.</span><span class="n">SessionBus</span><span class="p">()</span>
</span><span class='line'>        <span class="nb">id</span> <span class="o">=</span> <span class="n">launcher</span><span class="o">.</span><span class="n">get_id</span><span class="p">()</span>
</span><span class='line'>        <span class="nb">id</span> <span class="o">=</span> <span class="nb">id</span><span class="p">[:</span><span class="o">-</span><span class="mi">8</span><span class="p">]</span>
</span><span class='line'>        <span class="n">bus</span><span class="o">.</span><span class="n">start_service_by_name</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">launcher</span><span class="o">.</span><span class="n">launch</span><span class="p">(</span><span class="n">files</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">(</span><span class="o">*</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that this has already been fixed in the upstream repo, and may not be needed in the future.</p>

<h2>Fixing Terminal in Debian <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></h2>

<p>After upgrading, the locale&rsquo;s might get messed up, causing <code>gnome-terminal</code> to not load.
Run the following commands as root in your Debian templates:</p>

<pre><code>localedef -f UTF-8 -i en_US -c en_US.UTF-8
update-locale LC_ALL=en_US.UTF-8
</code></pre>

<h2>Fixing Copy To VM <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></h2>

<p>The secure copy-to-vm scripts require the Python GTK bindings, but they are not installed by default.
Install <code>python-gtk2</code> in all your Debian templates:</p>

<pre><code>apt-get install python-gtk2
</code></pre>

<h2>Fixing Copy / Paste <sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></h2>

<p>In the terminal, <code>Ctrl-Shift-c</code> and <code>Ctrl-Shift-v</code> are mapped to copy and paste.
However, in Qubes, these are mapped to the global cross-vm copy-paste commands.
Lets change the Qubes shortcut keys to use the little &ldquo;Windows&rdquo; key next to the Alt key.</p>

<p>In <code>dom0</code>, edit <code>/etc/qubes/guid.conf</code> to uncomment and set the following lines:</p>

<pre><code>secure_copy_sequence = "Mod4-c";
secure_paste_sequence = "Mod4-v";
</code></pre>

<h2>Installing Tor <sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></h2>

<p>The instructions from the Qubes website are pretty straightforward, but I will replicate them here by using the GUI instead of the command line.</p>

<p>First create a copy of the standard <code>fedora-21</code> template:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/09/12/setting-up-qubes/05.png"></p>

<p>Next, create a <code>sys-tor</code> proxy VM from that template:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/09/12/setting-up-qubes/06.png"></p>

<p>In a <code>dom0</code> terminal, enter the following commands:</p>

<pre><code>qvm-service sys-tor -d qubes-netwatcher
qvm-service sys-tor -d qubes-firewall
qvm-service sys-tor -e qubes-tor
</code></pre>

<p>Fire up the <code>fedora-21-tor</code> template and install Tor:</p>

<pre><code>sudo yum install qubes-tor-repo
sudo yum install qubes-tor
</code></pre>

<p>Now all you need to do is make a normal VM and use <code>sys-tor</code> as your network:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/09/12/setting-up-qubes/07.png"></p>

<p>Note that while this gives you access to Tor, it isn&rsquo;t necessarily optimized for privacy. For that you will want Whonix.</p>

<h2>Installing Whonix <sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></h2>

<p>The Whonix developers have done a great job making Whonix templates that are super easy to install. Simply run the following in a <code>dom0</code> terminal:</p>

<pre><code>sudo qubes-dom0-update --enablerepo=qubes-templates-community qubes-template-whonix-gw qubes-template-whonix-ws
</code></pre>

<p>Once that command completes, you will have two new templates available: <code>whonix-gw</code> and <code>whonix-ws</code>, for the gateway and workstation respectively.</p>

<p>This is where things get slightly confusing. You need to create a VM that uses the gateway template, and use <em>that</em> as the network for the template itself in order to update it. Set up a VM like this:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/09/12/setting-up-qubes/08.png">
<img class="center" src="http://jrruethe.github.io/blog/2015/09/12/setting-up-qubes/09.png"></p>

<p>Then, set up your <code>whonix-gw</code> template like this:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/09/12/setting-up-qubes/10.png">
<img class="center" src="http://jrruethe.github.io/blog/2015/09/12/setting-up-qubes/11.png"></p>

<p>Finally, set up your <code>whonix-ws</code> template like this:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/09/12/setting-up-qubes/12.png">
<img class="center" src="http://jrruethe.github.io/blog/2015/09/12/setting-up-qubes/13.png"></p>

<p>After that, you can shutdown those three VMs and create the workstation VM:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/09/12/setting-up-qubes/14.png">
<img class="center" src="http://jrruethe.github.io/blog/2015/09/12/setting-up-qubes/15.png"></p>

<p>Fire it up and it will automatically start the gateway. Both VMs will do their thing and synchronize to the network.</p>

<h2>Split GPG <sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup></h2>

<p>In a future blog post I will go through more detail about Qubes&#8217; Split-GPG capability.</p>

<h2>Screenshots <sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup></h2>

<p>How did I get all those nifty screenshots? I&rsquo;ll show you in a future blog post.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://groups.google.com/forum/#!searchin/qubes-users/nautilus/qubes-users/cUTu9xQGvI0/OiT8t8BcCgAJ">https://groups.google.com/forum/#!searchin/qubes-users/nautilus/qubes-users/cUTu9xQGvI0/OiT8t8BcCgAJ</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="https://groups.google.com/forum/#!topic/qubes-users/CuC-El1qoss">https://groups.google.com/forum/#!topic/qubes-users/CuC-El1qoss</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><a href="https://groups.google.com/forum/#!topic/qubes-users/say__leey3o">https://groups.google.com/forum/#!topic/qubes-users/say__leey3o</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p><a href="https://github.com/QubesOS/qubes-gui-daemon/blob/master/gui-daemon/xside.c">https://github.com/QubesOS/qubes-gui-daemon/blob/master/gui-daemon/xside.c</a><a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p><a href="https://www.qubes-os.org/doc/UserDoc/TorVM/">https://www.qubes-os.org/doc/UserDoc/TorVM/</a><a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p><a href="https://www.whonix.org/wiki/Qubes/Binary_Install">https://www.whonix.org/wiki/Qubes/Binary_Install</a><a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p><a href="https://www.qubes-os.org/doc/UserDoc/SplitGpg/">https://www.qubes-os.org/doc/UserDoc/SplitGpg/</a><a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
<li id="fn:8">
<p><a href="http://git.zx2c4.com/laurent-tools/tree/tools/qvm-screenshot.sh">http://git.zx2c4.com/laurent-tools/tree/tools/qvm-screenshot.sh</a><a href="#fnref:8" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Placement New, Memory Dumps, and Alignment]]></title>
    <link href="http://jrruethe.github.io/blog/2015/08/23/placement-new/"/>
    <updated>2015-08-23T14:11:27-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/08/23/placement-new</id>
    <content type="html"><![CDATA[<p>Generally, in C++ there are three places you can store your data:</p>

<ol>
<li>On the stack (local variables)</li>
<li>On the heap (new / delete)</li>
<li>In the static data section (static variables)</li>
</ol>


<p>Normally, when using the heap, you would use the following command:</p>

<pre><code>Foo* foo_ptr = new Foo();
</code></pre>

<p>This would invoke the following actions behind the scenes:</p>

<ol>
<li>Make an operating system call to allocate a chunk of memory of size <code>sizeof(Foo)</code></li>
<li>Manage that memory with the heap</li>
<li>Call the constructor of Foo to build an object at that memory location</li>
<li>Initialize <code>foo_ptr</code> with the address of the object</li>
</ol>


<p>Later on, you would call:</p>

<pre><code>delete foo_ptr;
</code></pre>

<p>This would:</p>

<ol>
<li>Call the destructor of Foo</li>
<li>Have the heap give the memory back to the operating system</li>
</ol>


<p>This is how <code>new</code> and <code>delete</code> work, and most C++ programmers should be familiar with them.</p>

<blockquote><p><strong>New and Malloc</strong><br/>
You should never <code>delete</code> memory allocated with <code>malloc</code>, and you should never <code>free</code> memory allocated with <code>new</code>. <code>malloc</code> and <code>free</code> do raw memory allocations, while <code>new</code> and <code>delete</code> are also responsible for calling constructors and destructors.</p></blockquote>

<h2>Placement New</h2>

<p>C++ offers a different &ldquo;flavor&rdquo; of <code>new</code> called &ldquo;placement new&rdquo;. Placement new gives the user finer control about where the object gets constructed by allowing the object to be &ldquo;placed&rdquo; at a specified memory address; in other words, the heap allocation step is bypassed.</p>

<p>Placement new has a few specialized uses. One is memory mapped I/O for embedded systems. This is used when an object must exist at a specific memory address in order for its members to be mapped to external sensors or control pins. Another use case is for memory pools, when the application is responsible for managing its memory instead of relying on the heap.</p>

<p>The syntax for placement new is:</p>

<pre><code>unsigned char memory[sizeof(Foo)];
Foo* foo_ptr = new (memory) Foo();
</code></pre>

<p>In this example, <code>Foo</code> was constructed into the <code>memory</code> on the stack, instead of on the heap. It is important to understand that using placement new requires the developer to do its own memory management. <code>memory</code> must be large enough to contain a <code>Foo</code>, and you should never call <code>delete</code> on the pointer returned by placement new.</p>

<blockquote><p><strong>Delete</strong><br/>
Remember that <code>delete</code> calls the destructor, and has the heap give memory back to the operating system. However, the <code>memory</code> here isn&rsquo;t on the heap! Calling <code>delete</code> on <code>foo_ptr</code> will cause a crash.</p></blockquote>

<p>If you think of placement new as simply a constructor call, then it follows that a &ldquo;placement delete&rdquo; would simply be a destructor call. And an explicit destructor call is exactly how to clean up after a placement new:</p>

<pre><code>foo_ptr-&gt;~Foo();
</code></pre>

<p>You must not forget this step; it isn&rsquo;t a memory leak, but it would be a resource leak.</p>

<p>Here is a more detailed (runnable) example:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;new&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Foo</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">Foo</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="o">:</span> <span class="n">value</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Constructor&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">~</span><span class="n">Foo</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Destructor&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// Increase scope</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Allocate memory on the stack</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">memory</span><span class="p">[</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Foo</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Construct a Foo inside that memory</span>
</span><span class='line'>      <span class="n">Foo</span><span class="o">*</span> <span class="n">foo_ptr</span> <span class="o">=</span> <span class="k">new</span> <span class="p">(</span><span class="n">memory</span><span class="p">)</span> <span class="n">Foo</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Show that the memory addresses are the same</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;0x%016lX</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">memory</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;0x%016lX</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">foo_ptr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Call the destructor explicitly</span>
</span><span class='line'>      <span class="n">foo_ptr</span><span class="o">-&gt;~</span><span class="n">Foo</span><span class="p">();</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Memory has been deallocated from the stack</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This outputs:</p>

<pre><code>Constructor
0x00007FFFFFFFE280
0x00007FFFFFFFE280
Destructor
</code></pre>

<p>Note that the memory isn&rsquo;t required to be allocated on the stack; you can just as easily allocate the memory using malloc, and later deallocate the memory with free. In fact, you can think of the regular <code>new</code> call as performing the following actions:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;new&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Foo</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">Foo</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="o">:</span> <span class="n">value</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Constructor&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">~</span><span class="n">Foo</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Destructor&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Allocate memory on the heap</span>
</span><span class='line'>   <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">memory</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Foo</span><span class="p">)));</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Construct a Foo inside that memory</span>
</span><span class='line'>   <span class="n">Foo</span><span class="o">*</span> <span class="n">foo_ptr</span> <span class="o">=</span> <span class="k">new</span> <span class="p">(</span><span class="n">memory</span><span class="p">)</span> <span class="n">Foo</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Show that the memory addresses are the same</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;0x%016lX</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">memory</span><span class="p">);</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;0x%016lX</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">foo_ptr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Call the destructor explicitly</span>
</span><span class='line'>   <span class="n">foo_ptr</span><span class="o">-&gt;~</span><span class="n">Foo</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Deallocate the memory from the heap</span>
</span><span class='line'>   <span class="n">free</span> <span class="n">memory</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This outputs:</p>

<pre><code>Constructor
0x0000000000664370
0x0000000000664370
Destructor
</code></pre>

<h2>Dumping Memory</h2>

<p>As I said earlier, placement new requires the developer to manage their own memory even more than usual. When working with memory on a low level like this, it becomes very useful to see a hex dump similar to the one created by GDB. With some inspiration<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, I created a function that would pretty-print memory to an output stream:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">dump_memory</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">ptr</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">byte</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">uint</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Allow direct arithmetic on the pointer</span>
</span><span class='line'>   <span class="n">uint</span> <span class="n">iptr</span> <span class="o">=</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">uint</span><span class="o">&gt;</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;-----------------------------------------------------------------------</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">boost</span><span class="o">::</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;%d bytes&quot;</span><span class="p">)</span> <span class="o">%</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Get number of digits</span>
</span><span class='line'>   <span class="n">uint</span> <span class="n">indent</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">log10</span><span class="p">(</span><span class="n">size</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Write the address offsets along the top row</span>
</span><span class='line'>   <span class="c1">// Account for the indent of &quot;X bytes&quot;</span>
</span><span class='line'>   <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="mi">13</span> <span class="o">-</span> <span class="n">indent</span><span class="p">,</span> <span class="sc">&#39; &#39;</span><span class="p">);</span>
</span><span class='line'>   <span class="k">for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">%</span>  <span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span><span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span><span class="p">;}</span>        <span class="c1">// Spaces between every 4 bytes</span>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">boost</span><span class="o">::</span><span class="n">format</span><span class="p">(</span><span class="s">&quot; %2hhX&quot;</span><span class="p">)</span> <span class="o">%</span> <span class="n">i</span><span class="p">;</span> <span class="c1">// Write the address offset</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// If the object is not aligned</span>
</span><span class='line'>   <span class="k">if</span><span class="p">(</span><span class="n">iptr</span> <span class="o">%</span> <span class="mi">16</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Print the first address</span>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">boost</span><span class="o">::</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">0x%016lX:&quot;</span><span class="p">)</span> <span class="o">%</span> <span class="p">(</span><span class="n">iptr</span> <span class="o">&amp;</span> <span class="o">~</span><span class="mi">15</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Indent to the offset</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">iptr</span> <span class="o">%</span> <span class="mi">16</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;   &quot;</span><span class="p">;</span>
</span><span class='line'>         <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span><span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span><span class="p">;}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Dump the memory</span>
</span><span class='line'>   <span class="k">for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">,</span> <span class="o">++</span><span class="n">iptr</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// New line and address every 16 bytes, spaces every 4 bytes</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">iptr</span> <span class="o">%</span> <span class="mi">16</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span><span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">boost</span><span class="o">::</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">0x%016lX:&quot;</span><span class="p">)</span> <span class="o">%</span> <span class="n">iptr</span><span class="p">;}</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">iptr</span> <span class="o">%</span>  <span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span><span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Write the address contents</span>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">boost</span><span class="o">::</span><span class="n">format</span><span class="p">(</span><span class="s">&quot; %02hhX&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="o">%</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">uint</span><span class="o">&gt;</span><span class="p">(</span><span class="o">*</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">byte</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">iptr</span><span class="p">));</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">-----------------------------------------------------------------------&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is an example of how to use it:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">Test</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="kt">char</span>  <span class="n">a</span><span class="p">;</span> <span class="c1">// 1 byte</span>
</span><span class='line'>   <span class="kt">int</span>   <span class="n">b</span><span class="p">;</span> <span class="c1">// 4 bytes</span>
</span><span class='line'>   <span class="kt">short</span> <span class="n">c</span><span class="p">;</span> <span class="c1">// 2 bytes</span>
</span><span class='line'>   <span class="kt">long</span>  <span class="n">d</span><span class="p">;</span> <span class="c1">// 8 bytes</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Test</span><span class="p">()</span> <span class="o">:</span>
</span><span class='line'>      <span class="n">a</span><span class="p">(</span><span class="mh">0x11</span><span class="p">),</span>
</span><span class='line'>      <span class="n">b</span><span class="p">(</span><span class="mh">0x22222222</span><span class="p">),</span>
</span><span class='line'>      <span class="n">c</span><span class="p">(</span><span class="mh">0x3333</span><span class="p">),</span>
</span><span class='line'>      <span class="n">d</span><span class="p">(</span><span class="mh">0x4444444444444444</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">memory</span><span class="p">[</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Test</span><span class="p">)];</span>
</span><span class='line'>   <span class="n">Test</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="k">new</span> <span class="p">(</span><span class="n">memory</span><span class="p">)</span> <span class="n">Test</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">dump_memory</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Test</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ptr</span><span class="o">-&gt;~</span><span class="n">Test</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here is the output:</p>

<pre><code>-----------------------------------------------------------------------
24 bytes              0  1  2  3   4  5  6  7   8  9  A  B   C  D  E  F
0x00007FFFFFFFE270:  11 FF FF FF  22 22 22 22  33 33 00 00  00 00 00 00
0x00007FFFFFFFE280:  44 44 44 44  44 44 44 44
-----------------------------------------------------------------------
</code></pre>

<blockquote><p><strong>Padding</strong><br/>
If you are surprised by the output above, you may not be aware of padding. The compiler will add padding bytes between members in a structure to ensure that each member starts on a proper byte boundary. This means structures may take up more space than if they were packed tightly.</p>

<p>Primitive types in a structure will be padded such that they are aligned on byte boundaries that match their size<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>:</p>

<ul>
<li>A char (one byte) will be 1-byte aligned.</li>
<li>A short (two bytes) will be 2-byte aligned.</li>
<li>An int (four bytes) will be 4-byte aligned.</li>
<li>A long (eight bytes) will be 8-byte aligned.</li>
<li>A float (four bytes) will be 4-byte aligned.</li>
<li>A double (eight bytes) will be 8-byte aligned.</li>
</ul>
</blockquote>

<p>When working with memory pools, the allocated memory will typically be larger than the object itself. It becomes useful to &ldquo;mark&rdquo; the memory with special byte patterns for ease of debugging. I like to use:</p>

<ul>
<li>0xCC for &ldquo;Clear&rdquo;</li>
<li>0xAA for &ldquo;Allocated&rdquo;</li>
<li>0xDD for &ldquo;Deallocated&rdquo;</li>
</ul>


<p>For example, lets allocate more memory than we need, and construct the object in the middle of the array. The markers will indicate what is happening:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// Get the size of our structure</span>
</span><span class='line'>   <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Test</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Reserve more memory than we need</span>
</span><span class='line'>   <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">memory</span><span class="p">[</span><span class="n">size</span> <span class="o">*</span> <span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Fill that memory up with &quot;C&quot; for &quot;Cleared&quot;</span>
</span><span class='line'>   <span class="n">memset</span><span class="p">(</span><span class="n">memory</span><span class="p">,</span> <span class="mh">0xCC</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">memory</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Determine where to construct the object</span>
</span><span class='line'>   <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">size</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Mark that area as &quot;Allocated&quot;</span>
</span><span class='line'>   <span class="n">memset</span><span class="p">(</span><span class="n">memory</span> <span class="o">+</span> <span class="n">offset</span><span class="p">,</span> <span class="mh">0xAA</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Construct an object offset into memory</span>
</span><span class='line'>   <span class="n">Test</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="k">new</span> <span class="p">(</span><span class="n">memory</span> <span class="o">+</span> <span class="n">offset</span><span class="p">)</span> <span class="n">Test</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Lets see what it looks like</span>
</span><span class='line'>   <span class="n">dump_memory</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Test</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Destroy the object</span>
</span><span class='line'>   <span class="n">ptr</span><span class="o">-&gt;~</span><span class="n">Test</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Outputs:</p>

<pre><code>-----------------------------------------------------------------------
24 bytes              0  1  2  3   4  5  6  7   8  9  A  B   C  D  E  F
0x00007FFFFFFFE220:                                         11 AA AA AA
0x00007FFFFFFFE230:  22 22 22 22  33 33 AA AA  AA AA AA AA  44 44 44 44
0x00007FFFFFFFE240:  44 44 44 44
-----------------------------------------------------------------------
</code></pre>

<p>A couple things to notice here:</p>

<ul>
<li>Only the memory for the object is printed, that is why we don&rsquo;t see any <code>0xCC</code></li>
<li>The object was offset 12 bytes into the memory</li>
<li>The padding bytes are filled with <code>0xAA</code> as expected</li>
</ul>


<p>It would be kind of nice to see the memory around the object, to give us some context. One solution is to dump the <code>memory</code> variable instead of the <code>ptr</code> variable, but with large memory pools this can be too much to look at. Instead, lets just print some additional local context:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number marked'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">dump_memory_with_context</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">ptr</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// Allow direct arithmetic on the pointer</span>
</span><span class='line'>   <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">sptr</span> <span class="o">=</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">&gt;</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span> <span class="c1">// Start pointer</span>
</span><span class='line'>   <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">eptr</span> <span class="o">=</span> <span class="n">sptr</span> <span class="o">+</span> <span class="n">size</span><span class="p">;</span>                          <span class="c1">// End pointer</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">sptr</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="mi">15</span><span class="p">;</span> <span class="c1">// Round down to the last multiple of 16</span>
</span><span class='line'>   <span class="n">sptr</span> <span class="o">-=</span>  <span class="mi">16</span><span class="p">;</span> <span class="c1">// Step back one line for context</span>
</span><span class='line'>   <span class="n">eptr</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="mi">15</span><span class="p">;</span> <span class="c1">// Round down to the last multiple of 16</span>
</span><span class='line'>   <span class="n">eptr</span> <span class="o">+=</span>  <span class="mi">32</span><span class="p">;</span> <span class="c1">// Step forward one line for context</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Dump memory</span>
</span><span class='line'>   <span class="n">dump_memory</span><span class="p">(</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">sptr</span><span class="p">),</span> <span class="n">eptr</span> <span class="o">-</span> <span class="n">sptr</span><span class="p">,</span> <span class="n">os</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// Get the size of our structure</span>
</span><span class='line'>   <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Test</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Reserve more memory than we need</span>
</span><span class='line'>   <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">memory</span><span class="p">[</span><span class="n">size</span> <span class="o">*</span> <span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Fill that memory up with &quot;C&quot; for &quot;Cleared&quot;</span>
</span><span class='line'>   <span class="n">memset</span><span class="p">(</span><span class="n">memory</span><span class="p">,</span> <span class="mh">0xCC</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">memory</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Determine where to construct the object</span>
</span><span class='line'>   <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">size</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Mark that area as &quot;Allocated&quot;</span>
</span><span class='line'>   <span class="n">memset</span><span class="p">(</span><span class="n">memory</span> <span class="o">+</span> <span class="n">offset</span><span class="p">,</span> <span class="mh">0xAA</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Construct an object offset into memory</span>
</span><span class='line'>   <span class="n">Test</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="k">new</span> <span class="p">(</span><span class="n">memory</span> <span class="o">+</span> <span class="n">offset</span><span class="p">)</span> <span class="n">Test</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Lets see what it looks like</span>
</span><span class='line marked start end'>   <span class="n">dump_memory_with_context</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Test</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Destroy the object</span>
</span><span class='line'>   <span class="n">ptr</span><span class="o">-&gt;~</span><span class="n">Test</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we get:</p>

<pre><code>-----------------------------------------------------------------------
80 bytes              0  1  2  3   4  5  6  7   8  9  A  B   C  D  E  F
0x00007FFFFFFFE210:  A0 E2 FF FF  FF 7F 00 00  6C 6B 40 00  00 00 00 00
0x00007FFFFFFFE220:  CC CC CC CC  CC CC CC CC  CC CC CC CC  11 AA AA AA
0x00007FFFFFFFE230:  22 22 22 22  33 33 AA AA  AA AA AA AA  44 44 44 44
0x00007FFFFFFFE240:  44 44 44 44  CC CC CC CC  CC CC CC CC  CC CC CC CC
0x00007FFFFFFFE250:  88 E3 FF FF  FF 7F 00 00  75 94 42 00  01 00 00 00
-----------------------------------------------------------------------
</code></pre>

<p>This shows a local context memory dump that includes our object and the memory around it. Our markers can be clearly seen, as well as the object itself. In addition, we see some other garbage from the stack.</p>

<h2>Alignment</h2>

<p>In the last section, we constructed an object offset into our memory area, and the result was misaligned in the stack. This situation is not ideal.</p>

<p>Memory alignment is important because while programmers think in terms of bytes, CPUs think in terms of words. On a 64-bit system, this means the CPU will load 8 bytes at a time from memory. If you have an unaligned member that straddles two words, the CPU needs to make twice as many memory accesses as it would have if the memory was properly aligned.<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p>GCC will typically handle memory alignment for you when allocating from the heap, but in the case of a memory pool it is up to the developer to handle it properly. There are two rules to follow when aligning memory addresses:</p>

<ul>
<li>The alignment boundary must be greater or equal to the size of a pointer</li>
<li>The alignment boundary must be a power of 2</li>
</ul>


<p>One fast and generic method for aligning memory is to allocate a little bit more than needed in order to get to the next boundary, then store the original pointer in the space that was skipped over. It is important to keep the original pointer around because it will be needed when it is time to free that memory.</p>

<p>Below is a modification of an alignment algorithm found in the Eigen<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> library. The following enhancements were made:</p>

<ul>
<li>Allow for user specified alignment</li>
<li>Add compile time checks for alignment rules</li>
<li>Provide a method for accessing the unaligned pointer</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;boost/mpl/assert.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/mpl/int.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/mpl/comparison.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/mpl/bitwise.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/mpl/arithmetic.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">bytes</span> <span class="o">=</span> <span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">boundary</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// If an alignment is specified, it must be greater than or equal to</span>
</span><span class='line'>   <span class="c1">// the size of a pointer.</span>
</span><span class='line'>   <span class="n">BOOST_MPL_ASSERT</span><span class="p">((</span>
</span><span class='line'>      <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">greater_equal</span><span class="o">&lt;</span>
</span><span class='line'>         <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="n">bytes</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>         <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&gt;</span>
</span><span class='line'>   <span class="p">));</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// The alignment bytes must be a power of two</span>
</span><span class='line'>   <span class="c1">// (n &amp; (n-1)) == 0</span>
</span><span class='line'>   <span class="n">BOOST_MPL_ASSERT</span><span class="p">((</span>
</span><span class='line'>      <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">equal_to</span><span class="o">&lt;</span>
</span><span class='line'>         <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">bitand_</span><span class="o">&lt;</span>
</span><span class='line'>            <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="n">bytes</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">minus</span><span class="o">&lt;</span>
</span><span class='line'>               <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="n">bytes</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>               <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&gt;</span>
</span><span class='line'>         <span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>         <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&gt;</span>
</span><span class='line'>   <span class="p">));</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// In order for this to work, must allocate additional bytes</span>
</span><span class='line'>   <span class="k">enum</span><span class="p">{</span><span class="n">value</span> <span class="o">=</span> <span class="n">bytes</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Get the next aligned pointer</span>
</span><span class='line'>   <span class="k">static</span> <span class="kt">void</span><span class="o">*</span> <span class="n">next</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">ptr</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Round down to the previous multiple of X,</span>
</span><span class='line'>      <span class="c1">// then move to the next multiple of X.</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>          <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span>
</span><span class='line'>              <span class="p">(</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">ptr</span><span class="p">)</span>
</span><span class='line'>                  <span class="o">&amp;</span> <span class="o">~</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span><span class="p">(</span><span class="n">value</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>              <span class="o">+</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Return an aligned pointer</span>
</span><span class='line'>   <span class="k">static</span> <span class="kt">void</span><span class="o">*</span> <span class="n">align</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">ptr</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Get the next aligned pointer</span>
</span><span class='line'>      <span class="kt">void</span><span class="o">*</span> <span class="n">aligned_ptr</span> <span class="o">=</span> <span class="n">next</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Save the original pointer in the space we skipped over</span>
</span><span class='line'>      <span class="o">*</span><span class="p">(</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">**&gt;</span><span class="p">(</span><span class="n">aligned_ptr</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Return the aligned pointer</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">aligned_ptr</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Retrieve the original pointer</span>
</span><span class='line'>   <span class="k">static</span> <span class="kt">void</span><span class="o">*</span> <span class="n">unalign</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">ptr</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">*</span><span class="p">(</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">**&gt;</span><span class="p">(</span><span class="n">ptr</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Specialize to not attempt alignment</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">boundary</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">enum</span><span class="p">{</span><span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="p">};</span>
</span><span class='line'>   <span class="k">static</span> <span class="kt">void</span><span class="o">*</span> <span class="n">next</span>   <span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">ptr</span><span class="p">){</span><span class="k">return</span> <span class="n">ptr</span><span class="p">;}</span>
</span><span class='line'>   <span class="k">static</span> <span class="kt">void</span><span class="o">*</span> <span class="n">align</span>  <span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">ptr</span><span class="p">){</span><span class="k">return</span> <span class="n">ptr</span><span class="p">;}</span>
</span><span class='line'>   <span class="k">static</span> <span class="kt">void</span><span class="o">*</span> <span class="n">unalign</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">ptr</span><span class="p">){</span><span class="k">return</span> <span class="n">ptr</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using it is simple: Any pointer can be aligned on a boundary, and any aligned pointer can be unaligned. However, it is important to remember that extra space must be allocated before attempting to align the pointer. The following example will show how to align a structure on a 16 byte boundary:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// Get the size of our structure</span>
</span><span class='line'>   <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Test</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Purposely offset the object by 8 bytes</span>
</span><span class='line'>   <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Reserve size for our structure</span>
</span><span class='line'>   <span class="c1">// plus alignment overhead</span>
</span><span class='line'>   <span class="c1">// plus our test offset</span>
</span><span class='line'>   <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">memory</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">malloc</span><span class="p">(</span><span class="n">size</span> <span class="o">+</span> <span class="n">boundary</span><span class="o">&lt;</span><span class="mi">16</span><span class="o">&gt;::</span><span class="n">value</span> <span class="o">+</span> <span class="n">offset</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Print out the address of the malloc&#39;d memory pointer</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Memory:          0x%016lX</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">memory</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Fill that memory up with &quot;C&quot; for &quot;Cleared&quot;</span>
</span><span class='line'>   <span class="n">memset</span><span class="p">(</span><span class="n">memory</span><span class="p">,</span> <span class="mh">0xCC</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">memory</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Mark the object area as &quot;Allocated&quot;</span>
</span><span class='line'>   <span class="n">memset</span><span class="p">(</span><span class="n">memory</span> <span class="o">+</span> <span class="n">offset</span><span class="p">,</span> <span class="mh">0xAA</span><span class="p">,</span> <span class="n">size</span> <span class="o">+</span> <span class="n">boundary</span><span class="o">&lt;</span><span class="mi">16</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Print out the address of where we will construct the object</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Memory + Offset: 0x%016lX</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">memory</span> <span class="o">+</span> <span class="n">offset</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Construct an object offset into memory,</span>
</span><span class='line'>   <span class="c1">// but use pointer alignment to realign it</span>
</span><span class='line'>   <span class="n">Test</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="k">new</span> <span class="p">(</span><span class="n">boundary</span><span class="o">&lt;</span><span class="mi">16</span><span class="o">&gt;::</span><span class="n">align</span><span class="p">(</span><span class="n">memory</span> <span class="o">+</span> <span class="n">offset</span><span class="p">))</span> <span class="n">Test</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Print out the address of the aligned pointer</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Ptr:             0x%016lX</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">ptr</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Print out the address of the unaligned pointer</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Unaligned Ptr:   0x%016lX</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">boundary</span><span class="o">&lt;</span><span class="mi">16</span><span class="o">&gt;::</span><span class="n">unalign</span><span class="p">(</span><span class="n">ptr</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Lets see what it looks like</span>
</span><span class='line'>   <span class="n">dump_memory_with_context</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Test</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Destroy the object</span>
</span><span class='line'>   <span class="n">ptr</span><span class="o">-&gt;~</span><span class="n">Test</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Unalign the aligned pointer to get the original pointer back</span>
</span><span class='line'>   <span class="c1">// then remove the offset to properly free</span>
</span><span class='line'>   <span class="n">free</span><span class="p">(</span><span class="n">boundary</span><span class="o">&lt;</span><span class="mi">16</span><span class="o">&gt;::</span><span class="n">unalign</span><span class="p">(</span><span class="n">ptr</span><span class="p">)</span> <span class="o">-</span> <span class="n">offset</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This outputs:</p>

<pre><code>Memory:          0x00000000006648F0
Memory + Offset: 0x00000000006648F8
Ptr:             0x0000000000664900
Unaligned Ptr:   0x00000000006648F8
-----------------------------------------------------------------------
64 bytes              0  1  2  3   4  5  6  7   8  9  A  B   C  D  E  F
0x00000000006648F0:  CC CC CC CC  CC CC CC CC  F8 48 66 00  00 00 00 00
0x0000000000664900:  11 AA AA AA  22 22 22 22  33 33 AA AA  AA AA AA AA
0x0000000000664910:  44 44 44 44  44 44 44 44  AA AA AA AA  AA AA AA AA
0x0000000000664920:  4B 00 00 00  00 00 00 00  31 00 00 00  00 00 00 00
-----------------------------------------------------------------------
</code></pre>

<p>So what happened here? Here is the output color-coded:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/08/23/placement-new/01.png"></p>

<ul>
<li>Red: The debug markers</li>
<li>Orange: The 16-byte aligned pointer address</li>
<li>Yellow: The test object</li>
<li>Green: The original unaligned / offset pointer address</li>
<li>Blue: The beginning of the memory</li>
</ul>


<p>Now, remember that we offset the object 8 bytes into the beginning of the memory, which would be <code>0x006648F8</code>. The object was then aligned to the next 16-byte boundary, starting at <code>0x00664900</code> (16-byte aligned addresses always end in 0). In order to do this, an extra 16 bytes needed to be allocated, which can be seen with the red <code>0xAA</code> markers. Finally, the original pointer of <code>0x006648F8</code> was saved immediately before the aligned pointer in little endian (which in this case happens to have the same address as itself).</p>

<blockquote><p><strong>Endianness</strong><br/>
Endianness is the ordering of bytes in a word (On a 64-bit machine, there are 8 bytes in a word)<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>. The bytes can be ordered in one of two directions:</p>

<ul>
<li>Big Endian: The most significant byte is stored at the smallest memory address (the &ldquo;Big End&rdquo; first)</li>
<li>Little Endian: The least significant byte is stored at the smallest memory address (the &ldquo;Little End&rdquo; first)</li>
</ul>


<p>Big Endian is the more intuitive method, as it matches reading left to right. It is chosen as the standard for transmitting words over a network, and is also known as &ldquo;Network Byte Order&rdquo;.</p>

<p>Little Endian is more difficult for a human to read, but it has performance advantages and desirable properties. For example, a 32-bit memory location with content <code>4A 00 00 00</code> can be read at the same address as either 8-bit (value = <code>0x4A</code>), 16-bit (<code>0x004A</code>), or 32-bit (<code>0x0000004A</code>), all of which retain the same numeric value. Intel&rsquo;s x86/x64 architecture is little endian.</p>

<p>It is important to be aware that endianness doesn&rsquo;t affect byte arrays or strings.</p></blockquote>

<p>Here is what the memory would look like if we did the alignment without the forced 8 byte offset:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/08/23/placement-new/02.png"></p>

<p>As you can see, even though the memory was already aligned, 16 bytes were wasted in order to get to the next aligned address. You can also see the original pointer address stored immediately before the aligned address. If we were doing 8 byte alignment, the extra 8 bytes that are wasted to align on the next boundary would contain the original address. Attempting to perform an alignment less than 8 means that there wouldn&rsquo;t be enough space for the original pointer; however, one of the rules of alignment states that the alignment must be greater than or equal to the size of a pointer, so we don&rsquo;t need to worry about that case.</p>

<p>What about larger alignments? Here is what it would look like if we were doing 32-byte alignment with an 8 byte offset:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/08/23/placement-new/03.png"></p>

<p>Generally, 32-byte alignment is unnecessary. There are cases where 16-byte alignment is needed though, such as when dealing with the SSE instructions on the CPU (for example, matrix multiplication with the Eigen library).</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://www.codinglabs.net/tutorial_memory_pool.aspx">Memory Pool Tutorial</a> &ndash; Marco Alamia<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="https://en.wikipedia.org/wiki/Data_structure_alignment">Data Structure Alignment</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><a href="http://stackoverflow.com/questions/381244/purpose-of-memory-alignment">Purpose of Memory Alignment</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p><a href="https://github.com/RLovelett/eigen/blob/master/Eigen/src/Core/util/Memory.h">Eigen Handmade Aligned Malloc</a> &ndash; Benoit Jacob<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p><a href="https://en.wikipedia.org/wiki/Endianness">Endianness</a><a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yaml De/Serialization With Boost Fusion]]></title>
    <link href="http://jrruethe.github.io/blog/2015/08/17/yaml-de-slash-serialization-with-boost-fusion/"/>
    <updated>2015-08-17T20:17:35-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/08/17/yaml-de-slash-serialization-with-boost-fusion</id>
    <content type="html"><![CDATA[<p>In a <a href="">previous post</a> I did a rather lengthy walkthrough of how to create a Json pretty printer for any object using Boost Fusion. This time I will be doing the same thing, only with Yaml.</p>

<p>This method relies on a third party library<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, but the end result is much cleaner. This method supports both serialization and deserialization. As a bonus, it can also work with Json!</p>

<p>To run the following code, you will need these libraries installed:</p>

<ul>
<li>libboost-all-dev</li>
<li>libyaml-cpp-dev</li>
</ul>


<p>I am using yaml-cpp version 0.5.1, and some internals are exposed. There is a possibility that this method would not work with a future version.</p>

<p>The first part is similar to before; creating some wrappers around the Boost Fusion / MPL calls for ease of use. Hopefully the comments and names are straightforward:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">sequence</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Point to the first element</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">begin</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Point to the element after the last element in the sequence</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">size</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Point to the first element</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">first</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Point to the second element (for pairs)</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span> <span class="n">second</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Point to the last element in the sequence</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">prior</span><span class="o">&lt;</span><span class="n">end</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">last</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Number of elements in the sequence</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">size</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Get a range representing the size of the structure</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">range_c</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">size</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">value</span><span class="o">&gt;</span> <span class="n">indices</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span>
</span><span class='line'>         <span class="k">typename</span> <span class="n">N</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">element_at</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Type of the element at this index</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">value_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Previous element</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">prior</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">previous</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Next element</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">next</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Member name of the element at this index</span>
</span><span class='line'>    <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">extension</span><span class="o">::</span><span class="n">struct_member_name</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">::</span><span class="n">value</span><span class="o">&gt;::</span><span class="n">call</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Type name of the element at this index</span>
</span><span class='line'>    <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">type_name</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">units</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">demangle</span><span class="p">(</span><span class="k">typeid</span><span class="p">(</span><span class="n">type</span><span class="p">).</span><span class="n">name</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Access the element</span>
</span><span class='line'>    <span class="k">static</span> <span class="kr">inline</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">at</span><span class="o">&lt;</span><span class="n">S</span> <span class="k">const</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">get</span><span class="p">(</span><span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">at</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">type</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Return the string name of the type</span>
</span><span class='line'>    <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">units</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">demangle</span><span class="p">(</span><span class="k">typeid</span><span class="p">(</span><span class="n">T</span><span class="p">).</span><span class="n">name</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>We need two functors:</p>

<ul>
<li>One to insert items into a Yaml node</li>
<li>One to extract items from a Yaml node</li>
</ul>


<p>Lets do the inserter first. The constructor will take in a Yaml node to insert into, and <code>operator()</code> will take in a Zip element. A Zip element is a tuple created by boost::fusion::for_each that is used to zip together two lists. The concept is the same as in Python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nb">zip</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code performs the following operations:</p>

<ol>
<li>Grabs the index from the zip</li>
<li>Gets the name of that field using reflection</li>
<li>Gets the type of that field</li>
<li>Aliases the member for convenience</li>
<li>Stores the member under its name in the Yaml node</li>
</ol>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number marked'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">inserter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">T</span> <span class="n">Type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">inserter</span><span class="p">(</span><span class="n">YAML</span><span class="o">::</span><span class="n">Node</span><span class="o">&amp;</span> <span class="n">subroot</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>      <span class="n">mSubroot</span><span class="p">(</span><span class="n">subroot</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Zip</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="kt">void</span> <span class="k">operator</span><span class="p">()(</span><span class="n">Zip</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">zip</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">remove_const</span><span class="o">&lt;</span>
</span><span class='line'>                 <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">remove_reference</span><span class="o">&lt;</span>
</span><span class='line'>                    <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">at_c</span><span class="o">&lt;</span><span class="n">Zip</span><span class="p">,</span> <span class="mi">0</span><span class="o">&gt;::</span><span class="n">type</span>
</span><span class='line'>                 <span class="o">&gt;::</span><span class="n">type</span>
</span><span class='line'>              <span class="o">&gt;::</span><span class="n">type</span> <span class="n">Index</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Get the field name as a string using reflection</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">field_name</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">Index</span><span class="o">&gt;::</span><span class="n">name</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Get the field type</span>
</span><span class='line'>      <span class="k">typedef</span> <span class="n">BOOST_TYPEOF</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">at_c</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">zip</span><span class="p">))</span> <span class="n">FieldType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Alias the member</span>
</span><span class='line'>      <span class="n">FieldType</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">member</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">at_c</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">zip</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Store this field in the yaml node</span>
</span><span class='line marked start end'>      <span class="n">mSubroot</span><span class="p">[</span><span class="n">field_name</span><span class="p">]</span> <span class="o">=</span> <span class="n">member</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>   <span class="n">YAML</span><span class="o">::</span><span class="n">Node</span><span class="o">&amp;</span> <span class="n">mSubroot</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The extractor is the same concept, but it is slightly more difficult for three reasons:</p>

<ol>
<li>Parsing a file can fail, and <code>yaml-cpp</code> is not very good at reporting useful errors.</li>
<li><code>boost::fusion::for_each</code> requires the zip and <code>operator()</code> to be const.</li>
<li><code>boost::fusion::for_each</code> requires <code>operator()</code> to return void.</li>
</ol>


<p>To solve these issues, we use the reflection capabilities to identify the field we are trying to load, and can report that on failure. Maintaining an item count also provides useful information for the error reporting. Using <code>const_cast</code> gets around the const requirements in an ugly manner. Finally, instead of returning <code>false</code> on error, we throw an exception that needs to be caught later.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number marked'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">extractor</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">T</span> <span class="n">Type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">extractor</span><span class="p">(</span><span class="n">YAML</span><span class="o">::</span><span class="n">Node</span><span class="o">&amp;</span> <span class="n">subroot</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>      <span class="n">mSubroot</span><span class="p">(</span><span class="n">subroot</span><span class="p">),</span>
</span><span class='line'>      <span class="n">mItem</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Zip</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="kt">void</span> <span class="k">operator</span><span class="p">()(</span><span class="n">Zip</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">zip</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">remove_const</span><span class="o">&lt;</span>
</span><span class='line'>                 <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">remove_reference</span><span class="o">&lt;</span>
</span><span class='line'>                    <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">at_c</span><span class="o">&lt;</span><span class="n">Zip</span><span class="p">,</span> <span class="mi">0</span><span class="o">&gt;::</span><span class="n">type</span>
</span><span class='line'>                 <span class="o">&gt;::</span><span class="n">type</span>
</span><span class='line'>              <span class="o">&gt;::</span><span class="n">type</span> <span class="n">Index</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Get the field name as a string using reflection</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">field_name</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">Index</span><span class="o">&gt;::</span><span class="n">name</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Get the field native type</span>
</span><span class='line'>      <span class="k">typedef</span> <span class="n">BOOST_TYPEOF</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">at_c</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">zip</span><span class="p">))</span> <span class="n">FieldType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Alias the member</span>
</span><span class='line'>      <span class="c1">// We need to const cast this because &quot;boost::fusion::for_each&quot;</span>
</span><span class='line'>      <span class="c1">// requires that zip be const, however we want to modify it.</span>
</span><span class='line'>      <span class="n">FieldType</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">const_member</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">at_c</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">zip</span><span class="p">);</span>
</span><span class='line'>      <span class="n">FieldType</span><span class="o">&amp;</span> <span class="n">member</span> <span class="o">=</span> <span class="k">const_cast</span><span class="o">&lt;</span><span class="n">FieldType</span><span class="o">&amp;&gt;</span><span class="p">(</span><span class="n">const_member</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// We need to const cast this because &quot;boost::fusion::for_each&quot;</span>
</span><span class='line'>      <span class="c1">// requires that operator() be const, however we want to modify</span>
</span><span class='line'>      <span class="c1">// the object. This item number is used for error reporting.</span>
</span><span class='line'>      <span class="kt">int</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">const_item</span> <span class="o">=</span> <span class="n">mItem</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span><span class="o">&amp;</span> <span class="n">item</span> <span class="o">=</span> <span class="k">const_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&amp;&gt;</span><span class="p">(</span><span class="n">const_item</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Try to load the value from the file</span>
</span><span class='line'>      <span class="k">try</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="c1">// Extract this field from the yaml node</span>
</span><span class='line marked start end'>         <span class="n">member</span> <span class="o">=</span> <span class="n">mSubroot</span><span class="p">[</span><span class="n">field_name</span><span class="p">].</span><span class="n">as</span><span class="o">&lt;</span><span class="n">FieldType</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// This item number helps us find issues when loading incomplete yaml files</span>
</span><span class='line'>         <span class="o">++</span><span class="n">item</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="c1">// Catch any exceptions</span>
</span><span class='line'>      <span class="k">catch</span><span class="p">(</span><span class="n">YAML</span><span class="o">::</span><span class="n">Exception</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="c1">// Print out some helpful information to find the error in the yaml file</span>
</span><span class='line'>         <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">type_name</span> <span class="o">=</span> <span class="n">type</span><span class="o">&lt;</span><span class="n">FieldType</span><span class="o">&gt;::</span><span class="n">name</span><span class="p">();</span>
</span><span class='line'>         <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Error loading item &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">item</span>  <span class="o">&lt;&lt;</span> <span class="s">&quot; : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">type_name</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">field_name</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// &quot;boost::fusion::for_each&quot; requires operator() to return void,</span>
</span><span class='line'>         <span class="c1">// so the only way to signal that an error occurred is to throw</span>
</span><span class='line'>         <span class="c1">// an exception.</span>
</span><span class='line'>         <span class="k">throw</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>   <span class="n">YAML</span><span class="o">::</span><span class="n">Node</span><span class="o">&amp;</span> <span class="n">mSubroot</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">mItem</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pay attention to the highlighted lines in the above <code>inserter</code> and <code>extractor</code>.<br/>
The call to <code>operator=</code> in the inserter leads to this code being run inside the <code>yaml-cpp</code> library:</p>

<figure class='code'><figcaption><span>&#8220;yaml-cpp/node/impl.h&#8221; </span></figcaption><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number marked'>208</span>
<span class='line-number'>209</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">void</span> <span class="n">Node</span><span class="o">::</span><span class="n">Assign</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">m_isValid</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="n">InvalidNode</span><span class="p">();</span>
</span><span class='line marked start end'>    <span class="n">AssignData</span><span class="p">(</span><span class="n">convert</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">encode</span><span class="p">(</span><span class="n">rhs</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The call to <code>as</code> in the extractor leads to this code being run inside the <code>yaml-cpp</code> library:</p>

<figure class='code'><figcaption><span>&#8220;yaml-cpp/node/impl.h&#8221; </span></figcaption><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number marked'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// template helpers</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">as_if</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">as_if</span><span class="p">(</span><span class="k">const</span> <span class="n">Node</span><span class="o">&amp;</span> <span class="n">node_</span><span class="p">)</span><span class="o">:</span> <span class="n">node</span><span class="p">(</span><span class="n">node_</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">Node</span><span class="o">&amp;</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">T</span> <span class="k">operator</span><span class="p">()(</span><span class="k">const</span> <span class="n">S</span><span class="o">&amp;</span> <span class="n">fallback</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">node</span><span class="p">.</span><span class="n">m_pNode</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">fallback</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">T</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line marked start end'>        <span class="k">if</span><span class="p">(</span><span class="n">convert</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">decode</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">t</span><span class="p">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">fallback</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The documentation states that user specified data types can specialize the <code>YAML::convert&lt;&gt;</code> class to handle encoding and decoding properly. Below is a screenshot of the documentation about this:</p>

<p><img class="center" src="http://jrruethe.github.io/blog/2015/08/17/yaml-de-slash-serialization-with-boost-fusion/01.png"></p>

<p>However, there is a small obstacle when trying to specialize the <code>convert</code> structure for our fusion sequence:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number marked'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">namespace</span> <span class="n">YAML</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;&gt;</span>
</span><span class='line marked start end'>   <span class="k">struct</span> <span class="n">convert</span><span class="o">&lt;???&gt;</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">static</span> <span class="n">Node</span> <span class="n">encode</span><span class="p">(</span><span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">static</span> <span class="kt">bool</span> <span class="n">decode</span><span class="p">(</span><span class="n">Node</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">node</span><span class="p">,</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can&rsquo;t specialize in a general sense because <code>???</code> would either have to be a template parameter, or we would need one of these for every <code>BOOST_FUSION_ADAPT_STRUCT</code> we create.
Normally in this type of situation, we could use partial specialization if there was a second template parameter, even if it was a dummy variable that allowed us to use <code>boost::enable_if</code>.</p>

<p>Digging around the source a little more, we find this gem, and the answer to our problems:</p>

<figure class='code'><figcaption><span>&#8220;yaml-cpp/node/node.h&#8221; </span></figcaption><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>112</span>
<span class='line-number'>113</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">convert</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thats right! The convert structure is only forward declared, it is never actually defined! This means <em>we</em> can define it to be whatever we want!</p>

<p>Time to use some <code>boost::enable_if</code> magic. We add a dummy variable to both <code>encode</code> and <code>decode</code> that only enable those functions if the template parameter is a <code>boost::fusion</code> sequence. This allows the signatures of everything to match. Whenever a type <code>T</code> is not specialized by the library, the compiler will try to use our definition, which will only take effect if the type is a sequence. Otherwise, a compiler error will be thrown just as it would have before. In addition, this method still allows one to specialize for their type if they need extra functionality.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">namespace</span> <span class="n">YAML</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">struct</span> <span class="n">convert</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// This function will only be available if the template parameter is a boost fusion sequence</span>
</span><span class='line'>      <span class="k">static</span> <span class="n">Node</span> <span class="n">encode</span><span class="p">(</span><span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">,</span>
</span><span class='line'>                         <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">enable_if</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">traits</span><span class="o">::</span><span class="n">is_sequence</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">*</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// This function will only be available if the template parameter is a boost fusion sequence</span>
</span><span class='line'>      <span class="k">static</span> <span class="kt">bool</span> <span class="n">decode</span><span class="p">(</span><span class="n">Node</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">node</span><span class="p">,</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">,</span>
</span><span class='line'>                         <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">enable_if</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">traits</span><span class="o">::</span><span class="n">is_sequence</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">*</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the <code>encode</code> method, we iterate over every field in the sequence using the inserter, which will recurse through all the sub-sequences until we hit the &ldquo;bottom&rdquo;. Every sequence is made up of primitive at some level, so eventually the recursion will stop as specializations of <code>encode</code> get called instead of the one we defined.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// This function will only be available if the template parameter is a boost fusion sequence</span>
</span><span class='line'><span class="k">static</span> <span class="n">Node</span> <span class="n">encode</span><span class="p">(</span><span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">,</span>
</span><span class='line'>                   <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">enable_if</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">traits</span><span class="o">::</span><span class="n">is_sequence</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">*</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// For each item in T</span>
</span><span class='line'>   <span class="c1">// Call inserter recursively</span>
</span><span class='line'>   <span class="c1">// Every sequence is made up of primitives at some level</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Get a range representing the size of the structure</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">yaml</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">sequence</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">indices</span> <span class="n">indices</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Make a root node to insert into</span>
</span><span class='line'>   <span class="n">YAML</span><span class="o">::</span><span class="n">Node</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Create an inserter for the root node</span>
</span><span class='line'>   <span class="n">yaml</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">inserter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">inserter</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Insert each member of the structure</span>
</span><span class='line'>   <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">zip</span><span class="p">(</span><span class="n">indices</span><span class="p">(),</span> <span class="n">rhs</span><span class="p">),</span> <span class="n">inserter</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>decode</code> method works the same way, using the <code>extractor</code>. Remember that the extractor throws on error, so the exception needs to be caught.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// This function will only be available if the template parameter is a boost fusion sequence</span>
</span><span class='line'><span class="k">static</span> <span class="kt">bool</span> <span class="n">decode</span><span class="p">(</span><span class="n">Node</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">node</span><span class="p">,</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">,</span>
</span><span class='line'>                   <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">enable_if</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">traits</span><span class="o">::</span><span class="n">is_sequence</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">*</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// For each item in T</span>
</span><span class='line'>   <span class="c1">// Call extractor recursively</span>
</span><span class='line'>   <span class="c1">// Every sequence is made up of primitives at some level</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Get a range representing the size of the structure</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">yaml</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">sequence</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">indices</span> <span class="n">indices</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Create an extractor for the root node</span>
</span><span class='line'>   <span class="c1">// Yaml-cpp requires node to be const&amp;, but the extractor makes</span>
</span><span class='line'>   <span class="c1">// non-const calls to it.</span>
</span><span class='line'>   <span class="n">Node</span><span class="o">&amp;</span> <span class="n">writable_node</span> <span class="o">=</span> <span class="k">const_cast</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&amp;&gt;</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>   <span class="n">yaml</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">extractor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">extractor</span><span class="p">(</span><span class="n">writable_node</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Extract each member of the structure</span>
</span><span class='line'>   <span class="k">try</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// An exception is thrown if any item in the loop cannot be read</span>
</span><span class='line'>      <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">zip</span><span class="p">(</span><span class="n">indices</span><span class="p">(),</span> <span class="n">rhs</span><span class="p">),</span> <span class="n">extractor</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="c1">// Catch all exceptions and prevent them from propagating</span>
</span><span class='line'>   <span class="k">catch</span><span class="p">(...)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// If we made it here, all fields were read correctly</span>
</span><span class='line'>   <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok! All the pieces and parts are completed. Time to make a mixin to wrap it all up. We want objects to have method to convert to and from Yaml and Json (remember that Json is a subset of Yaml, so the yaml parser gives us both abilities for free!). All we need to do is kickstart the recursion using the <code>inserter</code> and <code>extractor</code>.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">namespace</span> <span class="n">yaml</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">class</span> <span class="nc">Yaml</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>   <span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">typedef</span> <span class="n">T</span> <span class="n">Base</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Convert this object to yaml</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">to_yaml</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="c1">// Create an emitter</span>
</span><span class='line'>         <span class="n">YAML</span><span class="o">::</span><span class="n">Emitter</span> <span class="n">emitter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Emit yaml</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">emit</span><span class="p">(</span><span class="n">emitter</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Convert this object to json</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">to_json</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="c1">// Create an emitter</span>
</span><span class='line'>         <span class="n">YAML</span><span class="o">::</span><span class="n">Emitter</span> <span class="n">emitter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Set the emitter manipulators for json</span>
</span><span class='line'>         <span class="n">emitter</span> <span class="o">&lt;&lt;</span> <span class="n">YAML</span><span class="o">::</span><span class="n">Flow</span><span class="p">;</span>
</span><span class='line'>         <span class="n">emitter</span> <span class="o">&lt;&lt;</span> <span class="n">YAML</span><span class="o">::</span><span class="n">DoubleQuoted</span><span class="p">;</span>
</span><span class='line'>         <span class="n">emitter</span> <span class="o">&lt;&lt;</span> <span class="n">YAML</span><span class="o">::</span><span class="n">TrueFalseBool</span><span class="p">;</span>
</span><span class='line'>         <span class="n">emitter</span> <span class="o">&lt;&lt;</span> <span class="n">YAML</span><span class="o">::</span><span class="n">EscapeNonAscii</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Emit json</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">emit</span><span class="p">(</span><span class="n">emitter</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Load yaml into this object</span>
</span><span class='line'>      <span class="kt">bool</span> <span class="n">from_yaml</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">yaml_string</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="c1">// Create a root node to load into</span>
</span><span class='line'>         <span class="n">YAML</span><span class="o">::</span><span class="n">Node</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">try</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Try loading the root node</span>
</span><span class='line'>            <span class="n">root</span> <span class="o">=</span> <span class="n">YAML</span><span class="o">::</span><span class="n">Load</span><span class="p">(</span><span class="n">yaml_string</span><span class="p">);</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>         <span class="k">catch</span><span class="p">(...)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="c1">// The yaml couldn&#39;t be parsed</span>
</span><span class='line'>            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Invalid yaml&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Get a range representing the size of the structure</span>
</span><span class='line'>         <span class="k">typedef</span> <span class="k">typename</span> <span class="n">detail</span><span class="o">::</span><span class="n">sequence</span><span class="o">&lt;</span><span class="n">Base</span><span class="o">&gt;::</span><span class="n">indices</span> <span class="n">indices</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Create an extractor for the root node</span>
</span><span class='line'>         <span class="n">detail</span><span class="o">::</span><span class="n">extractor</span><span class="o">&lt;</span><span class="n">Base</span><span class="o">&gt;</span> <span class="n">extractor</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Extract each member of the structure</span>
</span><span class='line'>         <span class="k">try</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="c1">// An exception is thrown if any item in the loop cannot be read</span>
</span><span class='line'>            <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">zip</span><span class="p">(</span><span class="n">indices</span><span class="p">(),</span> <span class="n">self</span><span class="p">()),</span> <span class="n">extractor</span><span class="p">);</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>         <span class="c1">// Catch all exceptions and prevent them from propagating</span>
</span><span class='line'>         <span class="k">catch</span><span class="p">(...)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// If we made it here, all fields were read correctly</span>
</span><span class='line'>         <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// The yaml parser can also parse json</span>
</span><span class='line'>      <span class="kr">inline</span> <span class="kt">bool</span> <span class="n">from_json</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">json_string</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">from_yaml</span><span class="p">(</span><span class="n">json_string</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">protected</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">emit</span><span class="p">(</span><span class="n">YAML</span><span class="o">::</span><span class="n">Emitter</span><span class="o">&amp;</span> <span class="n">emitter</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="c1">// Get a range representing the size of the structure</span>
</span><span class='line'>         <span class="k">typedef</span> <span class="k">typename</span> <span class="n">detail</span><span class="o">::</span><span class="n">sequence</span><span class="o">&lt;</span><span class="n">Base</span><span class="o">&gt;::</span><span class="n">indices</span> <span class="n">indices</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Make a root node to insert into</span>
</span><span class='line'>         <span class="n">YAML</span><span class="o">::</span><span class="n">Node</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Create an inserter for the root node</span>
</span><span class='line'>         <span class="n">detail</span><span class="o">::</span><span class="n">inserter</span><span class="o">&lt;</span><span class="n">Base</span><span class="o">&gt;</span> <span class="n">inserter</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Insert each member of the structure</span>
</span><span class='line'>         <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">zip</span><span class="p">(</span><span class="n">indices</span><span class="p">(),</span> <span class="n">self</span><span class="p">()),</span> <span class="n">inserter</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Emit yaml</span>
</span><span class='line'>         <span class="n">emitter</span> <span class="o">&lt;&lt;</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Return string representation</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">emitter</span><span class="p">.</span><span class="n">c_str</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">private</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Cast ourselves to our CRTP base</span>
</span><span class='line'>      <span class="n">Base</span><span class="o">&amp;</span> <span class="n">self</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">Base</span><span class="o">&amp;&gt;</span><span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Time to test it. First we create some test structures with different types and containers, and adapt them into sequences:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number marked'>13</span>
<span class='line-number'>14</span>
<span class='line-number marked'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number marked'>30</span>
<span class='line-number marked'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number marked'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">yaml</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">test</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">struct</span> <span class="n">One</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line marked start end'>      <span class="k">friend</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">extension</span><span class="o">::</span><span class="n">access</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line marked start end'>      <span class="n">One</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>         <span class="n">two</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>         <span class="n">three</span><span class="p">(</span><span class="mf">0.0</span><span class="p">),</span>
</span><span class='line'>         <span class="n">four</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">One</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">c</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>         <span class="n">two</span><span class="p">(</span><span class="n">a</span><span class="p">),</span>
</span><span class='line'>         <span class="n">three</span><span class="p">(</span><span class="n">b</span><span class="p">),</span>
</span><span class='line'>         <span class="n">four</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">int</span> <span class="n">two</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">double</span> <span class="n">three</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line marked start'>   <span class="k">private</span><span class="o">:</span>
</span><span class='line marked end'>      <span class="kt">bool</span> <span class="n">four</span><span class="p">;</span>
</span><span class='line'>   <span class="p">};</span>
</span><span class='line'>
</span><span class='line marked start end'>   <span class="k">struct</span> <span class="n">Five</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Yaml</span><span class="o">&lt;</span><span class="n">Five</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">One</span><span class="o">&gt;</span> <span class="n">Map_t</span><span class="p">;</span>
</span><span class='line'>      <span class="n">Map_t</span> <span class="n">six</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">One</span><span class="o">&gt;</span> <span class="n">Vector_t</span><span class="p">;</span>
</span><span class='line'>      <span class="n">Vector_t</span> <span class="n">seven</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">eight</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">Matrix_t</span><span class="p">;</span>
</span><span class='line'>      <span class="n">Matrix_t</span> <span class="n">nine</span><span class="p">;</span>
</span><span class='line'>   <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_FUSION_ADAPT_STRUCT</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>   <span class="n">test</span><span class="o">::</span><span class="n">One</span><span class="p">,</span>
</span><span class='line'>   <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="n">two</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="kt">double</span><span class="p">,</span> <span class="n">three</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="n">four</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_FUSION_ADAPT_STRUCT</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>   <span class="n">test</span><span class="o">::</span><span class="n">Five</span><span class="p">,</span>
</span><span class='line'>   <span class="p">(</span><span class="n">test</span><span class="o">::</span><span class="n">Five</span><span class="o">::</span><span class="n">Map_t</span><span class="p">,</span> <span class="n">six</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="n">test</span><span class="o">::</span><span class="n">Five</span><span class="o">::</span><span class="n">Vector_t</span><span class="p">,</span> <span class="n">seven</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">eight</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="n">test</span><span class="o">::</span><span class="n">Five</span><span class="o">::</span><span class="n">Matrix_t</span><span class="p">,</span> <span class="n">nine</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>A couple things to note here. First off, a default constructor is required for decoding. Secondly, if you want to adapt private or protected members, your class must befriend the <code>boost::fusion::extension::access</code> class. Finally, the top-level structure that you want to serialize / deserialize must inherit from the <code>Yaml&lt;&gt;</code> mixin.</p>

<p>To try it out, populate the structure and output it as Yaml and Json. Then try parsing a different Yaml string and make sure the structure was populated accordingly:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">test</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">Five</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>   <span class="n">v</span><span class="p">.</span><span class="n">six</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="mi">123</span><span class="p">,</span> <span class="n">One</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mf">6.6</span><span class="p">,</span> <span class="kc">true</span><span class="p">)));</span>
</span><span class='line'>   <span class="n">v</span><span class="p">.</span><span class="n">six</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="mi">456</span><span class="p">,</span> <span class="n">One</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mf">8.8</span><span class="p">,</span> <span class="kc">false</span><span class="p">)));</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">v</span><span class="p">.</span><span class="n">seven</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">One</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mf">1.1</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span>
</span><span class='line'>   <span class="n">v</span><span class="p">.</span><span class="n">seven</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">One</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mf">2.2</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">v</span><span class="p">.</span><span class="n">eight</span> <span class="o">=</span> <span class="s">&quot;eight&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>   <span class="n">temp</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mf">2.3</span><span class="p">);</span>
</span><span class='line'>   <span class="n">temp</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mf">4.5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">v</span><span class="p">.</span><span class="n">nine</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
</span><span class='line'>   <span class="n">v</span><span class="p">.</span><span class="n">nine</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">v</span><span class="p">.</span><span class="n">to_yaml</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">v</span><span class="p">.</span><span class="n">to_json</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">///////////////////////////////////////////</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;==============&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">ss</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;six:            </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;  234:          </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    two: 4      </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    three: 5.5  </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    four: true  </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;  345:          </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    two: 6      </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    three: 7.7  </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    four: false </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;seven:          </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;  - two: 8      </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    three: 9.9  </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    four: true  </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;  - two: 2      </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    three: 3.3  </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    four: true  </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;eight: nine     </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;nine:           </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;  -             </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    - 3.4       </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    - 5.6       </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;  -             </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    - 7.8       </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    - 9.0       </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">v</span><span class="p">.</span><span class="n">from_yaml</span><span class="p">(</span><span class="n">ss</span><span class="p">.</span><span class="n">str</span><span class="p">());</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">v</span><span class="p">.</span><span class="n">to_yaml</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output is:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">six</span><span class="p">:</span>
</span><span class='line'>  <span class="mi">123</span><span class="p">:</span>
</span><span class='line'>    <span class="n">two</span><span class="p">:</span> <span class="mi">3</span>
</span><span class='line'>    <span class="n">three</span><span class="p">:</span> <span class="mf">6.6</span>
</span><span class='line'>    <span class="n">four</span><span class="p">:</span> <span class="n">true</span>
</span><span class='line'>  <span class="mi">456</span><span class="p">:</span>
</span><span class='line'>    <span class="n">two</span><span class="p">:</span> <span class="mi">4</span>
</span><span class='line'>    <span class="n">three</span><span class="p">:</span> <span class="mf">8.800000000000001</span>
</span><span class='line'>    <span class="n">four</span><span class="p">:</span> <span class="n">false</span>
</span><span class='line'><span class="n">seven</span><span class="p">:</span>
</span><span class='line'>  <span class="o">-</span> <span class="n">two</span><span class="p">:</span> <span class="mi">5</span>
</span><span class='line'>    <span class="n">three</span><span class="p">:</span> <span class="mf">1.1</span>
</span><span class='line'>    <span class="n">four</span><span class="p">:</span> <span class="n">true</span>
</span><span class='line'>  <span class="o">-</span> <span class="n">two</span><span class="p">:</span> <span class="mi">5</span>
</span><span class='line'>    <span class="n">three</span><span class="p">:</span> <span class="mf">2.2</span>
</span><span class='line'>    <span class="n">four</span><span class="p">:</span> <span class="n">true</span>
</span><span class='line'><span class="n">eight</span><span class="p">:</span> <span class="n">eight</span>
</span><span class='line'><span class="n">nine</span><span class="p">:</span>
</span><span class='line'>  <span class="o">-</span>
</span><span class='line'>    <span class="o">-</span> <span class="mf">2.3</span>
</span><span class='line'>    <span class="o">-</span> <span class="mf">4.5</span>
</span><span class='line'>  <span class="o">-</span>
</span><span class='line'>    <span class="o">-</span> <span class="mf">2.3</span>
</span><span class='line'>    <span class="o">-</span> <span class="mf">4.5</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;six&quot;</span><span class="p">:</span> <span class="p">{</span><span class="s">&quot;456&quot;</span><span class="p">:</span> <span class="p">{</span><span class="s">&quot;two&quot;</span><span class="p">:</span> <span class="s">&quot;4&quot;</span><span class="p">,</span> <span class="s">&quot;three&quot;</span><span class="p">:</span> <span class="s">&quot;8.800000000000001&quot;</span><span class="p">,</span> <span class="s">&quot;four&quot;</span><span class="p">:</span> <span class="s">&quot;false&quot;</span><span class="p">},</span> <span class="s">&quot;123&quot;</span><span class="p">:</span> <span class="p">{</span><span class="s">&quot;three&quot;</span><span class="p">:</span> <span class="s">&quot;6.6&quot;</span><span class="p">,</span> <span class="s">&quot;four&quot;</span><span class="p">:</span> <span class="s">&quot;true&quot;</span><span class="p">,</span> <span class="s">&quot;two&quot;</span><span class="p">:</span> <span class="s">&quot;3&quot;</span><span class="p">}},</span> <span class="s">&quot;seven&quot;</span><span class="p">:</span> <span class="p">[{</span><span class="s">&quot;two&quot;</span><span class="p">:</span> <span class="s">&quot;5&quot;</span><span class="p">,</span> <span class="s">&quot;three&quot;</span><span class="p">:</span> <span class="s">&quot;1.1&quot;</span><span class="p">,</span> <span class="s">&quot;four&quot;</span><span class="p">:</span> <span class="s">&quot;true&quot;</span><span class="p">},</span> <span class="p">{</span><span class="s">&quot;two&quot;</span><span class="p">:</span> <span class="s">&quot;5&quot;</span><span class="p">,</span> <span class="s">&quot;three&quot;</span><span class="p">:</span> <span class="s">&quot;2.2&quot;</span><span class="p">,</span> <span class="s">&quot;four&quot;</span><span class="p">:</span> <span class="s">&quot;true&quot;</span><span class="p">}],</span> <span class="s">&quot;eight&quot;</span><span class="p">:</span> <span class="s">&quot;eight&quot;</span><span class="p">,</span> <span class="s">&quot;nine&quot;</span><span class="p">:</span> <span class="p">[[</span><span class="s">&quot;2.3&quot;</span><span class="p">,</span> <span class="s">&quot;4.5&quot;</span><span class="p">],</span> <span class="p">[</span><span class="s">&quot;2.3&quot;</span><span class="p">,</span> <span class="s">&quot;4.5&quot;</span><span class="p">]]}</span>
</span><span class='line'><span class="o">==============</span>
</span><span class='line'><span class="n">eight</span><span class="p">:</span> <span class="n">nine</span>
</span><span class='line'><span class="n">six</span><span class="p">:</span>
</span><span class='line'>  <span class="mi">234</span><span class="p">:</span>
</span><span class='line'>    <span class="n">three</span><span class="p">:</span> <span class="mf">5.5</span>
</span><span class='line'>    <span class="n">four</span><span class="p">:</span> <span class="n">true</span>
</span><span class='line'>    <span class="n">two</span><span class="p">:</span> <span class="mi">4</span>
</span><span class='line'>  <span class="mi">345</span><span class="p">:</span>
</span><span class='line'>    <span class="n">two</span><span class="p">:</span> <span class="mi">6</span>
</span><span class='line'>    <span class="n">three</span><span class="p">:</span> <span class="mf">7.7</span>
</span><span class='line'>    <span class="n">four</span><span class="p">:</span> <span class="n">false</span>
</span><span class='line'><span class="n">seven</span><span class="p">:</span>
</span><span class='line'>  <span class="o">-</span> <span class="n">three</span><span class="p">:</span> <span class="mf">9.9</span>
</span><span class='line'>    <span class="n">two</span><span class="p">:</span> <span class="mi">8</span>
</span><span class='line'>    <span class="n">four</span><span class="p">:</span> <span class="n">true</span>
</span><span class='line'>  <span class="o">-</span> <span class="n">three</span><span class="p">:</span> <span class="mf">3.3</span>
</span><span class='line'>    <span class="n">two</span><span class="p">:</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">four</span><span class="p">:</span> <span class="n">true</span>
</span><span class='line'><span class="n">nine</span><span class="p">:</span>
</span><span class='line'>  <span class="o">-</span>
</span><span class='line'>    <span class="o">-</span> <span class="mf">3.4</span>
</span><span class='line'>    <span class="o">-</span> <span class="mf">5.6</span>
</span><span class='line'>  <span class="o">-</span>
</span><span class='line'>    <span class="o">-</span> <span class="mf">7.8</span>
</span><span class='line'>    <span class="o">-</span> <span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below is a full copy of the above code that you can compile and run:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// yaml.cpp</span>
</span><span class='line'><span class="c1">// Copyright (C) 2015 Joe Ruether jrruethe@gmail.com</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c1">// it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c1">// the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c1">// (at your option) any later version.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c1">// GNU General Public License for more details.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c1">// along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/foreach.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/adapted.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/include/at_c.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/include/at.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/include/for_each.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/include/size.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/include/value_at.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/include/zip.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/mpl.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/sequence.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/support.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/mpl/eval_if.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/mpl/identity.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/mpl/next_prior.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/mpl/range_c.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/type_traits.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/typeof/typeof.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/units/detail/utility.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/utility/enable_if.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;yaml-cpp/yaml.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">yaml</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">namespace</span> <span class="n">detail</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">sequence</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="c1">// Point to the first element</span>
</span><span class='line'>         <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">begin</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Point to the element after the last element in the sequence</span>
</span><span class='line'>         <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">size</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Point to the first element</span>
</span><span class='line'>         <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">first</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Point to the second element (for pairs)</span>
</span><span class='line'>         <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span> <span class="n">second</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Point to the last element in the sequence</span>
</span><span class='line'>         <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">prior</span><span class="o">&lt;</span><span class="n">end</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">last</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Number of elements in the sequence</span>
</span><span class='line'>         <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">size</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Get a range representing the size of the structure</span>
</span><span class='line'>         <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">range_c</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">size</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">value</span><span class="o">&gt;</span> <span class="n">indices</span><span class="p">;</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span>
</span><span class='line'>               <span class="k">typename</span> <span class="n">N</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">element_at</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="c1">// Type of the element at this index</span>
</span><span class='line'>         <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">value_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Previous element</span>
</span><span class='line'>         <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">prior</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">previous</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Next element</span>
</span><span class='line'>         <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">next</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Member name of the element at this index</span>
</span><span class='line'>         <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>           <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">extension</span><span class="o">::</span><span class="n">struct_member_name</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">::</span><span class="n">value</span><span class="o">&gt;::</span><span class="n">call</span><span class="p">();</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Type name of the element at this index</span>
</span><span class='line'>         <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">type_name</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>           <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">units</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">demangle</span><span class="p">(</span><span class="k">typeid</span><span class="p">(</span><span class="n">type</span><span class="p">).</span><span class="n">name</span><span class="p">());</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Access the element</span>
</span><span class='line'>         <span class="k">static</span> <span class="kr">inline</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">at</span><span class="o">&lt;</span><span class="n">S</span> <span class="k">const</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">get</span><span class="p">(</span><span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>           <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">at</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">type</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="c1">// Return the string name of the type</span>
</span><span class='line'>         <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">units</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">demangle</span><span class="p">(</span><span class="k">typeid</span><span class="p">(</span><span class="n">T</span><span class="p">).</span><span class="n">name</span><span class="p">());</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">inserter</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="k">typedef</span> <span class="n">T</span> <span class="n">Type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">inserter</span><span class="p">(</span><span class="n">YAML</span><span class="o">::</span><span class="n">Node</span><span class="o">&amp;</span> <span class="n">subroot</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>            <span class="n">mSubroot</span><span class="p">(</span><span class="n">subroot</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Zip</span><span class="o">&gt;</span>
</span><span class='line'>         <span class="kt">void</span> <span class="k">operator</span><span class="p">()(</span><span class="n">Zip</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">zip</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">remove_const</span><span class="o">&lt;</span>
</span><span class='line'>                       <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">remove_reference</span><span class="o">&lt;</span>
</span><span class='line'>                          <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">at_c</span><span class="o">&lt;</span><span class="n">Zip</span><span class="p">,</span> <span class="mi">0</span><span class="o">&gt;::</span><span class="n">type</span>
</span><span class='line'>                       <span class="o">&gt;::</span><span class="n">type</span>
</span><span class='line'>                    <span class="o">&gt;::</span><span class="n">type</span> <span class="n">Index</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Get the field name as a string using reflection</span>
</span><span class='line'>            <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">field_name</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">Index</span><span class="o">&gt;::</span><span class="n">name</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Get the field type</span>
</span><span class='line'>            <span class="k">typedef</span> <span class="n">BOOST_TYPEOF</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">at_c</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">zip</span><span class="p">))</span> <span class="n">FieldType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Alias the member</span>
</span><span class='line'>            <span class="n">FieldType</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">member</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">at_c</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">zip</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Store this field in the yaml node</span>
</span><span class='line'>            <span class="n">mSubroot</span><span class="p">[</span><span class="n">field_name</span><span class="p">]</span> <span class="o">=</span> <span class="n">member</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">protected</span><span class="o">:</span>
</span><span class='line'>         <span class="n">YAML</span><span class="o">::</span><span class="n">Node</span><span class="o">&amp;</span> <span class="n">mSubroot</span><span class="p">;</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">extractor</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="k">typedef</span> <span class="n">T</span> <span class="n">Type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">extractor</span><span class="p">(</span><span class="n">YAML</span><span class="o">::</span><span class="n">Node</span><span class="o">&amp;</span> <span class="n">subroot</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>            <span class="n">mSubroot</span><span class="p">(</span><span class="n">subroot</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mItem</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Zip</span><span class="o">&gt;</span>
</span><span class='line'>         <span class="kt">void</span> <span class="k">operator</span><span class="p">()(</span><span class="n">Zip</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">zip</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">remove_const</span><span class="o">&lt;</span>
</span><span class='line'>                       <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">remove_reference</span><span class="o">&lt;</span>
</span><span class='line'>                          <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">at_c</span><span class="o">&lt;</span><span class="n">Zip</span><span class="p">,</span> <span class="mi">0</span><span class="o">&gt;::</span><span class="n">type</span>
</span><span class='line'>                       <span class="o">&gt;::</span><span class="n">type</span>
</span><span class='line'>                    <span class="o">&gt;::</span><span class="n">type</span> <span class="n">Index</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Get the field name as a string using reflection</span>
</span><span class='line'>            <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">field_name</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">Index</span><span class="o">&gt;::</span><span class="n">name</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Get the field native type</span>
</span><span class='line'>            <span class="k">typedef</span> <span class="n">BOOST_TYPEOF</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">at_c</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">zip</span><span class="p">))</span> <span class="n">FieldType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Alias the member</span>
</span><span class='line'>            <span class="c1">// We need to const cast this because &quot;boost::fusion::for_each&quot;</span>
</span><span class='line'>            <span class="c1">// requires that zip be const, however we want to modify it.</span>
</span><span class='line'>            <span class="n">FieldType</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">const_member</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">at_c</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">zip</span><span class="p">);</span>
</span><span class='line'>            <span class="n">FieldType</span><span class="o">&amp;</span> <span class="n">member</span> <span class="o">=</span> <span class="k">const_cast</span><span class="o">&lt;</span><span class="n">FieldType</span><span class="o">&amp;&gt;</span><span class="p">(</span><span class="n">const_member</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// We need to const cast this because &quot;boost::fusion::for_each&quot;</span>
</span><span class='line'>            <span class="c1">// requires that operator() be const, however we want to modify</span>
</span><span class='line'>            <span class="c1">// the object. This item number is used for error reporting.</span>
</span><span class='line'>            <span class="kt">int</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">const_item</span> <span class="o">=</span> <span class="n">mItem</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">int</span><span class="o">&amp;</span> <span class="n">item</span> <span class="o">=</span> <span class="k">const_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&amp;&gt;</span><span class="p">(</span><span class="n">const_item</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Try to load the value from the file</span>
</span><span class='line'>            <span class="k">try</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>               <span class="c1">// Extract this field from the yaml node</span>
</span><span class='line'>               <span class="n">member</span> <span class="o">=</span> <span class="n">mSubroot</span><span class="p">[</span><span class="n">field_name</span><span class="p">].</span><span class="n">as</span><span class="o">&lt;</span><span class="n">FieldType</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>               <span class="c1">// This item number helps us find issues when loading incomplete yaml files</span>
</span><span class='line'>               <span class="o">++</span><span class="n">item</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="c1">// Catch any exceptions</span>
</span><span class='line'>            <span class="k">catch</span><span class="p">(</span><span class="n">YAML</span><span class="o">::</span><span class="n">Exception</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>               <span class="c1">// Print out some helpful information to find the error in the yaml file</span>
</span><span class='line'>               <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">type_name</span> <span class="o">=</span> <span class="n">type</span><span class="o">&lt;</span><span class="n">FieldType</span><span class="o">&gt;::</span><span class="n">name</span><span class="p">();</span>
</span><span class='line'>               <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Error loading item &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">item</span>  <span class="o">&lt;&lt;</span> <span class="s">&quot; : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">type_name</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">field_name</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>               <span class="c1">// &quot;boost::fusion::for_each&quot; requires operator() to return void,</span>
</span><span class='line'>               <span class="c1">// so the only way to signal that an error occurred is to throw</span>
</span><span class='line'>               <span class="c1">// an exception.</span>
</span><span class='line'>               <span class="k">throw</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">protected</span><span class="o">:</span>
</span><span class='line'>         <span class="n">YAML</span><span class="o">::</span><span class="n">Node</span><span class="o">&amp;</span> <span class="n">mSubroot</span><span class="p">;</span>
</span><span class='line'>         <span class="kt">int</span> <span class="n">mItem</span><span class="p">;</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We are going to inject some stuff into the 3rd party Yaml-cpp namespace</span>
</span><span class='line'><span class="k">namespace</span> <span class="n">YAML</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// Normally, a second template parameter would be used as an enabler and default to void.</span>
</span><span class='line'>   <span class="c1">// Then we could use boost::enable_if to enable specific specializations.</span>
</span><span class='line'>   <span class="c1">// Unfortunately, we are specializing an already-declared structure in a 3rd party namespace.</span>
</span><span class='line'>   <span class="c1">// On the plus side, the struct was only forward declared; it hasn&#39;t been defined.</span>
</span><span class='line'>   <span class="c1">// Therefore, we have the freedom to define it!</span>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">struct</span> <span class="n">convert</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// This function will only be available if the template parameter is a boost fusion sequence</span>
</span><span class='line'>      <span class="k">static</span> <span class="n">Node</span> <span class="n">encode</span><span class="p">(</span><span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">,</span>
</span><span class='line'>                         <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">enable_if</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">traits</span><span class="o">::</span><span class="n">is_sequence</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">*</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="c1">// For each item in T</span>
</span><span class='line'>         <span class="c1">// Call inserter recursively</span>
</span><span class='line'>         <span class="c1">// Every sequence is made up of primitives at some level</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Get a range representing the size of the structure</span>
</span><span class='line'>         <span class="k">typedef</span> <span class="k">typename</span> <span class="n">yaml</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">sequence</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">indices</span> <span class="n">indices</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Make a root node to insert into</span>
</span><span class='line'>         <span class="n">YAML</span><span class="o">::</span><span class="n">Node</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Create an inserter for the root node</span>
</span><span class='line'>         <span class="n">yaml</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">inserter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">inserter</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Insert each member of the structure</span>
</span><span class='line'>         <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">zip</span><span class="p">(</span><span class="n">indices</span><span class="p">(),</span> <span class="n">rhs</span><span class="p">),</span> <span class="n">inserter</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">return</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// This function will only be available if the template parameter is a boost fusion sequence</span>
</span><span class='line'>      <span class="k">static</span> <span class="kt">bool</span> <span class="n">decode</span><span class="p">(</span><span class="n">Node</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">node</span><span class="p">,</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">,</span>
</span><span class='line'>                         <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">enable_if</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">traits</span><span class="o">::</span><span class="n">is_sequence</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">*</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="c1">// For each item in T</span>
</span><span class='line'>         <span class="c1">// Call extractor recursively</span>
</span><span class='line'>         <span class="c1">// Every sequence is made up of primitives at some level</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Get a range representing the size of the structure</span>
</span><span class='line'>         <span class="k">typedef</span> <span class="k">typename</span> <span class="n">yaml</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">sequence</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">indices</span> <span class="n">indices</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Create an extractor for the root node</span>
</span><span class='line'>         <span class="c1">// Yaml-cpp requires node to be const&amp;, but the extractor makes</span>
</span><span class='line'>         <span class="c1">// non-const calls to it.</span>
</span><span class='line'>         <span class="n">Node</span><span class="o">&amp;</span> <span class="n">writable_node</span> <span class="o">=</span> <span class="k">const_cast</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&amp;&gt;</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>         <span class="n">yaml</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">extractor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">extractor</span><span class="p">(</span><span class="n">writable_node</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Extract each member of the structure</span>
</span><span class='line'>         <span class="k">try</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="c1">// An exception is thrown if any item in the loop cannot be read</span>
</span><span class='line'>            <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">zip</span><span class="p">(</span><span class="n">indices</span><span class="p">(),</span> <span class="n">rhs</span><span class="p">),</span> <span class="n">extractor</span><span class="p">);</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>         <span class="c1">// Catch all exceptions and prevent them from propagating</span>
</span><span class='line'>         <span class="k">catch</span><span class="p">(...)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// If we made it here, all fields were read correctly</span>
</span><span class='line'>         <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">yaml</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">class</span> <span class="nc">Yaml</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>   <span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">typedef</span> <span class="n">T</span> <span class="n">Base</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Convert this object to yaml</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">to_yaml</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="c1">// Create an emitter</span>
</span><span class='line'>         <span class="n">YAML</span><span class="o">::</span><span class="n">Emitter</span> <span class="n">emitter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Emit yaml</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">emit</span><span class="p">(</span><span class="n">emitter</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Convert this object to json</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">to_json</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="c1">// Create an emitter</span>
</span><span class='line'>         <span class="n">YAML</span><span class="o">::</span><span class="n">Emitter</span> <span class="n">emitter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Set the emitter manipulators for json</span>
</span><span class='line'>         <span class="n">emitter</span> <span class="o">&lt;&lt;</span> <span class="n">YAML</span><span class="o">::</span><span class="n">Flow</span><span class="p">;</span>
</span><span class='line'>         <span class="n">emitter</span> <span class="o">&lt;&lt;</span> <span class="n">YAML</span><span class="o">::</span><span class="n">DoubleQuoted</span><span class="p">;</span>
</span><span class='line'>         <span class="n">emitter</span> <span class="o">&lt;&lt;</span> <span class="n">YAML</span><span class="o">::</span><span class="n">TrueFalseBool</span><span class="p">;</span>
</span><span class='line'>         <span class="n">emitter</span> <span class="o">&lt;&lt;</span> <span class="n">YAML</span><span class="o">::</span><span class="n">EscapeNonAscii</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Emit json</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">emit</span><span class="p">(</span><span class="n">emitter</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Load yaml into this object</span>
</span><span class='line'>      <span class="kt">bool</span> <span class="n">from_yaml</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">yaml_string</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="c1">// Create a root node to load into</span>
</span><span class='line'>         <span class="n">YAML</span><span class="o">::</span><span class="n">Node</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">try</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Try loading the root node</span>
</span><span class='line'>            <span class="n">root</span> <span class="o">=</span> <span class="n">YAML</span><span class="o">::</span><span class="n">Load</span><span class="p">(</span><span class="n">yaml_string</span><span class="p">);</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>         <span class="k">catch</span><span class="p">(...)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="c1">// The yaml couldn&#39;t be parsed</span>
</span><span class='line'>            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Invalid yaml&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Get a range representing the size of the structure</span>
</span><span class='line'>         <span class="k">typedef</span> <span class="k">typename</span> <span class="n">detail</span><span class="o">::</span><span class="n">sequence</span><span class="o">&lt;</span><span class="n">Base</span><span class="o">&gt;::</span><span class="n">indices</span> <span class="n">indices</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Create an extractor for the root node</span>
</span><span class='line'>         <span class="n">detail</span><span class="o">::</span><span class="n">extractor</span><span class="o">&lt;</span><span class="n">Base</span><span class="o">&gt;</span> <span class="n">extractor</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Extract each member of the structure</span>
</span><span class='line'>         <span class="k">try</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="c1">// An exception is thrown if any item in the loop cannot be read</span>
</span><span class='line'>            <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">zip</span><span class="p">(</span><span class="n">indices</span><span class="p">(),</span> <span class="n">self</span><span class="p">()),</span> <span class="n">extractor</span><span class="p">);</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>         <span class="c1">// Catch all exceptions and prevent them from propagating</span>
</span><span class='line'>         <span class="k">catch</span><span class="p">(...)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// If we made it here, all fields were read correctly</span>
</span><span class='line'>         <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// The yaml parser can also parse json</span>
</span><span class='line'>      <span class="kr">inline</span> <span class="kt">bool</span> <span class="n">from_json</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">json_string</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">from_yaml</span><span class="p">(</span><span class="n">json_string</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">protected</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">emit</span><span class="p">(</span><span class="n">YAML</span><span class="o">::</span><span class="n">Emitter</span><span class="o">&amp;</span> <span class="n">emitter</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="c1">// Get a range representing the size of the structure</span>
</span><span class='line'>         <span class="k">typedef</span> <span class="k">typename</span> <span class="n">detail</span><span class="o">::</span><span class="n">sequence</span><span class="o">&lt;</span><span class="n">Base</span><span class="o">&gt;::</span><span class="n">indices</span> <span class="n">indices</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Make a root node to insert into</span>
</span><span class='line'>         <span class="n">YAML</span><span class="o">::</span><span class="n">Node</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Create an inserter for the root node</span>
</span><span class='line'>         <span class="n">detail</span><span class="o">::</span><span class="n">inserter</span><span class="o">&lt;</span><span class="n">Base</span><span class="o">&gt;</span> <span class="n">inserter</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Insert each member of the structure</span>
</span><span class='line'>         <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">zip</span><span class="p">(</span><span class="n">indices</span><span class="p">(),</span> <span class="n">self</span><span class="p">()),</span> <span class="n">inserter</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Emit yaml</span>
</span><span class='line'>         <span class="n">emitter</span> <span class="o">&lt;&lt;</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="c1">// Return string representation</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">emitter</span><span class="p">.</span><span class="n">c_str</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">private</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Cast ourselves to our CRTP base</span>
</span><span class='line'>      <span class="n">Base</span><span class="o">&amp;</span> <span class="n">self</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">Base</span><span class="o">&amp;&gt;</span><span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">yaml</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">test</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">struct</span> <span class="n">One</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">friend</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">extension</span><span class="o">::</span><span class="n">access</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">One</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>         <span class="n">two</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>         <span class="n">three</span><span class="p">(</span><span class="mf">0.0</span><span class="p">),</span>
</span><span class='line'>         <span class="n">four</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">One</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">c</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>         <span class="n">two</span><span class="p">(</span><span class="n">a</span><span class="p">),</span>
</span><span class='line'>         <span class="n">three</span><span class="p">(</span><span class="n">b</span><span class="p">),</span>
</span><span class='line'>         <span class="n">four</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">int</span> <span class="n">two</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">double</span> <span class="n">three</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">private</span><span class="o">:</span>
</span><span class='line'>      <span class="kt">bool</span> <span class="n">four</span><span class="p">;</span>
</span><span class='line'>   <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">struct</span> <span class="n">Five</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Yaml</span><span class="o">&lt;</span><span class="n">Five</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">One</span><span class="o">&gt;</span> <span class="n">Map_t</span><span class="p">;</span>
</span><span class='line'>      <span class="n">Map_t</span> <span class="n">six</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">One</span><span class="o">&gt;</span> <span class="n">Vector_t</span><span class="p">;</span>
</span><span class='line'>      <span class="n">Vector_t</span> <span class="n">seven</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">eight</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">Matrix_t</span><span class="p">;</span>
</span><span class='line'>      <span class="n">Matrix_t</span> <span class="n">nine</span><span class="p">;</span>
</span><span class='line'>   <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_FUSION_ADAPT_STRUCT</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>   <span class="n">test</span><span class="o">::</span><span class="n">One</span><span class="p">,</span>
</span><span class='line'>   <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="n">two</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="kt">double</span><span class="p">,</span> <span class="n">three</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="n">four</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_FUSION_ADAPT_STRUCT</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>   <span class="n">test</span><span class="o">::</span><span class="n">Five</span><span class="p">,</span>
</span><span class='line'>   <span class="p">(</span><span class="n">test</span><span class="o">::</span><span class="n">Five</span><span class="o">::</span><span class="n">Map_t</span><span class="p">,</span> <span class="n">six</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="n">test</span><span class="o">::</span><span class="n">Five</span><span class="o">::</span><span class="n">Vector_t</span><span class="p">,</span> <span class="n">seven</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">eight</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="n">test</span><span class="o">::</span><span class="n">Five</span><span class="o">::</span><span class="n">Matrix_t</span><span class="p">,</span> <span class="n">nine</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">test</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">Five</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>   <span class="n">v</span><span class="p">.</span><span class="n">six</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="mi">123</span><span class="p">,</span> <span class="n">One</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mf">6.6</span><span class="p">,</span> <span class="kc">true</span><span class="p">)));</span>
</span><span class='line'>   <span class="n">v</span><span class="p">.</span><span class="n">six</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="mi">456</span><span class="p">,</span> <span class="n">One</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mf">8.8</span><span class="p">,</span> <span class="kc">false</span><span class="p">)));</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">v</span><span class="p">.</span><span class="n">seven</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">One</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mf">1.1</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span>
</span><span class='line'>   <span class="n">v</span><span class="p">.</span><span class="n">seven</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">One</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mf">2.2</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">v</span><span class="p">.</span><span class="n">eight</span> <span class="o">=</span> <span class="s">&quot;eight&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>   <span class="n">temp</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mf">2.3</span><span class="p">);</span>
</span><span class='line'>   <span class="n">temp</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mf">4.5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">v</span><span class="p">.</span><span class="n">nine</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
</span><span class='line'>   <span class="n">v</span><span class="p">.</span><span class="n">nine</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">v</span><span class="p">.</span><span class="n">to_yaml</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">v</span><span class="p">.</span><span class="n">to_json</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">///////////////////////////////////////////</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;==============&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">ss</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;six:            </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;  234:          </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    two: 4      </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    three: 5.5  </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    four: true  </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;  345:          </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    two: 6      </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    three: 7.7  </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    four: false </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;seven:          </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;  - two: 8      </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    three: 9.9  </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    four: true  </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;  - two: 2      </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    three: 3.3  </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    four: true  </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;eight: nine     </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;nine:           </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;  -             </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    - 3.4       </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    - 5.6       </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;  -             </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    - 7.8       </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>      <span class="o">&lt;&lt;</span> <span class="s">&quot;    - 9.0       </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">v</span><span class="p">.</span><span class="n">from_yaml</span><span class="p">(</span><span class="n">ss</span><span class="p">.</span><span class="n">str</span><span class="p">());</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">v</span><span class="p">.</span><span class="n">to_yaml</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://github.com/jbeder/yaml-cpp">Yaml-cpp</a> &ndash; Jesse Beder<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Singletons]]></title>
    <link href="http://jrruethe.github.io/blog/2015/08/02/singletons/"/>
    <updated>2015-08-02T15:55:58-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/08/02/singletons</id>
    <content type="html"><![CDATA[<p>The Singleton pattern is a design pattern that restricts the instantiation of a class to one object. It is typically used for solving the problem of resource contention, such that you need to manage a single instance of a resource. Singletons are misunderstood and difficult to implement correctly, hopefully this post can clear things up.</p>

<p>It is known as an anti-pattern in that it is often misused or abused to the point where it can have a negative effect on a code base. Opponents to Singletons compare them to global variables, but that is not entirely true; As an object-oriented pattern, they can implement interfaces and be subclassed, which gives them more useful properties than a normal global. That said, Singletons are considered harmful<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> for a variety of reasons:</p>

<ul>
<li>Singletons make code hard to follow</li>
<li>Singletons make code hard to test</li>
<li>Singletons make code hard to maintain</li>
<li>Singletons make code hard to secure</li>
</ul>


<p>The reason for this is because the use of a Singleton hides the dependency from the interface, giving program flow a path that is not easily visible.</p>

<blockquote><p>Singletons are nothing more than global state. Global state makes it so your objects can secretly get hold of things which are not declared in their APIs, and, as a result, Singletons make your APIs into pathological liars. If you are the person who built the code originally, you know the true dependencies, but anyone who comes after you is baffled.<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p></blockquote>

<p>Note that there is a difference between having a single object and having a Singleton. Passing around a single instance to share among your classes via constructor references is known as dependency injection, and is a cleaner solution for most problems that a Singleton can solve. Take the following for example:</p>

<pre><code>// Singleton approach
Constructor(void)
{
    this-&gt;single_instance = Singleton::instance()
}

// Dependency Injection approach
Constructor(SingleInstance&amp; instance) :
    single_instance(instance)
{

}
</code></pre>

<p>With the second approach, it becomes very clear from the interface that the object depends on SingleInstance. This dependency is hidden with the first approach. The second approach can also be tested easier by subclassing the SingleInstance to make a testable version.</p>

<p>Still, there are cases where Singletons are very useful:</p>

<ul>
<li>Debug Logging</li>
<li>Memory Pools</li>
<li>Factories

<ul>
<li><a href="https://sourcemaking.com/design_patterns/abstract_factory">Abstract Factory</a></li>
<li><a href="https://sourcemaking.com/design_patterns/builder">Builder</a></li>
<li><a href="https://sourcemaking.com/design_patterns/prototype">Prototype</a></li>
</ul>
</li>
</ul>


<p>In these types of situations, there is one object that has a single responsibility and must be accessible from anywhere. In particular, a memory pool using a Singleton is not very different from allocating memory from the heap using the global <code>::operator new</code>.</p>

<p>Configuration is sometimes done with Singletons, however this isn&rsquo;t considered a good practice. Dependency injection is typically a better way to handle passing configuration through your program.</p>

<h2>Creating a Singleton</h2>

<p>Singletons conform to the following conditions<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>:</p>

<ul>
<li>Private static attribute in the class.</li>
<li>Public static accessor function in the class.</li>
<li>Perform creation on first use in the accessor function.</li>
<li>All constructors are protected or private.</li>
<li>Clients may only use the accessor function to manipulate the Singleton.</li>
</ul>


<p>Creating a Singleton is much harder than it appears, and there are very subtle considerations that are easy to miss or implement incorrectly. A few examples are:</p>

<ul>
<li>Lazy instantiation</li>
<li>Proper destruction</li>
<li>Thread safety</li>
<li>Instruction reordering</li>
</ul>


<p>A first cut at a Singleton may look something like this:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Singleton</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">instance</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">pointer</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">pointer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="o">*</span><span class="n">pointer</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Singleton</span><span class="p">(</span><span class="kt">void</span><span class="p">){}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="n">T</span><span class="o">*</span> <span class="n">pointer</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span><span class="o">*</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">pointer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Hello</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">Hello</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>   <span class="o">~</span><span class="n">Hello</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Goodbye!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Beginning of main&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello2</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; : &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello2</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running this produces the following output:</p>

<pre><code>Beginning of main
Hello!
0x1e2a370 : 0x1e2a370
</code></pre>

<p>Notice the following:</p>

<ul>
<li>The constructor was only called once</li>
<li>The addresses are the same, meaning there is only one object</li>
<li>The destructor was never called</li>
<li>The object was created lazily (on first request)</li>
</ul>


<blockquote><p><strong>Return a pointer or reference?</strong><br/>
The advantage to returning a reference instead of a pointer is:</p>

<ul>
<li>You can be assured that there won&rsquo;t be a null pointer</li>
<li>The user will be unable to delete the pointer</li>
<li>No need to dereference to use overloaded operators</li>
</ul>
</blockquote>

<p>This falls apart when multi-threading is introduced. Consider the following events:</p>

<ol>
<li>Thread 1 may get through line 8</li>
<li>Thread 2 could pass all the way through to line 14</li>
<li>Thread 1 then performs line 10 again</li>
</ol>


<p>This situation causes two <code>T</code>&rsquo;s plus a memory leak. Furthermore, both threads are now pointing at different objects.</p>

<p>To make it thread safe, a mutex can be used:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number marked'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number marked'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number marked'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/thread/mutex.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Singleton</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">instance</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line marked start end'>      <span class="n">boost</span><span class="o">::</span><span class="n">mutex</span><span class="o">::</span><span class="n">scoped_lock</span> <span class="n">lock</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">pointer</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">pointer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="o">*</span><span class="n">pointer</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Singleton</span><span class="p">(</span><span class="kt">void</span><span class="p">){}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="n">T</span><span class="o">*</span> <span class="n">pointer</span><span class="p">;</span>
</span><span class='line marked start end'>   <span class="k">static</span> <span class="n">boost</span><span class="o">::</span><span class="n">mutex</span> <span class="n">mutex</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span><span class="o">*</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">pointer</span><span class="p">;</span>
</span><span class='line marked start end'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">boost</span><span class="o">::</span><span class="n">mutex</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">mutex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Hello</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">Hello</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>   <span class="o">~</span><span class="n">Hello</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Goodbye!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Beginning of main&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello2</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; : &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello2</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, only one thread is able to pass line 10 at a time, making the logic that follows thread safe. However, mutexes are expensive to acquire, and every call to <code>instance</code> requires locking the mutex, even though it really only needs to be locked when the object needs to be created the very first time. So a common thing to do is check whether the instance needs to be created before locking the mutex:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number marked'>11</span>
<span class='line-number marked'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number marked'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">static</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">instance</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line marked start'>   <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">pointer</span><span class="p">)</span>
</span><span class='line marked end'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">boost</span><span class="o">::</span><span class="n">mutex</span><span class="o">::</span><span class="n">scoped_lock</span> <span class="n">lock</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">pointer</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">pointer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line marked start end'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="o">*</span><span class="n">pointer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This approach is called the Double-Checked Locking Pattern, or DCLP.</p>

<h2>The Double-Checked Locking Pattern is Unsafe</h2>

<p>Scott Meyers and Andrei Alexandrescu have discussed<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> the subtle issues with DCLP. Their paper as an interesting read; the problems boil down to the fact that the compiler may reorder instructions or the hardware may reorder memory accesses, and there was no way to express these constraints using the C++ language at the time (C++11 fixes these issues, as we will see later).</p>

<p>For example, the compiler may do the following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number marked'>17</span>
<span class='line-number marked'>18</span>
<span class='line-number marked'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">static</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">instance</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">pointer</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">boost</span><span class="o">::</span><span class="n">mutex</span><span class="o">::</span><span class="n">scoped_lock</span> <span class="n">lock</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">pointer</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line marked start'>         <span class="n">pointer</span> <span class="o">=</span>                     <span class="c1">// 3</span>
</span><span class='line marked'>            <span class="o">::</span><span class="k">operator</span> <span class="k">new</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">));</span> <span class="c1">// 1</span>
</span><span class='line marked end'>         <span class="k">new</span> <span class="p">(</span><span class="n">pointer</span><span class="p">)</span> <span class="n">T</span><span class="p">();</span>            <span class="c1">// 2</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="o">*</span><span class="n">pointer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, the actual construction is broken down into three steps:</p>

<ol>
<li>Allocating memory for the object</li>
<li>Constructing the object</li>
<li>Assigning the pointer to the memory</li>
</ol>


<p>The paper claims that DCLP can only work if steps 1 and 2 are completed before step 3, however the compiler&rsquo;s optimizer is free to perform step 3 after step 1. This means there could be a brief moment where the pointer is pointing to allocated memory, but an unconstructed object. Imagine the following scenario:</p>

<ol>
<li>Thread 1 may get through line 10 (completing steps 1 and 3, but not 2)</li>
<li>Thread 2 gets to line 3, passes the check, and skips to line 15, returning an unconstructed object</li>
</ol>


<p>This type of bug is very subtle and not obvious to the developer. Furthermore, these types of crashes are virtually impossible to track down.</p>

<h2>Fixing the Double-Checked Locking Pattern</h2>

<p>One way to get around the multi-threaded issues is to have one object for each thread, instead of one object globally. A per-thread Singleton<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup> can be implemented like this:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;boost/thread.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ThreadSingleton</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">instance</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">static</span> <span class="n">boost</span><span class="o">::</span><span class="n">thread_specific_ptr</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">pointer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">pointer</span><span class="p">.</span><span class="n">get</span><span class="p">())</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>           <span class="n">pointer</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="n">T</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="o">*</span><span class="n">pointer</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ThreadSingleton</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Hello</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">Hello</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>   <span class="o">~</span><span class="n">Hello</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Goodbye!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">run</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello</span> <span class="o">=</span> <span class="n">ThreadSingleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello2</span> <span class="o">=</span> <span class="n">ThreadSingleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Thread 2: &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; : &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello2</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Beginning of main&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">boost</span><span class="o">::</span><span class="kr">thread</span> <span class="kr">thread</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="kr">thread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">run</span><span class="p">);</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello</span> <span class="o">=</span> <span class="n">ThreadSingleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello2</span> <span class="o">=</span> <span class="n">ThreadSingleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Thread 1: &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; : &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello2</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">thread</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice how this method is closer to what we initially started with: A single check with no mutex. Because the thread specific pointer will never be accessed concurrently by multiple threads, this solution is inherently thread safe. Here are there results of running this code:</p>

<pre><code>Beginning of main
Hello!
Thread 1: 0x17d96e0 : 0x17d96e0
Hello!
Thread 2: 0x7f7c500008c0 : 0x7f7c500008c0
Goodbye!
Goodbye!
</code></pre>

<p>As you can see, each thread creates (and destroys) its per-thread Singleton. You can see that each Singleton has a different address as well.</p>

<blockquote><p><strong>Warning</strong><br/>
Thread specific pointers should always be static. They use their address as the key to establish uniqueness. A program storing their thread specific pointer on the stack will have issues when two threads reach the same point in the program, because their addresses on the stack will match (remember that each thread has its own stack). This will cause the two pointers to believe they are pointing at the same<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>.</p></blockquote>

<p>In some cases, this solution is acceptable. Most times, a true global Singleton is desired.</p>

<p>The paper claims that the DCLP can be made safe with the addition of memory fences. These provide guarantees that reads will not be reordered before writes.
The C++11 standard includes this capability, and Boost has made it available to C++03.
In fact, Boost provides a solution in their documentation<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup> (modified to match the templated format used earlier):</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number marked'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number marked'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number marked'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number marked'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number marked'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/atomic.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/thread/mutex.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Singleton</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">instance</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line marked start end'>      <span class="n">T</span><span class="o">*</span> <span class="n">pointer</span> <span class="o">=</span> <span class="n">storage</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">memory_order_consume</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">pointer</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">boost</span><span class="o">::</span><span class="n">mutex</span><span class="o">::</span><span class="n">scoped_lock</span> <span class="n">lock</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line marked start end'>         <span class="n">pointer</span> <span class="o">=</span> <span class="n">storage</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">memory_order_consume</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">pointer</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="n">pointer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line marked start end'>            <span class="n">storage</span><span class="p">.</span><span class="n">store</span><span class="p">(</span><span class="n">pointer</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">memory_order_release</span><span class="p">);</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="o">*</span><span class="n">pointer</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Singleton</span><span class="p">(</span><span class="kt">void</span><span class="p">){}</span>
</span><span class='line'>
</span><span class='line marked start end'>   <span class="k">static</span> <span class="n">boost</span><span class="o">::</span><span class="n">atomic</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*&gt;</span> <span class="n">storage</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="n">boost</span><span class="o">::</span><span class="n">mutex</span> <span class="n">mutex</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line marked start end'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">boost</span><span class="o">::</span><span class="n">atomic</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*&gt;</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">storage</span><span class="p">;</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">boost</span><span class="o">::</span><span class="n">mutex</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">mutex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Hello</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">Hello</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>   <span class="o">~</span><span class="n">Hello</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Goodbye!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Beginning of main&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello2</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; : &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello2</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Enhancing the Singleton</h2>

<p>We still have the problem that the destructor is never called. The solution to this is to convert the raw pointer into a scoped_ptr. However, the atomics can only be used with primitive types. We need to apply some<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup> transformations<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup> to the code to decouple the atomic from the pointer:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/atomic.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/thread/mutex.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Singleton</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">instance</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="kt">bool</span> <span class="n">created</span> <span class="o">=</span> <span class="n">storage</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">memory_order_consume</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">created</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">boost</span><span class="o">::</span><span class="n">mutex</span><span class="o">::</span><span class="n">scoped_lock</span> <span class="n">lock</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">created</span> <span class="o">=</span> <span class="n">storage</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">memory_order_consume</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">created</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="n">pointer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">storage</span><span class="p">.</span><span class="n">store</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">memory_order_release</span><span class="p">);</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="o">*</span><span class="n">pointer</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Singleton</span><span class="p">(</span><span class="kt">void</span><span class="p">){}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="n">T</span><span class="o">*</span> <span class="n">pointer</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="n">boost</span><span class="o">::</span><span class="n">atomic</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">storage</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="n">boost</span><span class="o">::</span><span class="n">mutex</span> <span class="n">mutex</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span><span class="o">*</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">pointer</span><span class="p">;</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">boost</span><span class="o">::</span><span class="n">atomic</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">storage</span><span class="p">;</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">boost</span><span class="o">::</span><span class="n">mutex</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">mutex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Hello</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">Hello</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>   <span class="o">~</span><span class="n">Hello</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Goodbye!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Beginning of main&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello2</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; : &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello2</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that the pointer is separated from the atomic, we can replace the pointer with the scoped pointer to get the following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number marked'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number marked'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number marked'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// dclp.cpp</span>
</span><span class='line'><span class="c1">// Copyright (C) 2015 Joe Ruether jrruethe@gmail.com</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c1">// it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c1">// the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c1">// (at your option) any later version.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c1">// GNU General Public License for more details.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c1">// along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/atomic.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/thread/mutex.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/scoped_ptr.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Singleton</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">instance</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="kt">bool</span> <span class="n">created</span> <span class="o">=</span> <span class="n">storage</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">memory_order_consume</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">created</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">boost</span><span class="o">::</span><span class="n">mutex</span><span class="o">::</span><span class="n">scoped_lock</span> <span class="n">lock</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">created</span> <span class="o">=</span> <span class="n">storage</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">memory_order_consume</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">created</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line marked start end'>            <span class="n">pointer</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="n">T</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">storage</span><span class="p">.</span><span class="n">store</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">memory_order_release</span><span class="p">);</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="o">*</span><span class="n">pointer</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Singleton</span><span class="p">(</span><span class="kt">void</span><span class="p">){}</span>
</span><span class='line'>
</span><span class='line marked start end'>   <span class="k">static</span> <span class="n">boost</span><span class="o">::</span><span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">pointer</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="n">boost</span><span class="o">::</span><span class="n">atomic</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">storage</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="n">boost</span><span class="o">::</span><span class="n">mutex</span> <span class="n">mutex</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line marked start end'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">boost</span><span class="o">::</span><span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">pointer</span><span class="p">;</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">boost</span><span class="o">::</span><span class="n">atomic</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">storage</span><span class="p">;</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">boost</span><span class="o">::</span><span class="n">mutex</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">mutex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Hello</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">Hello</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>   <span class="o">~</span><span class="n">Hello</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Goodbye!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Beginning of main&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello2</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; : &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello2</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point we have a flexible and safe implementation of the DCLP. The output is:</p>

<pre><code>Beginning of main
Hello!
0x19626e0 : 0x19626e0
Goodbye!
</code></pre>

<h2>Boost Pool Method</h2>

<p>As I mentioned, I needed a Singleton for a memory pool. Naturally, I decided to see how Boost handles this for their own pool. I searched for all the boost include files with Singleton in their name:</p>

<pre><code>$ find /usr/include/boost/ -name '*singleton*' -type f

/usr/include/boost/log/detail/singleton.hpp
/usr/include/boost/test/utils/trivial_singleton.hpp
/usr/include/boost/accumulators/numeric/detail/pod_singleton.hpp
/usr/include/boost/thread/detail/singleton.hpp
/usr/include/boost/pool/singleton_pool.hpp
/usr/include/boost/serialization/singleton.hpp
/usr/include/boost/interprocess/detail/windows_intermodule_singleton.hpp
/usr/include/boost/interprocess/detail/intermodule_singleton.hpp
/usr/include/boost/interprocess/detail/intermodule_singleton_common.hpp
/usr/include/boost/interprocess/detail/portable_intermodule_singleton.hpp
</code></pre>

<p>Then I used my IDE to dive into each one and see how it was implemented:</p>

<pre><code>#include &lt;boost/log/detail/singleton.hpp&gt;                      // Call once method
#include &lt;boost/test/utils/trivial_singleton.hpp&gt;              // Meyer's method
#include &lt;boost/accumulators/numeric/detail/pod_singleton.hpp&gt; // Static method
#include &lt;boost/thread/detail/singleton.hpp&gt;                   // Meyer's method
#include &lt;boost/pool/singleton_pool.hpp&gt;                       // Pool method
#include &lt;boost/serialization/singleton.hpp&gt;                   // Meyer's method
</code></pre>

<p>The Meyer&rsquo;s method and the call once method will be discussed later. The static method is simply a wrapper to make something static and isn&rsquo;t particularly interesting:</p>

<pre><code>template&lt;typename T&gt;
struct pod_singleton
{
    static T instance;
};

template&lt;typename T&gt; 
T pod_singleton&lt;T&gt;::instance;
</code></pre>

<p>The real interesting method, that I haven&rsquo;t seen anywhere else yet, is the Boost Pool method. The code included in the later versions of Boost (~1.55) is more difficult to read, however a version from 1.39<sup id="fnref:10"><a href="#fn:10" rel="footnote">10</a></sup> is very clear and well commented. The code is repeated below with some minor adjustments:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// Copyright (C) 2000 Stephen Cleary</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// Distributed under the Boost Software License, Version 1.0. (See</span>
</span><span class='line'><span class="c1">// accompanying file LICENSE_1_0.txt or copy at</span>
</span><span class='line'><span class="c1">// http://www.boost.org/LICENSE_1_0.txt)</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// See http://www.boost.org for updates, documentation, and revision history.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The following helper classes are placeholders for a generic &quot;singleton&quot;</span>
</span><span class='line'><span class="c1">//  class.  The classes below support usage of singletons, including use in</span>
</span><span class='line'><span class="c1">//  program startup/shutdown code, AS LONG AS there is only one thread</span>
</span><span class='line'><span class="c1">//  running before main() begins, and only one thread running after main()</span>
</span><span class='line'><span class="c1">//  exits.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// This class is also limited in that it can only provide singleton usage for</span>
</span><span class='line'><span class="c1">//  classes with default constructors.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The design of this class is somewhat twisted, but can be followed by the</span>
</span><span class='line'><span class="c1">//  calling inheritance.  Let us assume that there is some user code that</span>
</span><span class='line'><span class="c1">//  calls &quot;singleton_default&lt;T&gt;::instance()&quot;.  The following (convoluted)</span>
</span><span class='line'><span class="c1">//  sequence ensures that the same function will be called before main():</span>
</span><span class='line'><span class="c1">//    instance() contains a call to create_object.do_nothing()</span>
</span><span class='line'><span class="c1">//    Thus, object_creator is implicitly instantiated, and create_object</span>
</span><span class='line'><span class="c1">//      must exist.</span>
</span><span class='line'><span class="c1">//    Since create_object is a static member, its constructor must be</span>
</span><span class='line'><span class="c1">//      called before main().</span>
</span><span class='line'><span class="c1">//    The constructor contains a call to instance(), thus ensuring that</span>
</span><span class='line'><span class="c1">//      instance() will be called before main().</span>
</span><span class='line'><span class="c1">//    The first time instance() is called (i.e., before main()) is the</span>
</span><span class='line'><span class="c1">//      latest point in program execution where the object of type T</span>
</span><span class='line'><span class="c1">//      can be created.</span>
</span><span class='line'><span class="c1">//    Thus, any call to instance() will auto-magically result in a call to</span>
</span><span class='line'><span class="c1">//      instance() before main(), unless already present.</span>
</span><span class='line'><span class="c1">//  Furthermore, since the instance() function contains the object, instead</span>
</span><span class='line'><span class="c1">//  of the singleton_default class containing a static instance of the</span>
</span><span class='line'><span class="c1">//  object, that object is guaranteed to be constructed (at the latest) in</span>
</span><span class='line'><span class="c1">//  the first call to instance().  This permits calls to instance() from</span>
</span><span class='line'><span class="c1">//  static code, even if that code is called before the file-scope objects</span>
</span><span class='line'><span class="c1">//  in this file have been initialized.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// T must be: no-throw default constructible and no-throw destructible</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Singleton</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">private</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">struct</span> <span class="n">object_creator</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="c1">// This constructor does nothing more than ensure that instance()</span>
</span><span class='line'>      <span class="c1">//  is called before main() begins, thus creating the static</span>
</span><span class='line'>      <span class="c1">//  T object before multithreading race issues can come up.</span>
</span><span class='line'>      <span class="n">object_creator</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kr">inline</span> <span class="kt">void</span> <span class="n">do_nothing</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span> <span class="p">{}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">object_creator</span> <span class="n">create_object</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Singleton</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">T</span> <span class="n">object_type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// If, at any point (in user code), singleton_default&lt;T&gt;::instance()</span>
</span><span class='line'>    <span class="c1">//  is called, then the following function is instantiated.</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">object_type</span><span class="o">&amp;</span> <span class="n">instance</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="c1">// This is the object that we return a reference to.</span>
</span><span class='line'>      <span class="c1">// It is guaranteed to be created before main() begins because of</span>
</span><span class='line'>      <span class="c1">//  the next line.</span>
</span><span class='line'>      <span class="k">static</span> <span class="n">object_type</span> <span class="n">obj</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// The following line does nothing else than force the instantiation</span>
</span><span class='line'>      <span class="c1">//  of singleton_default&lt;T&gt;::create_object, whose constructor is</span>
</span><span class='line'>      <span class="c1">//  called before main() begins.</span>
</span><span class='line'>      <span class="n">create_object</span><span class="p">.</span><span class="n">do_nothing</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">obj</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">typename</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">object_creator</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">create_object</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Hello</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">Hello</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>   <span class="o">~</span><span class="n">Hello</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Goodbye!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Beginning of main&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello2</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; : &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello2</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the output:</p>

<pre><code>Hello!
Beginning of main
0x64dc88 : 0x64dc88
Goodbye!
</code></pre>

<p>Notice that this method does not use lazy instantiation, but rather it uses <em>eager instantiation</em>, meaning the Singleton is created before <code>main</code> is called. In addition, it properly calls the destructor and is thread safe without any locks or atomics. Despite the author describing this method as &ldquo;twisted&rdquo;, I think it is rather elegant. Unfortunately, it lacks the ability to do per-thread singletons, and its eager instantiation is a drawback.</p>

<h2>Meyer&rsquo;s Method (C++11)</h2>

<p>Things get much easier in C++11. Scott Meyers introduced a very simple and elegant Singleton back in 1996<sup id="fnref:11"><a href="#fn:11" rel="footnote">11</a></sup>:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Singleton</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">instance</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">static</span> <span class="n">T</span> <span class="n">singleton</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">singleton</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>   <span class="n">Singleton</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Hello</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">Hello</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>   <span class="o">~</span><span class="n">Hello</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Goodbye!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Beginning of main&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello2</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; : &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello2</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Outputs:</p>

<pre><code>Beginning of main
Hello!
0x64dc78 : 0x64dc78
Goodbye!
</code></pre>

<p>This method is only thread safe with C++11 and up. It uses lazy instantiation, properly calls the destructor, and doesn&rsquo;t use any mutexes or atomics. With C++11, it is now considered the correct way to implement a Singleton.</p>

<h2>Boost Call Once Method</h2>

<p>Meyer&rsquo;s Singleton cannot be used in C++03, but we can get pretty close to it using Boost&rsquo;s <code>call_once</code> capabilities.</p>

<blockquote><p><strong>boost::call_once</strong><br/>
The call_once function and once_flag type (statically initialized to BOOST_ONCE_INIT) can be used to run a routine exactly once. This can be used to initialize data in a thread-safe manner.<sup id="fnref:12"><a href="#fn:12" rel="footnote">12</a></sup></p></blockquote>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;boost/scoped_ptr.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/thread/once.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/noncopyable.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Singleton</span> <span class="o">:</span> <span class="k">private</span> <span class="n">boost</span><span class="o">::</span><span class="n">noncopyable</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">instance</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">boost</span><span class="o">::</span><span class="n">call_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">Singleton</span><span class="o">::</span><span class="n">create</span><span class="p">,</span> <span class="n">flag</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">*</span><span class="n">pointer</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Singleton</span><span class="p">(</span><span class="kt">void</span><span class="p">){}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="kt">void</span> <span class="n">create</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">pointer</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="n">T</span><span class="p">());</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="n">boost</span><span class="o">::</span><span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">pointer</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="n">boost</span><span class="o">::</span><span class="n">once_flag</span> <span class="n">flag</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">boost</span><span class="o">::</span><span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">pointer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">boost</span><span class="o">::</span><span class="n">once_flag</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">flag</span> <span class="o">=</span> <span class="n">BOOST_ONCE_INIT</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Hello</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">Hello</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>   <span class="o">~</span><span class="n">Hello</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Goodbye!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Beginning of main&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello2</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; : &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello2</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Output:</p>

<pre><code>Beginning of main
Hello!
0x1d20370 : 0x1d20370
Goodbye!
</code></pre>

<h2>My Method</h2>

<p>I&rsquo;m a pretty big fan of the <code>call_once</code> method:</p>

<ul>
<li>Avoids the complications of DCLP</li>
<li>Aligns with the preferred C++11 standard method of achieving a Singleton</li>
<li>Works with C++03</li>
<li>Properly handles destruction</li>
<li>Properly handles multi-threading</li>
<li>Employs lazy instantiation</li>
</ul>


<p>With some clever manipulations, we can also get this to work as a per-thread singleton:</p>

<ol>
<li>Template the pointer type</li>
<li>Store the once flag inside a pointer</li>
<li>Move the code to a base class</li>
<li>Specialize an implementation for each supported pointer type</li>
<li>Thread specific pointers should check if their flag is null when getting an instance</li>
</ol>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// singleton.cpp</span>
</span><span class='line'><span class="c1">// Copyright (C) 2015 Joe Ruether jrruethe@gmail.com</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c1">// it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c1">// the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c1">// (at your option) any later version.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c1">// GNU General Public License for more details.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c1">// along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;boost/scoped_ptr.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/thread/once.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/thread/tss.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/noncopyable.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">detail</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">/////////////////////////////////////////////////////////////////////////////</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">U</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">P</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">class</span> <span class="nc">SingletonImpl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">/////////////////////////////////////////////////////////////////////////////</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span>
</span><span class='line'>            <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">U</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">pointer_type</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">class</span> <span class="nc">SingletonBase</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>   <span class="k">protected</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">static</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">reference</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">once_flag</span><span class="o">&amp;</span> <span class="n">flag</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">boost</span><span class="o">::</span><span class="n">call_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">SingletonBase</span><span class="o">::</span><span class="n">create</span><span class="p">,</span> <span class="n">flag</span><span class="p">);</span>
</span><span class='line'>         <span class="k">return</span> <span class="o">*</span><span class="n">pointer</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">static</span> <span class="kt">void</span> <span class="n">create</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">pointer</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="n">T</span><span class="p">());</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">static</span> <span class="n">boost</span><span class="o">::</span><span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">pointer</span><span class="p">;</span>
</span><span class='line'>   <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">U</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">P</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="n">boost</span><span class="o">::</span><span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">SingletonBase</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">P</span><span class="o">&gt;::</span><span class="n">pointer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">/////////////////////////////////////////////////////////////////////////////</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">class</span> <span class="nc">SingletonImpl</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">scoped_ptr</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">:</span> <span class="k">public</span> <span class="n">SingletonBase</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">scoped_ptr</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>   <span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">static</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">instance</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">SingletonImpl</span><span class="o">::</span><span class="n">reference</span><span class="p">(</span><span class="o">*</span><span class="n">once_flag_ptr</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">protected</span><span class="o">:</span>
</span><span class='line'>      <span class="k">static</span> <span class="n">boost</span><span class="o">::</span><span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">once_flag</span><span class="o">&gt;</span> <span class="n">once_flag_ptr</span><span class="p">;</span>
</span><span class='line'>   <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="n">boost</span><span class="o">::</span><span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">once_flag</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="n">SingletonImpl</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">scoped_ptr</span><span class="o">&gt;::</span><span class="n">once_flag_ptr</span><span class="p">(</span><span class="k">new</span> <span class="n">boost</span><span class="o">::</span><span class="n">once_flag</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">/////////////////////////////////////////////////////////////////////////////</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">class</span> <span class="nc">SingletonImpl</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">thread_specific_ptr</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">:</span> <span class="k">public</span> <span class="n">SingletonBase</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">thread_specific_ptr</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>   <span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">static</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">instance</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">once_flag_ptr</span><span class="p">.</span><span class="n">get</span><span class="p">())</span>
</span><span class='line'>            <span class="n">once_flag_ptr</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="n">boost</span><span class="o">::</span><span class="n">once_flag</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">return</span> <span class="n">SingletonImpl</span><span class="o">::</span><span class="n">reference</span><span class="p">(</span><span class="o">*</span><span class="n">once_flag_ptr</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">protected</span><span class="o">:</span>
</span><span class='line'>      <span class="k">static</span> <span class="n">boost</span><span class="o">::</span><span class="n">thread_specific_ptr</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">once_flag</span><span class="o">&gt;</span> <span class="n">once_flag_ptr</span><span class="p">;</span>
</span><span class='line'>   <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="n">boost</span><span class="o">::</span><span class="n">thread_specific_ptr</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">once_flag</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="n">SingletonImpl</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">thread_specific_ptr</span><span class="o">&gt;::</span><span class="n">once_flag_ptr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">/////////////////////////////////////////////////////////////////////////////</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Singleton</span> <span class="o">:</span> <span class="k">public</span> <span class="n">detail</span><span class="o">::</span><span class="n">SingletonImpl</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">scoped_ptr</span><span class="o">&gt;</span><span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ThreadSingleton</span> <span class="o">:</span> <span class="k">public</span> <span class="n">detail</span><span class="o">::</span><span class="n">SingletonImpl</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">thread_specific_ptr</span><span class="o">&gt;</span><span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/thread.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Hello</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">Hello</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>   <span class="o">~</span><span class="n">Hello</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Goodbye!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">run</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello</span> <span class="o">=</span> <span class="n">ThreadSingleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello2</span> <span class="o">=</span> <span class="n">ThreadSingleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Thread 2: &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; : &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello2</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Beginning of main&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">boost</span><span class="o">::</span><span class="kr">thread</span> <span class="kr">thread</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="kr">thread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">run</span><span class="p">);</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">&amp;</span> <span class="n">hello2</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">Hello</span><span class="o">&gt;::</span><span class="n">instance</span><span class="p">();</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Thread 1: &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; : &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">hello2</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="kr">thread</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Outputs:</p>

<pre><code>Beginning of main
Hello!
Thread 1: 0x109a700 : 0x109a700
Hello!
Thread 2: 0x7f9528000930 : 0x7f9528000930
Goodbye!
Goodbye!
</code></pre>

<p>And there you have it. Sometimes Singletons are good, sometimes they are evil, and sometimes they are difficult to implement correctly. Hopefully now you understand a little more about this pattern.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://www.object-oriented-security.org/lets-argue/singletons">Singletons Considered Harmful</a> &ndash; Kenton Varda<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/">Singletons are Pathological Liars</a> &ndash; Misko Hevery<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><a href="https://sourcemaking.com/design_patterns/singleton">Singleton Design Pattern</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p><a href="http://www.aristeia.com/Papers/DDJ_Jul_Aug_2004_revised.pdf">C++ and the Perils of Double-Checked Locking</a> &ndash; Scott Meyers and Andrei Alexandrescu<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p><a href="http://www.gameafar.com/gaffer/singletons">Two Useful Singleton Templates</a> &ndash; Lachlan Orr<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p><a href="http://www.mr-edd.co.uk/blog/thread_specific_ptr_problem">A problem with boost::thread_specific_ptr</a> &ndash; Edd Dawson<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p><a href="http://www.boost.org/doc/libs/1_58_0/doc/html/atomic/usage_examples.html#boost_atomic.usage_examples.singleton">Boost Atomic Usage Examples</a><a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
<li id="fn:8">
<p><a href="http://preshing.com/20130922/acquire-and-release-fences/">Acquire and Release Fences</a> &ndash; Jeff Preshing<a href="#fnref:8" rev="footnote">&#8617;</a></p></li>
<li id="fn:9">
<p><a href="http://stackoverflow.com/questions/30587666/is-this-implementation-of-double-checked-lock-pattern-dclp-in-c11-is-correct">Is this implementation of DCLP in C++11 correct?</a> &ndash; User TCS<a href="#fnref:9" rev="footnote">&#8617;</a></p></li>
<li id="fn:10">
<p><a href="http://www.boost.org/doc/libs/1_39_0/boost/pool/detail/singleton.hpp">Boost Pool Singleton</a> &ndash; Stephen Cleary<a href="#fnref:10" rev="footnote">&#8617;</a></p></li>
<li id="fn:11">
<p><a href="http://www.devarticles.com/c/a/Cplusplus/C-plus-plus-In-Theory-The-Singleton-Pattern-Part-I/4/">The Meyers Singleton</a> &ndash; Scott Meyers<a href="#fnref:11" rev="footnote">&#8617;</a></p></li>
<li id="fn:12">
<p><a href="http://www.boost.org/doc/libs/1_32_0/doc/html/call_once.html">Boost Call Once</a><a href="#fnref:12" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Counter]]></title>
    <link href="http://jrruethe.github.io/blog/2015/07/01/object-counter/"/>
    <updated>2015-07-01T17:47:47-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/07/01/object-counter</id>
    <content type="html"><![CDATA[<p>This post presents a lightweight generic object counter in C++. Object counters count the number of objects that have been created, as well as how many bytes they are utilizing. They are a handy way to get a sense of application health programatically as well as detect memory leaks with unit tests.</p>

<p>The code itself doesn&rsquo;t have any dependencies (not even Boost!). The example however uses Boost smart pointers, so you need the following installed to run it:</p>

<ul>
<li>libboost-dev</li>
</ul>


<p>This object counter is loosely modeled after Scott Meyer&rsquo;s<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> counter, with the following differences:</p>

<ul>
<li>Tracks creations as well as active objects, useful for determining if lots of copies are happening.</li>
<li>Tracks allocations on the heap</li>
<li>Tracks number of bytes allocated for the object</li>
</ul>


<p>The code itself is pretty straightforward:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;cstddef&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">ObjectCounter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">T</span> <span class="n">Type</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">Count</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="n">Count</span> <span class="n">objects_created</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="n">Count</span> <span class="n">objects_created_on_heap</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="n">Count</span> <span class="n">objects_active</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="n">Count</span> <span class="n">objects_active_on_heap</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="n">Count</span> <span class="n">bytes_allocated</span><span class="p">;</span>
</span><span class='line'>   <span class="k">static</span> <span class="n">Count</span> <span class="n">bytes_allocated_on_heap</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ObjectCounter</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="o">++</span><span class="n">objects_created</span><span class="p">;</span>
</span><span class='line'>      <span class="o">++</span><span class="n">objects_active</span><span class="p">;</span>
</span><span class='line'>      <span class="n">bytes_allocated</span> <span class="o">+=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Type</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ObjectCounter</span><span class="p">(</span><span class="n">ObjectCounter</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="o">++</span><span class="n">objects_created</span><span class="p">;</span>
</span><span class='line'>      <span class="o">++</span><span class="n">objects_active</span><span class="p">;</span>
</span><span class='line'>      <span class="n">bytes_allocated</span> <span class="o">+=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Type</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">~</span><span class="n">ObjectCounter</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="o">--</span><span class="n">objects_active</span><span class="p">;</span>
</span><span class='line'>      <span class="n">bytes_allocated</span> <span class="o">-=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Type</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kt">void</span><span class="o">*</span> <span class="k">operator</span> <span class="k">new</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">bytes</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="o">++</span><span class="n">objects_created_on_heap</span><span class="p">;</span>
</span><span class='line'>      <span class="o">++</span><span class="n">objects_active_on_heap</span><span class="p">;</span>
</span><span class='line'>      <span class="n">bytes_allocated_on_heap</span> <span class="o">+=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Type</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="o">::</span><span class="k">operator</span> <span class="k">new</span><span class="p">(</span><span class="n">bytes</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kt">void</span> <span class="k">operator</span> <span class="k">delete</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">ptr</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="o">--</span><span class="n">objects_active_on_heap</span><span class="p">;</span>
</span><span class='line'>      <span class="n">bytes_allocated_on_heap</span> <span class="o">-=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Type</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="o">::</span><span class="k">operator</span> <span class="k">delete</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="kt">void</span> <span class="n">reset</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">objects_created</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">objects_created_on_heap</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">objects_active</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">objects_active_on_heap</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">bytes_allocated</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">bytes_allocated_on_heap</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="k">typename</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">Count</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">objects_created</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="k">typename</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">Count</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">objects_created_on_heap</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="k">typename</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">Count</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">objects_active</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="k">typename</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">Count</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">objects_active_on_heap</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="k">typename</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">Count</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">bytes_allocated</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="k">typename</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">Count</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">bytes_allocated_on_heap</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the object counter is simple: just inherit from it, and everything else happens automatically.</p>

<p>One very nice thing about this class is that it doesn&rsquo;t have any non-static data members. That means that inheriting from it allows the compiler to perform the <em>empty base optimization</em>, which means the inheriting object does not increase in size at all!</p>

<blockquote><p><strong>No Virtual Destructor?</strong><br/>
Technically, classes that are intended to be inherited are supposed to define a virtual destructor to ensure that the derived class&#8217; memory gets cleaned up if it is deleted through a pointer to the base class. Doing this causes the object counter to no longer be empty, and I don&rsquo;t want to give that up. The object counter has one purpose, and developers should by convention not pass around object counter pointers.</p></blockquote>

<p>Time to test it out. Before that, I&rsquo;m going to introduce a little trick I learned from Evan Wallace<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> that gives us a nice Python-style print command to avoid all the <code>cout</code> boilerplate:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">namespace</span> <span class="n">__hidden__</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">struct</span> <span class="n">print</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">print</span><span class="p">()</span> <span class="o">:</span>
</span><span class='line'>         <span class="n">space</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">~</span><span class="n">print</span><span class="p">()</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="n">print</span><span class="o">&amp;</span> <span class="k">operator</span><span class="p">,(</span><span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="k">if</span><span class="p">(</span><span class="n">space</span><span class="p">)</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39; &#39;</span><span class="p">;</span>
</span><span class='line'>         <span class="k">else</span> <span class="n">space</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>         <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>         <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">bool</span> <span class="n">space</span><span class="p">;</span>
</span><span class='line'>   <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define print __hidden__::print(),</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a really clever trick that I would like to expand upon in a future post. Back to our test code:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">TestObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="kt">char</span> <span class="n">byte</span><span class="p">;</span>
</span><span class='line'>   <span class="n">byte</span> <span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span> <span class="c1">// Store 4 bytes</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Object</span> <span class="o">:</span> <span class="k">public</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="kt">char</span> <span class="n">byte</span><span class="p">;</span>
</span><span class='line'>   <span class="n">byte</span> <span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span> <span class="c1">// Store 4 bytes</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot;Object size  :&quot;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">TestObject</span><span class="p">)</span>           <span class="p">,</span> <span class="s">&quot;bytes&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot;Counter size :&quot;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span><span class="p">),</span> <span class="s">&quot;bytes&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot;Total size   :&quot;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Object</span><span class="p">)</span>               <span class="p">,</span> <span class="s">&quot;bytes&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Increase scope</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Create an object on the stack</span>
</span><span class='line'>      <span class="n">Object</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot;Single:&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Objects created         :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_created</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Objects created on heap :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_created_on_heap</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Objects active          :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_active</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Objects active on heap  :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_active_on_heap</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Bytes allocated         :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">bytes_allocated</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Bytes allocated on heap :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">bytes_allocated_on_heap</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Create an array of objects on the stack</span>
</span><span class='line'>      <span class="n">Object</span> <span class="n">b</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot;Array:&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Objects created         :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_created</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Objects created on heap :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_created_on_heap</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Objects active          :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_active</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Objects active on heap  :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_active_on_heap</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Bytes allocated         :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">bytes_allocated</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Bytes allocated on heap :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">bytes_allocated_on_heap</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Create a vector of objects on the stack</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>      <span class="n">c</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">Object</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot;Vector:&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Objects created         :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_created</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Objects created on heap :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_created_on_heap</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Objects active          :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_active</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Objects active on heap  :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_active_on_heap</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Bytes allocated         :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">bytes_allocated</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Bytes allocated on heap :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">bytes_allocated_on_heap</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Copy an object</span>
</span><span class='line'>      <span class="n">Object</span> <span class="n">d</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot;Copy:&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Objects created         :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_created</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Objects created on heap :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_created_on_heap</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Objects active          :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_active</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Objects active on heap  :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_active_on_heap</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Bytes allocated         :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">bytes_allocated</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Bytes allocated on heap :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">bytes_allocated_on_heap</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="c1">// Objects are now gone</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot;Out of Scope:&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Objects created         :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_created</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Objects created on heap :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_created_on_heap</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Objects active          :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_active</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Objects active on heap  :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_active_on_heap</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Bytes allocated         :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">bytes_allocated</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Bytes allocated on heap :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">bytes_allocated_on_heap</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">reset</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot;Reset:&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Objects created         :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_created</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Objects created on heap :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_created_on_heap</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Objects active          :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_active</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Objects active on heap  :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_active_on_heap</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Bytes allocated         :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">bytes_allocated</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Bytes allocated on heap :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">bytes_allocated_on_heap</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Create an object on the heap</span>
</span><span class='line'>   <span class="n">Object</span><span class="o">*</span> <span class="n">a_ptr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot;New:&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Objects created         :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_created</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Objects created on heap :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_created_on_heap</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Objects active          :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_active</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Objects active on heap  :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_active_on_heap</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Bytes allocated         :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">bytes_allocated</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Bytes allocated on heap :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">bytes_allocated_on_heap</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Delete an object from the heap</span>
</span><span class='line'>   <span class="k">delete</span> <span class="n">a_ptr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot;Delete:&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Objects created         :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_created</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Objects created on heap :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_created_on_heap</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Objects active          :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_active</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Objects active on heap  :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_active_on_heap</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Bytes allocated         :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">bytes_allocated</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Bytes allocated on heap :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">bytes_allocated_on_heap</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Create a smart pointer</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">b_ptr</span><span class="p">(</span><span class="k">new</span> <span class="n">Object</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot;Smart Pointer:&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Objects created         :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_created</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Objects created on heap :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_created_on_heap</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Objects active          :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_active</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Objects active on heap  :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_active_on_heap</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Bytes allocated         :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">bytes_allocated</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot; - Bytes allocated on heap :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">bytes_allocated_on_heap</span><span class="p">;</span>
</span><span class='line'>      <span class="n">print</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="c1">// Smart pointer destroyed</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot;Smart Pointer Destroyed:&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Objects created         :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_created</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Objects created on heap :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_created_on_heap</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Objects active          :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_active</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Objects active on heap  :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">objects_active_on_heap</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Bytes allocated         :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">bytes_allocated</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot; - Bytes allocated on heap :&quot;</span><span class="p">,</span> <span class="n">ObjectCounter</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;::</span><span class="n">bytes_allocated_on_heap</span><span class="p">;</span>
</span><span class='line'>   <span class="n">print</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives the following output:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">Object size</span>  <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">4 bytes</span>
</span><span class='line'><span class="l-Scalar-Plain">Counter size</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1 bytes</span>
</span><span class='line'><span class="l-Scalar-Plain">Total size</span>   <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">4 bytes</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Single</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects created</span>         <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects created on heap</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects active</span>          <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects active on heap</span>  <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Bytes allocated</span>         <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">4</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Bytes allocated on heap</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Array</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects created</span>         <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects created on heap</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects active</span>          <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects active on heap</span>  <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Bytes allocated</span>         <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">12</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Bytes allocated on heap</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Vector</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects created</span>         <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects created on heap</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects active</span>          <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">4</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects active on heap</span>  <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Bytes allocated</span>         <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">16</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Bytes allocated on heap</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Copy</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects created</span>         <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">6</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects created on heap</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects active</span>          <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects active on heap</span>  <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Bytes allocated</span>         <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">20</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Bytes allocated on heap</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Out of Scope</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects created</span>         <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">6</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects created on heap</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects active</span>          <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects active on heap</span>  <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Bytes allocated</span>         <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Bytes allocated on heap</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Reset</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects created</span>         <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects created on heap</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects active</span>          <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects active on heap</span>  <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Bytes allocated</span>         <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Bytes allocated on heap</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">New</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects created</span>         <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects created on heap</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects active</span>          <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects active on heap</span>  <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Bytes allocated</span>         <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">4</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Bytes allocated on heap</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">4</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Delete</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects created</span>         <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects created on heap</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects active</span>          <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects active on heap</span>  <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Bytes allocated</span>         <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Bytes allocated on heap</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Smart Pointer</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects created</span>         <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects created on heap</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects active</span>          <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects active on heap</span>  <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Bytes allocated</span>         <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">4</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Bytes allocated on heap</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">4</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Smart Pointer Destroyed</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects created</span>         <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects created on heap</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects active</span>          <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Objects active on heap</span>  <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Bytes allocated</span>         <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Bytes allocated on heap</span> <span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everything looks correct, but take a look at line 22 of the output. This is a case where a temporary copy happened when loading the object into the vector. These are cases where C++11&rsquo;s move semantics are able to help. The object counter&rsquo;s copy constructor could be modified to also track copies being made, that is left as an exercise for the reader.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://ptgmedia.pearsoncmg.com/imprint_downloads/informit/aw/meyerscddemo/demo/MAGAZINE/CO_FRAME.HTM">Counting Objects in C++ by Scott Meyers</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="http://madebyevan.com/obscure-cpp-features/">Obscure C++ Features by Evan Wallace</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parameter Forwarding]]></title>
    <link href="http://jrruethe.github.io/blog/2015/06/30/parameter-forwarding/"/>
    <updated>2015-06-30T17:41:55-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/06/30/parameter-forwarding</id>
    <content type="html"><![CDATA[<p>C++11 introduced the possibility of &ldquo;perfect forwarding&rdquo; and &ldquo;variadic templates&rdquo;. This allows a function to pass all of its parameters to another function seamlessly. Such abilities are very useful for wrapper classes and factories.</p>

<p>Fortunately, this ability can be emulated in C++03 with the power of Boost and the preprocessor. This post is a guide on how to do parameter forwarding. This concept will be used as a tool in a future post about creating a generic factory class.</p>

<p>For this walkthrough, you will need the following installed:</p>

<ul>
<li>libboost-dev</li>
</ul>


<p>To start, let&rsquo;s define a simplistic factory class as an example. Our factory for this example will not do much, except return the built object as a smart pointer.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;boost/smart_ptr.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Factory</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">T</span> <span class="n">Type</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Pointer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Pointer</span> <span class="n">create</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Pointer</span><span class="p">(</span><span class="k">new</span> <span class="n">Type</span><span class="p">());</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem with this is that it only supports building objects with the default constructor. Hence, we want to use parameter forwarding to pass parameters from the <code>create</code> method to the constructor of the object.</p>

<p>We can make a manual attempt at this first:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;boost/smart_ptr.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Factory</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">T</span> <span class="n">Type</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Pointer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Pointer</span> <span class="n">create</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Pointer</span><span class="p">(</span><span class="k">new</span> <span class="n">Type</span><span class="p">());</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">A0</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="n">Pointer</span> <span class="n">create</span><span class="p">(</span><span class="n">A0</span> <span class="n">a0</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Pointer</span><span class="p">(</span><span class="k">new</span> <span class="n">Type</span><span class="p">(</span><span class="n">a0</span><span class="p">));</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">A0</span><span class="p">,</span>
</span><span class='line'>            <span class="k">typename</span> <span class="n">A1</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="n">Pointer</span> <span class="n">create</span><span class="p">(</span><span class="n">A0</span> <span class="n">a0</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">A1</span> <span class="n">a1</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Pointer</span><span class="p">(</span><span class="k">new</span> <span class="n">Type</span><span class="p">(</span><span class="n">a0</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">a1</span><span class="p">));</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see how this gets repetitive for constructors with many parameters. Likewise, you should also be able to see the pattern. Patterns mean we can let the machine do the work for us!</p>

<p>Before that, lets test what we have so far:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;boost/smart_ptr.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Factory</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">T</span> <span class="n">Type</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Pointer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Pointer</span> <span class="n">create</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Pointer</span><span class="p">(</span><span class="k">new</span> <span class="n">Type</span><span class="p">());</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">A0</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="n">Pointer</span> <span class="n">create</span><span class="p">(</span><span class="n">A0</span> <span class="n">a0</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Pointer</span><span class="p">(</span><span class="k">new</span> <span class="n">Type</span><span class="p">(</span><span class="n">a0</span><span class="p">));</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">A0</span><span class="p">,</span>
</span><span class='line'>            <span class="k">typename</span> <span class="n">A1</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="n">Pointer</span> <span class="n">create</span><span class="p">(</span><span class="n">A0</span> <span class="n">a0</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">A1</span> <span class="n">a1</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Pointer</span><span class="p">(</span><span class="k">new</span> <span class="n">Type</span><span class="p">(</span><span class="n">a0</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">a1</span><span class="p">));</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Default constructor</span>
</span><span class='line'><span class="k">struct</span> <span class="n">A</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">A</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;A Constructor&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span> <span class="n">APtr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Non-default constructor</span>
</span><span class='line'><span class="k">struct</span> <span class="n">B</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">B</span><span class="p">(</span><span class="kt">int</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">v</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>      <span class="n">_value</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;B Constructor: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">_value</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kt">int</span> <span class="n">value</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">_value</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'>   <span class="kt">int</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">_value</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">B</span><span class="o">&gt;</span> <span class="n">BPtr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Factory</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span> <span class="n">factory_a</span><span class="p">;</span>
</span><span class='line'>   <span class="n">Factory</span><span class="o">&lt;</span><span class="n">B</span><span class="o">&gt;</span> <span class="n">factory_b</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">APtr</span> <span class="n">a_ptr</span> <span class="o">=</span> <span class="n">factory_a</span><span class="p">.</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>   <span class="n">BPtr</span> <span class="n">b_ptr</span> <span class="o">=</span> <span class="n">factory_b</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">b_ptr</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">value</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">b_ptr</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This outputs:</p>

<pre><code>A Constructor
B Constructor: 3
3
0
</code></pre>

<p>Notice how the reference to <code>value</code> wasn&rsquo;t maintained. Boost addresses this issue in the <a href="http://www.boost.org/doc/libs/1_58_0/doc/html/move/construct_forwarding.html">Boost::Move</a> library by using <code>BOOST_FWD_REF</code> and <code>boost::forward</code>. Lets incorporate these utilities:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;boost/smart_ptr.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/move/utility.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Factory</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">T</span> <span class="n">Type</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Pointer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Pointer</span> <span class="n">create</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Pointer</span><span class="p">(</span><span class="k">new</span> <span class="n">Type</span><span class="p">());</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">A0</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="n">Pointer</span> <span class="n">create</span><span class="p">(</span><span class="n">BOOST_FWD_REF</span><span class="p">(</span><span class="n">A0</span><span class="p">)</span> <span class="n">a0</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Pointer</span><span class="p">(</span><span class="k">new</span> <span class="n">Type</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">A0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">a0</span><span class="p">)));</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">A0</span><span class="p">,</span>
</span><span class='line'>            <span class="k">typename</span> <span class="n">A1</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="n">Pointer</span> <span class="n">create</span><span class="p">(</span><span class="n">BOOST_FWD_REF</span><span class="p">(</span><span class="n">A0</span><span class="p">)</span> <span class="n">a0</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">BOOST_FWD_REF</span><span class="p">(</span><span class="n">A1</span><span class="p">)</span> <span class="n">a1</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Pointer</span><span class="p">(</span><span class="k">new</span> <span class="n">Type</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">A0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">a0</span><span class="p">),</span>
</span><span class='line'>                              <span class="n">boost</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">A1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">a1</span><span class="p">)));</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we get the output:</p>

<pre><code>A Constructor
B Constructor: 3
3
5
</code></pre>

<p>Thats better! Now that we know our code works, we can start to condense the pattern and let the preprocessor expand it out for us.</p>

<p><a href="http://www.boost.org/doc/libs/1_58_0/libs/preprocessor/doc/index.html">Boost::Preprocessor</a> is a handy library that makes interacting with the preprocessor much easier. It introduces a bunch of macros and conventions that we can build upon to emulate features like variadic templates. And despite how it sounds, the final result is rather compact and readable.</p>

<p>First, lets identify the patterns we want to condense. The first is the template parameter list:</p>

<pre><code>template&lt;typename A0, typename A1&gt;
</code></pre>

<p>Boost has a macro specifically designed for this purpose: <code>BOOST_PP_ENUM_PARAMS</code>. It takes in a number and some text, and replicates the text by appending increasing numbers. For example:</p>

<pre><code>#include &lt;boost/preprocessor.hpp&gt;
BOOST_PP_ENUM_PARAMS(3, typename A)
</code></pre>

<p>Outputs (using the preprocessor <code>cpp main.cpp</code>):</p>

<pre><code>typename A0 , typename A1 , typename A2
</code></pre>

<p>Simply wrap the template brackets around this to achieve our first piece:</p>

<pre><code>#include &lt;boost/preprocessor.hpp&gt;
template&lt;BOOST_PP_ENUM_PARAMS(3, typename A)&gt;
</code></pre>

<p>Outputs:</p>

<pre><code>template&lt; typename A0 , typename A1 , typename A2&gt;
</code></pre>

<p>Remember that C++ does not care about whitespace. The preprocessor macros will tend to insert whitespace in odd places. Likewise, the preprocessor will output everything on one line without line breaks.</p>

<p>The second pattern we see is the function parameters:</p>

<pre><code>BOOST_FWD_REF(A0) a0, BOOST_FWD_REF(A1) a1
</code></pre>

<p>This one is slightly trickier, because it doesn&rsquo;t fit the above enumeration pattern. For this case, we will use a different macro: <code>BOOST_PP_REPEAT</code>. This macro operates by convention; it will repeat a specified macro N times as long as that macro takes arguments in a certain way. In addition, we will use <code>BOOST_PP_CAT</code> to concatenate strings together. By treating N as one of the strings, we can create an enumeration with the freedom of controlling the output format.</p>

<pre><code>#include &lt;boost/preprocessor.hpp&gt;
#define PARAMETERS(Z, N, D) BOOST_PP_CAT(A,N) BOOST_PP_CAT(a,N)
BOOST_PP_REPEAT(3, PARAMETERS, ~)
</code></pre>

<p>Outputs:</p>

<pre><code>A0 a0 A1 a1 A2 a2
</code></pre>

<p>What is going on here? The <code>(Z, N, D)</code> represents state, number, and data, respectively. Boost uses this convention to pass around the &ldquo;state&rdquo; of the macro (analogous to how the <code>this</code> pointer is the implicit first parameter to any method call), the iteration value, and any extraneous data. For our case, we don&rsquo;t need to pass any data into the macro, so we use the conventional placeholder <code>~</code> to denote &ldquo;void&rdquo;.  On each call of our defined macro, <code>N</code> is updated with the iteration count, and we can concatenate that to the letters <code>A</code> and <code>a</code> to form our type and value.</p>

<p>But what about the commas? Boost has us covered here as well with <code>BOOST_PP_COMMA</code>:</p>

<pre><code>#include &lt;boost/preprocessor.hpp&gt;
#define PARAMETERS(Z, N, D) BOOST_PP_CAT(A,N) BOOST_PP_CAT(a,N) BOOST_PP_COMMA()
BOOST_PP_REPEAT(3, PARAMETERS, ~)
</code></pre>

<p>Outputs:</p>

<pre><code>A0 a0 , A1 a1 , A2 a2 ,
</code></pre>

<p>Hmm, not quite. There is a trailing comma that we need to get rid of. I&rsquo;ll admit that at this point I was pretty confused, until I learned the trick; Boost also provides <code>BOOST_PP_COMMA_IF</code>, which takes a condition argument and will only expand to a comma if the condition is not 0.</p>

<p>Here is the trick: Instead of trying to eliminate the trailing comma, <em>prepend</em> the comma!</p>

<pre><code>#include &lt;boost/preprocessor.hpp&gt;
#define PARAMETERS(Z, N, D) BOOST_PP_COMMA_IF(N) BOOST_PP_CAT(A,N) BOOST_PP_CAT(a,N)
BOOST_PP_REPEAT(3, PARAMETERS, ~)
</code></pre>

<p>Outputs:</p>

<pre><code>A0 a0 , A1 a1 , A2 a2
</code></pre>

<p>Perfect!</p>

<p>The final pattern is very similar to the second one:</p>

<pre><code>#include &lt;boost/preprocessor.hpp&gt;
#define FORWARD(Z, N, D) BOOST_PP_COMMA_IF(N) boost::forward&lt;BOOST_PP_CAT(A,N)&gt;(BOOST_PP_CAT(a,N))
BOOST_PP_REPEAT(3, FORWARD, ~)
</code></pre>

<p>Outputs:</p>

<pre><code>boost::forward&lt;A0&gt;(a0) , boost::forward&lt;A1&gt;(a1) , boost::forward&lt;A2&gt;(a2)
</code></pre>

<p>Armed with these tools, we can now simplify the factory:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Factory</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">T</span> <span class="n">Type</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Pointer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Pointer</span> <span class="n">create</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Pointer</span><span class="p">(</span><span class="k">new</span> <span class="n">Type</span><span class="p">());</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">/////////////////////////////////////////////////////////////////////////////</span>
</span><span class='line'>   <span class="err">#</span><span class="n">define</span> <span class="n">NUM_PARAMETERS</span> <span class="mi">3</span>
</span><span class='line'>   <span class="err">#</span><span class="n">define</span> <span class="n">PARAMETERS</span><span class="p">(</span><span class="n">Z</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">D</span><span class="p">)</span> <span class="n">BOOST_PP_COMMA_IF</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="n">BOOST_FWD_REF</span><span class="p">(</span> <span class="n">BOOST_PP_CAT</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">N</span><span class="p">))</span> <span class="n">BOOST_PP_CAT</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">N</span><span class="p">)</span>
</span><span class='line'>   <span class="err">#</span><span class="n">define</span> <span class="n">FORWARD</span><span class="p">(</span><span class="n">Z</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">D</span><span class="p">)</span>    <span class="n">BOOST_PP_COMMA_IF</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="n">boost</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">BOOST_PP_CAT</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">N</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(</span><span class="n">BOOST_PP_CAT</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">N</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>   <span class="err">#</span><span class="n">define</span> <span class="n">EXPAND</span><span class="p">(</span><span class="n">N</span><span class="p">)</span>                                            \
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="n">BOOST_PP_ENUM_PARAMS</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="k">typename</span> <span class="n">A</span><span class="p">)</span><span class="o">&gt;</span>                \
</span><span class='line'>   <span class="n">Pointer</span> <span class="n">create</span><span class="p">(</span><span class="n">BOOST_PP_REPEAT</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">PARAMETERS</span><span class="p">,</span> <span class="o">~</span><span class="p">))</span> <span class="k">const</span>      \
</span><span class='line'>   <span class="p">{</span>                                                            \
</span><span class='line'>      <span class="k">return</span> <span class="n">Pointer</span><span class="p">(</span><span class="k">new</span> <span class="n">Type</span><span class="p">(</span><span class="n">BOOST_PP_REPEAT</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">FORWARD</span><span class="p">,</span> <span class="o">~</span><span class="p">)));</span> \
</span><span class='line'>   <span class="p">}</span>                                                            \
</span><span class='line'>
</span><span class='line'>   <span class="err">#</span><span class="n">undef</span> <span class="n">EXPAND</span>
</span><span class='line'>   <span class="err">#</span><span class="n">undef</span> <span class="n">FORWARD</span>
</span><span class='line'>   <span class="err">#</span><span class="n">undef</span> <span class="n">PARAMETERS</span>
</span><span class='line'>   <span class="err">#</span><span class="n">undef</span> <span class="n">NUM_PARAMETERS</span>
</span><span class='line'>   <span class="c1">/////////////////////////////////////////////////////////////////////////////</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is always a good idea to undefine any macros you define after you are finished with them, since macros pollute the global namespace and you never know how they will interact with complex baselines.</p>

<p>There is one thing left to do; expand out the macro. Unsurprisingly, Boost also provides a way to do this. This method involves setting up a loop and iteratively calling <code>#include</code> on the result, which will cause the preprocessor to literally paste the results inline with the code:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Factory</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">T</span> <span class="n">Type</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Pointer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Pointer</span> <span class="n">create</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Pointer</span><span class="p">(</span><span class="k">new</span> <span class="n">Type</span><span class="p">());</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">/////////////////////////////////////////////////////////////////////////////</span>
</span><span class='line'>   <span class="err">#</span><span class="n">define</span> <span class="n">NUM_PARAMETERS</span> <span class="mi">3</span>
</span><span class='line'>   <span class="err">#</span><span class="n">define</span> <span class="n">PARAMETERS</span><span class="p">(</span><span class="n">Z</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">D</span><span class="p">)</span> <span class="n">BOOST_PP_COMMA_IF</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="n">BOOST_FWD_REF</span><span class="p">(</span> <span class="n">BOOST_PP_CAT</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">N</span><span class="p">))</span> <span class="n">BOOST_PP_CAT</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">N</span><span class="p">)</span>
</span><span class='line'>   <span class="err">#</span><span class="n">define</span> <span class="n">FORWARD</span><span class="p">(</span><span class="n">Z</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">D</span><span class="p">)</span>    <span class="n">BOOST_PP_COMMA_IF</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="n">boost</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">BOOST_PP_CAT</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">N</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(</span><span class="n">BOOST_PP_CAT</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">N</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>   <span class="err">#</span><span class="n">define</span> <span class="n">EXPAND</span><span class="p">(</span><span class="n">N</span><span class="p">)</span>                                            \
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="n">BOOST_PP_ENUM_PARAMS</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="k">typename</span> <span class="n">A</span><span class="p">)</span><span class="o">&gt;</span>                \
</span><span class='line'>   <span class="n">Pointer</span> <span class="n">create</span><span class="p">(</span><span class="n">BOOST_PP_REPEAT</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">PARAMETERS</span><span class="p">,</span> <span class="o">~</span><span class="p">))</span> <span class="k">const</span>      \
</span><span class='line'>   <span class="p">{</span>                                                            \
</span><span class='line'>      <span class="k">return</span> <span class="n">Pointer</span><span class="p">(</span><span class="k">new</span> <span class="n">Type</span><span class="p">(</span><span class="n">BOOST_PP_REPEAT</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">FORWARD</span><span class="p">,</span> <span class="o">~</span><span class="p">)));</span> \
</span><span class='line'>   <span class="p">}</span>                                                            \
</span><span class='line'>
</span><span class='line'>   <span class="err">#</span><span class="n">define</span>  <span class="n">BOOST_PP_LOCAL_MACRO</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="n">EXPAND</span><span class="p">(</span><span class="n">N</span><span class="p">)</span>
</span><span class='line'>   <span class="err">#</span><span class="n">define</span>  <span class="n">BOOST_PP_LOCAL_LIMITS</span>   <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">NUM_PARAMETERS</span><span class="p">)</span>
</span><span class='line'>   <span class="err">#</span><span class="n">include</span> <span class="n">BOOST_PP_LOCAL_ITERATE</span><span class="p">()</span>
</span><span class='line'>  
</span><span class='line'>   <span class="err">#</span><span class="n">undef</span> <span class="n">BOOST_PP_LOCAL_MACRO</span>
</span><span class='line'>   <span class="err">#</span><span class="n">undef</span> <span class="n">BOOST_PP_LOCAL_LIMITS</span>
</span><span class='line'>   <span class="err">#</span><span class="n">undef</span> <span class="n">EXPAND</span>
</span><span class='line'>   <span class="err">#</span><span class="n">undef</span> <span class="n">FORWARD</span>
</span><span class='line'>   <span class="err">#</span><span class="n">undef</span> <span class="n">PARAMETERS</span>
</span><span class='line'>   <span class="err">#</span><span class="n">undef</span> <span class="n">NUM_PARAMETERS</span>
</span><span class='line'>   <span class="c1">/////////////////////////////////////////////////////////////////////////////</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the loop iterates from 1 to N, instead of starting at 0. This is because putting 0 in the template parameter expansion will result in <code>template&lt;&gt;</code>, and the compiler will interpret this as template specialization. To get around this, the &ldquo;base case&rdquo; for a default constructor is coded outside of the macro.</p>

<p>The preprocessor generates the following code:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Factory</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">T</span> <span class="n">Type</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Pointer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Pointer</span> <span class="n">create</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Pointer</span><span class="p">(</span><span class="k">new</span> <span class="n">Type</span><span class="p">());</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span> <span class="k">typename</span> <span class="n">A0</span><span class="o">&gt;</span> <span class="n">Pointer</span> <span class="n">create</span><span class="p">(</span> <span class="k">const</span> <span class="n">A0</span> <span class="o">&amp;</span> <span class="n">a0</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Pointer</span><span class="p">(</span><span class="k">new</span> <span class="n">Type</span><span class="p">(</span> <span class="n">boost</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">A0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">a0</span><span class="p">)));</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span> <span class="k">typename</span> <span class="n">A0</span> <span class="p">,</span> <span class="k">typename</span> <span class="n">A1</span><span class="o">&gt;</span> <span class="n">Pointer</span> <span class="n">create</span><span class="p">(</span> <span class="k">const</span> <span class="n">A0</span> <span class="o">&amp;</span> <span class="n">a0</span> <span class="p">,</span> <span class="k">const</span> <span class="n">A1</span> <span class="o">&amp;</span> <span class="n">a1</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Pointer</span><span class="p">(</span><span class="k">new</span> <span class="n">Type</span><span class="p">(</span> <span class="n">boost</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">A0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">a0</span><span class="p">)</span> <span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">A1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">a1</span><span class="p">)));</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span> <span class="k">typename</span> <span class="n">A0</span> <span class="p">,</span> <span class="k">typename</span> <span class="n">A1</span> <span class="p">,</span> <span class="k">typename</span> <span class="n">A2</span><span class="o">&gt;</span> <span class="n">Pointer</span> <span class="n">create</span><span class="p">(</span> <span class="k">const</span> <span class="n">A0</span> <span class="o">&amp;</span> <span class="n">a0</span> <span class="p">,</span> <span class="k">const</span> <span class="n">A1</span> <span class="o">&amp;</span> <span class="n">a1</span> <span class="p">,</span> <span class="k">const</span> <span class="n">A2</span> <span class="o">&amp;</span> <span class="n">a2</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Pointer</span><span class="p">(</span><span class="k">new</span> <span class="n">Type</span><span class="p">(</span> <span class="n">boost</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">A0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">a0</span><span class="p">)</span> <span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">A1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span> <span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">A2</span><span class="o">&gt;</span><span class="p">(</span><span class="n">a2</span><span class="p">)));</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The final step is to increase <code>NUM_PARAMETERS</code> to 10 (or whatever max number you want to support).</p>

<p>The preprocessor is often disregarded in coding standards, however it is a powerful feature of C++ that should not be ignored.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Boost Fusion Json Serializer]]></title>
    <link href="http://jrruethe.github.io/blog/2015/05/21/boost-fusion-json-serializer/"/>
    <updated>2015-05-21T19:21:50-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/05/21/boost-fusion-json-serializer</id>
    <content type="html"><![CDATA[<p>In this post, I am going to walkthrough the creation of a C++ mixin that will allow any structure to serialize itself to Json, using the magical power of Boost::Fusion.</p>

<p>To do this, you will need the following installed:</p>

<ul>
<li>libboost-dev</li>
</ul>


<p>The Json serializer will support any structure composed of the following:</p>

<ul>
<li>Primitives</li>
<li>Arrays</li>
<li>Containers</li>
<li>Nested Structures</li>
</ul>


<p>First, we need a test structure that we want to serialize to Json. It needs to include some arrays, containers, and nested structures to test all the abilities of the serializer:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">inner</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>       <span class="kt">double</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>       <span class="kt">bool</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vec_t</span><span class="p">;</span>
</span><span class='line'>       <span class="n">vec_t</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">struct</span> <span class="n">outer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="kt">int</span> <span class="n">one</span><span class="p">;</span>
</span><span class='line'>       <span class="kt">double</span> <span class="n">two</span><span class="p">;</span>
</span><span class='line'>       <span class="kt">bool</span> <span class="n">three</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">inner</span> <span class="n">array_t</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>       <span class="n">array_t</span> <span class="n">array</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">set_t</span><span class="p">;</span>
</span><span class='line'>       <span class="n">set_t</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">map_t</span><span class="p">;</span>
</span><span class='line'>       <span class="n">map_t</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Boost::Fusion is a library that enables reflection in C++ with only a small amount of boilerplate. Pay careful attention to the use of <code>()</code> instead of <code>{}</code>, and the placement of the <code>,</code>:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">BOOST_FUSION_ADAPT_STRUCT</span>
</span><span class='line'>    <span class="p">(</span>
</span><span class='line'>       <span class="n">inner</span><span class="p">,</span>
</span><span class='line'>       <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="kt">double</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="n">inner</span><span class="o">::</span><span class="n">vec_t</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">BOOST_FUSION_ADAPT_STRUCT</span>
</span><span class='line'>    <span class="p">(</span>
</span><span class='line'>       <span class="n">outer</span><span class="p">,</span>
</span><span class='line'>       <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="n">one</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="kt">double</span><span class="p">,</span> <span class="n">two</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="n">three</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="n">outer</span><span class="o">::</span><span class="n">array_t</span><span class="p">,</span> <span class="n">array</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="n">outer</span><span class="o">::</span><span class="n">set_t</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="n">outer</span><span class="o">::</span><span class="n">map_t</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we define a serializer for each meta-type that needs to be supported. Each serializer will take a reference to an output stream that will be appended to, a type to serialize, and the current recursion depth. The depth is useful for pretty-printing with the proper indentation. All four will start off following the same pattern before we complete the implementation:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">primitive_serializer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">primitive_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">array_serializer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">array_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">container_serializer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">container_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">struct_serializer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">struct_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>primitive_serializer</code> is the simplest one to implement, so lets start with that one. It will enclose the value in quotation marks and append it to the stream:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">primitive_serializer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">primitive_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>             <span class="o">&lt;&lt;</span> <span class="n">t</span>
</span><span class='line'>             <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, lets implement the <code>array_serializer</code>. We need to get the size of the array, and iterate over it while serializing each element. Notice the use of newlines and tabs, and the increase in the recursion depth; we want the Json output to be pretty, as opposed to compressed (Switching to a compressed version is as simple as removing the newlines, tabs, and whitespace). Finally, we want to insert commas between each element, but we don&rsquo;t want a comma trailing after the final element:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// Helper method for generating a tab as 3 spaces</span>
</span><span class='line'>    <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">tab</span><span class="p">(</span><span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">retval</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">depth</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span><span class="n">retval</span> <span class="o">+=</span> <span class="s">&quot;   &quot;</span><span class="p">;}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">retval</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">array_serializer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">array_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// If T is an array type then removes the top level array qualifier from T, otherwise leaves T unchanged. </span>
</span><span class='line'>       <span class="c1">// For example &quot;int[2][3]&quot; becomes &quot;int[3]&quot;.</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">remove_bounds</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">slice_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Determine the size of the array by dividing out the size of its elements</span>
</span><span class='line'>       <span class="k">static</span> <span class="k">const</span> <span class="n">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">slice_t</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="c1">// Indent the stream</span>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;[&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// For each element in the array</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="c1">// Serialize the element</span>
</span><span class='line'>             <span class="n">json_serializer</span><span class="o">&lt;</span><span class="n">slice_t</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>             <span class="c1">// As long as we are not after the last element</span>
</span><span class='line'>             <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>             <span class="p">{</span>
</span><span class='line'>                <span class="c1">// Add a comma separator</span>
</span><span class='line'>                <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>             <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Close the array representation</span>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The container serializer is very similar; we use <code>BOOST_FOREACH</code> to do the iteration, and pull the <code>value_type</code> out of the container, but everything else is the same:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">container_serializer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">container_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;[&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Use the container&#39;s size method</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// STL containers all have a &quot;value_type&quot; typedef</span>
</span><span class='line'>          <span class="n">BOOST_FOREACH</span><span class="p">(</span><span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">value_type</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">v</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="c1">// Serialize each value</span>
</span><span class='line'>             <span class="n">json_serializer</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">value_type</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>             <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">!=</span> <span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>             <span class="p">{</span>
</span><span class='line'>                <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>             <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>             <span class="c1">// Keep track of the count so we can tell when a comma separator is needed</span>
</span><span class='line'>             <span class="o">++</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last serializer is the <code>struct_serializer</code>. This one is trickier. Structures are adapted as <code>Boost::Fusion</code> sequences by the boilerplate we defined above. A sequence is basically a vector, except each element can have a different type. In this case, the type/value pairs correspond directly with the members of the structure, and we can iterate over these members. We will accomplish this through recursion.</p>

<p>Before we get to the serializer, lets define some wrappers for interacting with the sequences in a friendlier way. We can get properties of the sequence as a whole, or we can get properties of a certain element in the sequence by using it&rsquo;s index. You can even get an element&rsquo;s member name and member type as a string (which is very handy when writing an XML serializer):</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sequence</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="c1">// Point to the first element</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">begin</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Point to the element after the last element in the sequence</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">size</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Point to the first element</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">first</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Point to the second element (for pairs)</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span> <span class="n">second</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Point to the last element in the sequence</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">prior</span><span class="o">&lt;</span><span class="n">end</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">last</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Number of elements in the sequence</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">size</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span>
</span><span class='line'>             <span class="k">typename</span> <span class="n">N</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">element_at</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="c1">// Type of the element at this index</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">value_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Previous element</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">prior</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">previous</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Next element</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">next</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Member name of the element at this index</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">extension</span><span class="o">::</span><span class="n">struct_member_name</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">::</span><span class="n">value</span><span class="o">&gt;::</span><span class="n">call</span><span class="p">();</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Type name of the element at this index</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">type_name</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">units</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">demangle</span><span class="p">(</span><span class="k">typeid</span><span class="p">(</span><span class="n">type</span><span class="p">).</span><span class="n">name</span><span class="p">());</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Access the element</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">at</span><span class="o">&lt;</span><span class="n">S</span> <span class="k">const</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">get</span><span class="p">(</span><span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">at</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we define the recursive struct serializer. The layout is similar to our other serializers, except this time there are two template parameters: the sequence and the element index.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">N</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">struct_serializer_recursive</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the above sequence helpers, we can obtain the type of the current element, and the index of the next element. We can also get the name of the element being serialized, it&rsquo;s type, and it&rsquo;s value:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// Current element</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">current_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Next element</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">next</span> <span class="n">next_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Name of current element</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">name</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Value of current element</span>
</span><span class='line'>    <span class="n">current_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">get</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Structures will be represented as key/value pairs separated by commas. Each value might be an array, container, or nested structure; therefore we need to call the <code>json_serializer</code> on each element. The final step is to recurse to the next element of the sequence. So a complete implementation would look like this:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">N</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">struct_serializer_recursive</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="c1">// Get the current and next elements</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">current_t</span><span class="p">;</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">next</span> <span class="n">next_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="c1">// The name of the element is the key</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">name</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// The element itself is the value</span>
</span><span class='line'>          <span class="n">current_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">get</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Output the key</span>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>             <span class="o">&lt;&lt;</span> <span class="n">name</span>
</span><span class='line'>             <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s"> : &quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Recursively output the value</span>
</span><span class='line'>          <span class="n">json_serializer</span><span class="o">&lt;</span><span class="n">current_t</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">depth</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Add a separator for the next element</span>
</span><span class='line'>          <span class="c1">// (Pay attention to this, we will revisit it later)</span>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Perform a recursive call to the next element</span>
</span><span class='line'>          <span class="n">struct_serializer_recursive</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">next_t</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">depth</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>We need to define the base case to stop the recursion. To do this, we use template specialization for the last element of the sequence. Then, we initiate the recursion by calling into the first element of the sequence:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// Specialize on the last element in the sequence</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">struct_serializer_recursive</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">end</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="c1">// No output</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Initiate the recursion by calling into the first element</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">struct_serializer_initiate</span> <span class="o">:</span> <span class="n">struct_serializer_recursive</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">begin</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the help of these pieces, we can implement the <code>struct_serializer</code>:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">struct_serializer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">struct_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="c1">// Begin recursing into the structure sequence</span>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;{&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">struct_serializer_initiate</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that all four serializers are implemented, we need a way to determine which one to use. To do this, we will utilize Boost&rsquo;s <code>type traits</code> to determine the properties of each type. Boost provides type traits for arrays and classes (which we have adapted into sequences), as well as a hidden one that identifies containers. Anything left over is treated as a primitive. This can be accomplished with some metaprogramming magic and a series of if-then-else statements:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">choose_serializer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="c1">// Very large typedef, indented to show the different nested levels</span>
</span><span class='line'>       <span class="k">typedef</span>
</span><span class='line'>       <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">eval_if</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">is_array</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">,</span>                                                                                      <span class="c1">// If the type is an array,</span>
</span><span class='line'>                                    <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">identity</span><span class="o">&lt;</span><span class="n">array_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">,</span>                                                              <span class="c1">// use the array serializer</span>
</span><span class='line'>                                    <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">eval_if</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">spirit</span><span class="o">::</span><span class="n">traits</span><span class="o">::</span><span class="n">is_container</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">,</span>                                     <span class="c1">// Otherwise, check to see if it is a container (using the hidden type-trait)</span>
</span><span class='line'>                                                                 <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">identity</span><span class="o">&lt;</span><span class="n">container_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">,</span>                             <span class="c1">// If so, use the container serializer</span>
</span><span class='line'>                                                                 <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">eval_if</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">is_class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">,</span>                            <span class="c1">// Otherwise, check to see if it is a structure</span>
</span><span class='line'>                                                                                              <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">identity</span><span class="o">&lt;</span><span class="n">struct_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">,</span>   <span class="c1">// If so, use the structure serializer</span>
</span><span class='line'>                                                                                              <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">identity</span><span class="o">&lt;</span><span class="n">primitive_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="c1">// If all else fails, treat it as a primitive.</span>
</span><span class='line'>                                                                                             <span class="o">&gt;</span>
</span><span class='line'>                                                                <span class="o">&gt;</span>
</span><span class='line'>                                   <span class="o">&gt;::</span><span class="n">type</span>
</span><span class='line'>       <span class="n">type</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last piece is to wrap all this code up into a <code>json_serializer</code> and utilize it with a mixin. The mixin uses <code>CRTP</code> in which a structure inherits from the mixin and passes itself in as the template parameter. The mixin can then cast itself to the class type and begin iterating over itself:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// The json serializer adapts itself to the top level type</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">json_serializer</span> <span class="o">:</span> <span class="k">public</span> <span class="n">choose_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// This is the mixin to inherit from</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">json</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="c1">// Returns the json representation of this class</span>
</span><span class='line'>       <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">to_json</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="c1">// Serialize to a stringstream, convert booleans to strings. Start at a depth of 0.</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">ss</span><span class="p">;</span>
</span><span class='line'>          <span class="n">json_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">boolalpha</span><span class="p">,</span> <span class="n">self</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">ss</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// Cast ourselves to the template parameter since this is a mixin via CRTP</span>
</span><span class='line'>       <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">self</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">*</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="n">T</span> <span class="k">const</span><span class="o">*&gt;</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Time to test it out! Instantiate the structure and populate it. Remember to apply the mixin via inheritance (<code>struct outer : public json&lt;outer&gt;</code>):</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="n">outer</span> <span class="n">o</span><span class="p">;</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">one</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">two</span> <span class="o">=</span> <span class="mf">2.2</span><span class="p">;</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">three</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">b</span> <span class="o">=</span> <span class="mf">4.4</span><span class="p">;</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">c</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">d</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">11</span><span class="p">);</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">d</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">22</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">b</span> <span class="o">=</span> <span class="mf">6.6</span><span class="p">;</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">c</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">d</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">33</span><span class="p">);</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">d</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">44</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">s</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">55</span><span class="p">);</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">s</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">66</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">77</span><span class="p">]</span> <span class="o">=</span> <span class="mi">88</span><span class="p">;</span>
</span><span class='line'>       <span class="n">o</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">99</span><span class="p">]</span> <span class="o">=</span> <span class="mi">111</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">o</span><span class="p">.</span><span class="n">to_json</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The resulting Json printed out looks like this:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>       <span class="nt">&quot;one&quot;</span> <span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;two&quot;</span> <span class="p">:</span> <span class="s2">&quot;2.2&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;three&quot;</span> <span class="p">:</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;array&quot;</span> <span class="p">:</span>
</span><span class='line'>       <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="nt">&quot;a&quot;</span> <span class="p">:</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;b&quot;</span> <span class="p">:</span> <span class="s2">&quot;4.4&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;c&quot;</span> <span class="p">:</span> <span class="s2">&quot;true&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;d&quot;</span> <span class="p">:</span>
</span><span class='line'>             <span class="p">[</span><span class="s2">&quot;11&quot;</span><span class="p">,</span> <span class="s2">&quot;22&quot;</span>
</span><span class='line'>             <span class="p">],</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="nt">&quot;a&quot;</span> <span class="p">:</span> <span class="s2">&quot;5&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;b&quot;</span> <span class="p">:</span> <span class="s2">&quot;6.6&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;c&quot;</span> <span class="p">:</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;d&quot;</span> <span class="p">:</span>
</span><span class='line'>             <span class="p">[</span><span class="s2">&quot;33&quot;</span><span class="p">,</span> <span class="s2">&quot;44&quot;</span>
</span><span class='line'>             <span class="p">],</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>       <span class="p">],</span>
</span><span class='line'>       <span class="nt">&quot;s&quot;</span> <span class="p">:</span>
</span><span class='line'>       <span class="p">[</span><span class="s2">&quot;55&quot;</span><span class="p">,</span> <span class="s2">&quot;66&quot;</span>
</span><span class='line'>       <span class="p">],</span>
</span><span class='line'>       <span class="nt">&quot;m&quot;</span> <span class="p">:</span>
</span><span class='line'>       <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="nt">&quot;first&quot;</span> <span class="p">:</span> <span class="s2">&quot;77&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;second&quot;</span> <span class="p">:</span> <span class="s2">&quot;88&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="nt">&quot;first&quot;</span> <span class="p">:</span> <span class="s2">&quot;99&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;second&quot;</span> <span class="p">:</span> <span class="s2">&quot;111&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>       <span class="p">],</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Close, but not quite. There are multiple issues:</p>

<ul>
<li>Arrays are formatted goofy (lines 12, 20, 25)</li>
<li>Trailing commas (lines 21, 37)</li>
<li>The map is represented as an array of pairs (lines 29-36)</li>
</ul>


<p>Fortunately, these issues are easily fixed.</p>

<p>The first issue is caused by the <code>primitive_serializer</code> not adding newlines for array values. This can be fixed with an extra boolean parameter that gets set when calling it from the <code>array_serializer</code>. You will find that you also want to set this extra parameter to true when calling from the <code>container_serializer</code>, since the containers are formatted as arrays. Note that all the serializer signatures need to be updated so they match, as well as each call to the serializer.:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">primitive_serializer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">primitive_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="c1">// Put in tabs if this is a value from an array (called from an array serializer)</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">array_value</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>                <span class="o">&lt;&lt;</span> <span class="n">t</span>
</span><span class='line'>                <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>                <span class="o">&lt;&lt;</span> <span class="n">t</span>
</span><span class='line'>                <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fixing the second issue (trailing commas) involves a little more template magic. The problem is caused by the comma being added inside <code>struct_serializer_recursive</code>. A comma is added just before the recursion hits the base case and stops. Instead, we should conditionally add this comma, but skip that step on the last element. To do this, we outsource the comma-insertion to a functor and specialize it for the last element:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// Return a proper comma separator for any element in the sequence.</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span>
</span><span class='line'>             <span class="k">typename</span> <span class="n">N</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">separator</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">comma</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>           <span class="k">return</span> <span class="s">&quot;,&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Specialize on the last element and prevent a comma from being returned.</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">separator</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">last</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">comma</span><span class="p">()</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now <code>os &lt;&lt; ", ";</code> can be replaced with <code>os &lt;&lt; separator&lt;S, N&gt;::comma();</code>.</p>

<p>The third issue is caused by the map container&rsquo;s value_type being a pair. Boost is kind enough to adapt pairs into structures for us, but the output isn&rsquo;t quite the way we want it. Instead, we want <code>first</code> to be treated as the key, and <code>second</code> to be treated as the value. To fix this, we make a modified copy of <code>struct_serializer_recursive</code> for pairs that doesn&rsquo;t access the member name&hellip;</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">N</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">pair_serializer_recursive</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">current_t</span><span class="p">;</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">next</span> <span class="n">next_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="c1">// For pairs, the member name will be &quot;first&quot; or &quot;second&quot;.</span>
</span><span class='line'>          <span class="c1">// Instead, treat the value of &quot;first&quot; as the key</span>
</span><span class='line'>          <span class="n">current_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">get</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>             <span class="o">&lt;&lt;</span> <span class="n">t</span>
</span><span class='line'>             <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s"> : &quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Then recurse and treat the value of &quot;second&quot; as the value</span>
</span><span class='line'>          <span class="n">pair_serializer_recursive</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">next_t</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Specialize on the second element of the pair to stop the recursion</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">pair_serializer_recursive</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">second</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">second</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">current_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="n">current_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">second</span><span class="o">&gt;::</span><span class="n">get</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Mimic the primitive serializer</span>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>             <span class="o">&lt;&lt;</span> <span class="n">t</span>
</span><span class='line'>             <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Initiate the recursion</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">pair_serializer_initiate</span> <span class="o">:</span> <span class="k">public</span> <span class="n">pair_serializer_recursive</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">begin</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;specialize the <code>container_serializer</code> for <code>std::map</code> to change the boolean flags being set on the serializer&hellip;</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// Specialize the container serializer on std::map</span>
</span><span class='line'>    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">K</span><span class="p">,</span> <span class="k">typename</span> <span class="n">V</span><span class="p">,</span> <span class="k">typename</span> <span class="n">C</span><span class="p">,</span> <span class="k">typename</span> <span class="n">A</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">container_serializer</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">A</span><span class="o">&gt;</span> <span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">A</span><span class="o">&gt;</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">container_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;{&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">BOOST_FOREACH</span><span class="p">(</span><span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">value_type</span> <span class="n">v</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="c1">// This will end up calling the structure serializer, but we set the &quot;pair&quot; flag to true</span>
</span><span class='line'>             <span class="n">json_serializer</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">value_type</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>             <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">!=</span> <span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>             <span class="p">{</span>
</span><span class='line'>                <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>             <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>             <span class="o">++</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;and conditonally use the <code>pair_serializer</code> inside the <code>struct_serializer</code>:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">struct_serializer</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">typedef</span> <span class="n">struct_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="c1">// If being called from the std::map specialization of the container serializer,</span>
</span><span class='line'>          <span class="c1">// we should treat the values as pairs, so forward to the appropriate serializer</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">pair</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="n">pair_serializer_initiate</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;{&quot;</span><span class="p">;</span>
</span><span class='line'>             <span class="n">struct_serializer_initiate</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>             <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, this means we needed to add another boolean parameter for our serialize function (and all serializers must do this so the signatures all match). After all that, we get the following Json output:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>       <span class="nt">&quot;one&quot;</span> <span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;two&quot;</span> <span class="p">:</span> <span class="s2">&quot;2.2&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;three&quot;</span> <span class="p">:</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="nt">&quot;array&quot;</span> <span class="p">:</span>
</span><span class='line'>       <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="nt">&quot;a&quot;</span> <span class="p">:</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;b&quot;</span> <span class="p">:</span> <span class="s2">&quot;4.4&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;c&quot;</span> <span class="p">:</span> <span class="s2">&quot;true&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;d&quot;</span> <span class="p">:</span>
</span><span class='line'>             <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;11&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;22&quot;</span>
</span><span class='line'>             <span class="p">]</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>             <span class="nt">&quot;a&quot;</span> <span class="p">:</span> <span class="s2">&quot;5&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;b&quot;</span> <span class="p">:</span> <span class="s2">&quot;6.6&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;c&quot;</span> <span class="p">:</span> <span class="s2">&quot;false&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;d&quot;</span> <span class="p">:</span>
</span><span class='line'>             <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;33&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;44&quot;</span>
</span><span class='line'>             <span class="p">]</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>       <span class="p">],</span>
</span><span class='line'>       <span class="nt">&quot;s&quot;</span> <span class="p">:</span>
</span><span class='line'>       <span class="p">[</span>
</span><span class='line'>          <span class="s2">&quot;55&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;66&quot;</span>
</span><span class='line'>       <span class="p">],</span>
</span><span class='line'>       <span class="nt">&quot;m&quot;</span> <span class="p">:</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;77&quot;</span> <span class="p">:</span> <span class="s2">&quot;88&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;99&quot;</span> <span class="p">:</span> <span class="s2">&quot;111&quot;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It validates! Below is the final form of the code. While it is quite a bit, the nice thing is that all a user needs to do is perform the fusion adaption of their structure and inherit from the mixin; the rest is hidden behind the scenes.</p>

<figure class='code'><figcaption><span> (json.cpp)</span><a href='http://jrruethe.github.io/downloads/code/json.cpp' title='Download code'> download</a></figcaption><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// json.cpp</span>
</span><span class='line'><span class="c1">// Copyright (C) 2015 Joe Ruether jrruethe@gmail.com</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c1">// it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c1">// the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c1">// (at your option) any later version.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c1">// GNU General Public License for more details.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c1">// along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;boost/foreach.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/adapted.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/include/at.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/include/size.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/include/value_at.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/mpl.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/sequence/intrinsic/at.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/sequence/intrinsic/size.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/fusion/sequence/intrinsic/value_at.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/mpl/eval_if.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/mpl/identity.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/mpl/next_prior.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/spirit/home/support/container.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/type_traits.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/units/detail/utility.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">sequence</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// Point to the first element</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">begin</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Point to the element after the last element in the sequence</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">size</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Point to the first element</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">first</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Point to the second element (for pairs)</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">int_</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span> <span class="n">second</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Point to the last element in the sequence</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">prior</span><span class="o">&lt;</span><span class="n">end</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">last</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Number of elements in the sequence</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">size</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span>
</span><span class='line'>          <span class="k">typename</span> <span class="n">N</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">element_at</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// Type of the element at this index</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">value_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Previous element</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">prior</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">previous</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Next element</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">next</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Member name of the element at this index</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">extension</span><span class="o">::</span><span class="n">struct_member_name</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">::</span><span class="n">value</span><span class="o">&gt;::</span><span class="n">call</span><span class="p">();</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Type name of the element at this index</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">type_name</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">units</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">demangle</span><span class="p">(</span><span class="k">typeid</span><span class="p">(</span><span class="n">type</span><span class="p">).</span><span class="n">name</span><span class="p">());</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Access the element</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">result_of</span><span class="o">::</span><span class="n">at</span><span class="o">&lt;</span><span class="n">S</span> <span class="k">const</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">get</span><span class="p">(</span><span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="o">::</span><span class="n">at</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Insert a comma into the stream</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span>
</span><span class='line'>         <span class="k">typename</span> <span class="n">N</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">separator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">comma</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="s">&quot;,&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Specialize for the last element in the sequence</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">separator</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">last</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">comma</span><span class="p">()</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Forward</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">json_serializer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">tab</span><span class="p">(</span><span class="kt">int</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">retval</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">depth</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span><span class="n">retval</span> <span class="o">+=</span> <span class="s">&quot;   &quot;</span><span class="p">;}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">retval</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Occurs at every element of the sequence</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">N</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">struct_serializer_recursive</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">current_t</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">next</span> <span class="n">next_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">name</span><span class="p">();</span>
</span><span class='line'>      <span class="n">current_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">get</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>         <span class="o">&lt;&lt;</span> <span class="n">name</span>
</span><span class='line'>         <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s"> : &quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">json_serializer</span><span class="o">&lt;</span><span class="n">current_t</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">separator</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">comma</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">struct_serializer_recursive</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">next_t</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">struct_serializer_recursive</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">end</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="c1">// No output</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">struct_serializer_initiate</span> <span class="o">:</span> <span class="n">struct_serializer_recursive</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">begin</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">N</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">pair_serializer_recursive</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">current_t</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">next</span> <span class="n">next_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">current_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;::</span><span class="n">get</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>         <span class="o">&lt;&lt;</span> <span class="n">t</span>
</span><span class='line'>         <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s"> : &quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">pair_serializer_recursive</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="n">next_t</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">S</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">pair_serializer_recursive</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">second</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">second</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">current_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">S</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">current_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">element_at</span><span class="o">&lt;</span><span class="n">S</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;::</span><span class="n">second</span><span class="o">&gt;::</span><span class="n">get</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>         <span class="o">&lt;&lt;</span> <span class="n">t</span>
</span><span class='line'>         <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">pair_serializer_initiate</span> <span class="o">:</span> <span class="k">public</span> <span class="n">pair_serializer_recursive</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">sequence</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">begin</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">array_serializer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">array_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">typedef</span> <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">remove_bounds</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">slice_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">static</span> <span class="k">const</span> <span class="n">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">slice_t</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;[&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">json_serializer</span><span class="o">&lt;</span><span class="n">slice_t</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">container_serializer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">container_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;[&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">BOOST_FOREACH</span><span class="p">(</span><span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">value_type</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">v</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">json_serializer</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">value_type</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">!=</span> <span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="o">++</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">K</span><span class="p">,</span> <span class="k">typename</span> <span class="n">V</span><span class="p">,</span> <span class="k">typename</span> <span class="n">C</span><span class="p">,</span> <span class="k">typename</span> <span class="n">A</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">container_serializer</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">A</span><span class="o">&gt;</span> <span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">A</span><span class="o">&gt;</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">container_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;{&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">BOOST_FOREACH</span><span class="p">(</span><span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">value_type</span> <span class="n">v</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">json_serializer</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">value_type</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">!=</span> <span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>            <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="o">++</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">struct_serializer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">struct_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">pair</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">pair_serializer_initiate</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;{&quot;</span><span class="p">;</span>
</span><span class='line'>         <span class="n">struct_serializer_initiate</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>         <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">primitive_serializer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">primitive_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Ostream</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">serialize</span><span class="p">(</span><span class="n">Ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">array_value</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">pair</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">array_value</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">tab</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>            <span class="o">&lt;&lt;</span> <span class="n">t</span>
</span><span class='line'>            <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'>            <span class="o">&lt;&lt;</span> <span class="n">t</span>
</span><span class='line'>            <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">choose_serializer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">typedef</span>
</span><span class='line'>   <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">eval_if</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">is_array</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">identity</span><span class="o">&lt;</span><span class="n">array_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>                                <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">eval_if</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">spirit</span><span class="o">::</span><span class="n">traits</span><span class="o">::</span><span class="n">is_container</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>                                                             <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">identity</span><span class="o">&lt;</span><span class="n">container_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>                                                             <span class="k">typename</span> <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">eval_if</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">is_class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>                                                                                          <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">identity</span><span class="o">&lt;</span><span class="n">struct_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>                                                                                          <span class="n">boost</span><span class="o">::</span><span class="n">mpl</span><span class="o">::</span><span class="n">identity</span><span class="o">&lt;</span><span class="n">primitive_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&gt;</span>
</span><span class='line'>                                                                                         <span class="o">&gt;</span>
</span><span class='line'>                                                            <span class="o">&gt;</span>
</span><span class='line'>                               <span class="o">&gt;::</span><span class="n">type</span>
</span><span class='line'>   <span class="n">type</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">json_serializer</span> <span class="o">:</span> <span class="k">public</span> <span class="n">choose_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">json</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">to_json</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">ss</span><span class="p">;</span>
</span><span class='line'>      <span class="n">json_serializer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">serialize</span><span class="p">(</span><span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">boolalpha</span><span class="p">,</span> <span class="n">self</span><span class="p">(),</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ss</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">self</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">*</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="n">T</span> <span class="k">const</span><span class="o">*&gt;</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">////////////////////////////////////////////////////////////////////////////////</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">inner</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">double</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">bool</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vec_t</span><span class="p">;</span>
</span><span class='line'>   <span class="n">vec_t</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">outer</span> <span class="o">:</span> <span class="k">public</span> <span class="n">json</span><span class="o">&lt;</span><span class="n">outer</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">one</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">double</span> <span class="n">two</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">bool</span> <span class="n">three</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">inner</span> <span class="n">array_t</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>   <span class="n">array_t</span> <span class="n">array</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">set_t</span><span class="p">;</span>
</span><span class='line'>   <span class="n">set_t</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">map_t</span><span class="p">;</span>
</span><span class='line'>   <span class="n">map_t</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_FUSION_ADAPT_STRUCT</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>  <span class="n">inner</span><span class="p">,</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">double</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="n">inner</span><span class="o">::</span><span class="n">vec_t</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_FUSION_ADAPT_STRUCT</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>  <span class="n">outer</span><span class="p">,</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="n">one</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">double</span><span class="p">,</span> <span class="n">two</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="n">three</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="n">outer</span><span class="o">::</span><span class="n">array_t</span><span class="p">,</span> <span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="n">outer</span><span class="o">::</span><span class="n">set_t</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="n">outer</span><span class="o">::</span><span class="n">map_t</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">outer</span> <span class="n">o</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">one</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">two</span> <span class="o">=</span> <span class="mf">2.2</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">three</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">b</span> <span class="o">=</span> <span class="mf">4.4</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">c</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">d</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">11</span><span class="p">);</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">d</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">22</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">b</span> <span class="o">=</span> <span class="mf">6.6</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">c</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">d</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">33</span><span class="p">);</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">d</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">44</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">s</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">55</span><span class="p">);</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">s</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">66</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">77</span><span class="p">]</span> <span class="o">=</span> <span class="mi">88</span><span class="p">;</span>
</span><span class='line'>   <span class="n">o</span><span class="p">.</span><span class="n">m</span><span class="p">[</span><span class="mi">99</span><span class="p">]</span> <span class="o">=</span> <span class="mi">111</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">o</span><span class="p">.</span><span class="n">to_json</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hopefully you learned some cool C++ tricks from this.</p>

<hr />

<p>This post was inspired by <a href="http://andres.senac.es/2011/04/generic-json-serializer.html">Andres Senac</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Temporary Security Mirror]]></title>
    <link href="http://jrruethe.github.io/blog/2015/05/02/temporary-security-mirror/"/>
    <updated>2015-05-02T15:31:12-04:00</updated>
    <id>http://jrruethe.github.io/blog/2015/05/02/temporary-security-mirror</id>
    <content type="html"><![CDATA[<p>Sometimes you need to perform a task in a secure way that leaves no trace on your computer. The traditional way of accomplishing this is to boot from a live CD like <a href="https://tails.boum.org/">Tails</a>. The problem with this is that you might need the software, drivers, or setup you have on your main operating system to accomplish the task. An example of this might be creating a Bitcoin Paper Wallet with a proprietary printer; it might be too difficult to set up the printer on a live CD for a one-off task.</p>

<p>Below is a script that help for these specialized cases. It creates a secure mirror of your system that never touches the disk; anything you do is wiped away on shutdown. Best part is, you can use this from an already running system.</p>

<p>This script will:</p>

<ul>
<li>Disable swap</li>
<li>Do a read only bind mount of root</li>
<li>Apply a tmpfs aufs layer over the read only root view</li>
<li>Start an X server and chroot into the root view</li>
</ul>


<p>The end result is a temporary secure mirror of your running system.<br/>
You need the following installed for this to work:</p>

<ul>
<li>aufs-tools</li>
<li>Xephyr</li>
<li>fluxbox</li>
</ul>


<p>Simply run <code>tsm.sh</code> and you will get a window of your running system, where anything you do is forgotten when closed. You will have access to all your files and devices. For more security, close any applications and disconnect your internet before running this script. When finished, close the window and restart your computer.</p>

<figure class='code'><figcaption><span> (tsm.sh)</span><a href='http://jrruethe.github.io/downloads/code/tsm.sh' title='Download code'> download</a></figcaption><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># tsm.sh</span>
</span><span class='line'><span class="c"># Copyright (C) 2015 Joe Ruether jrruethe@gmail.com</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c"># it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c"># the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c"># (at your option) any later version.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
</span><span class='line'><span class="c"># GNU General Public License for more details.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c"># along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Stop on any error</span>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'>
</span><span class='line'><span class="c"># Declare an array of tasks to perform on exit</span>
</span><span class='line'><span class="nb">declare</span> -a on_exit_items
</span><span class='line'>
</span><span class='line'><span class="c"># This function is run on exit</span>
</span><span class='line'><span class="k">function </span>on_exit<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="k">for </span>i in <span class="s2">&quot;${on_exit_items[@]}&quot;</span>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'><span class="k">        </span><span class="nb">eval</span> <span class="nv">$i</span>
</span><span class='line'>    <span class="k">done</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Add to the list of tasks to run on exit</span>
</span><span class='line'><span class="k">function </span>add_on_exit_reverse<span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nv">on_exit_items</span><span class="o">=(</span><span class="s2">&quot;$*&quot;</span> <span class="s2">&quot;${on_exit_items[@]}&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$n</span> -eq 0 <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">trap </span>on_exit EXIT
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Check to make sure we are running as root</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$EUID</span> -ne 0 <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">   </span><span class="nb">echo</span> <span class="s2">&quot;This script must be run as root&quot;</span>
</span><span class='line'>   <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Define variables</span>
</span><span class='line'><span class="nv">insecure_root</span><span class="o">=</span>insecure_root
</span><span class='line'><span class="nv">tmpfs_redirect</span><span class="o">=</span>tmpfs_redirect
</span><span class='line'><span class="nv">secure_root</span><span class="o">=</span>secure_root
</span><span class='line'>
</span><span class='line'><span class="c"># Disable Swap</span>
</span><span class='line'>swapoff -a
</span><span class='line'>
</span><span class='line'><span class="c"># Create the mount points</span>
</span><span class='line'>mkdir -p <span class="nv">$insecure_root</span>
</span><span class='line'>mkdir -p <span class="nv">$tmpfs_redirect</span>
</span><span class='line'>mkdir -p <span class="nv">$secure_root</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Clean up the mount points</span>
</span><span class='line'>add_on_exit_reverse rmdir <span class="nv">$insecure_root</span>
</span><span class='line'>add_on_exit_reverse rmdir <span class="nv">$tmpfs_redirect</span>
</span><span class='line'>add_on_exit_reverse rmdir <span class="nv">$secure_root</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Bind mount the root directory</span>
</span><span class='line'>mount --bind / <span class="nv">$insecure_root</span>
</span><span class='line'>add_on_exit_reverse umount <span class="nv">$insecure_root</span> <span class="o">||</span> umount -lf <span class="nv">$insecure_root</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Remount the root directory as read only</span>
</span><span class='line'>mount -o remount,ro,bind <span class="nv">$insecure_root</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Create a tmpfs filesystem</span>
</span><span class='line'>mount -t tmpfs tmpfs <span class="nv">$tmpfs_redirect</span>
</span><span class='line'>add_on_exit_reverse umount <span class="nv">$tmpfs_redirect</span> <span class="o">||</span> umount -lf <span class="nv">$tmpfs_redirect</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Aufs mount to redirect all </span>
</span><span class='line'>mount -t aufs -o <span class="nv">br</span><span class="o">=</span><span class="nv">$tmpfs_redirect</span><span class="o">=</span>rw:<span class="nv">$insecure_root</span><span class="o">=</span>ro none <span class="nv">$secure_root</span>
</span><span class='line'>add_on_exit_reverse umount <span class="nv">$secure_root</span> <span class="o">||</span> umount -lf <span class="nv">$secure_root</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Mount the necessary filesystems in the chroot</span>
</span><span class='line'>mount --bind /dev <span class="nv">$secure_root</span>/dev
</span><span class='line'>mount -t proc none <span class="nv">$secure_root</span>/proc
</span><span class='line'>mount -t sysfs none <span class="nv">$secure_root</span>/sys
</span><span class='line'>mount -t devpts none <span class="nv">$secure_root</span>/dev/pts
</span><span class='line'>
</span><span class='line'>add_on_exit_reverse umount <span class="nv">$secure_root</span>/dev <span class="o">||</span> umount -lf <span class="nv">$secure_root</span>/dev
</span><span class='line'>add_on_exit_reverse umount <span class="nv">$secure_root</span>/proc <span class="o">||</span> umount -lf <span class="nv">$secure_root</span>/proc
</span><span class='line'>add_on_exit_reverse umount <span class="nv">$secure_root</span>/sys <span class="o">||</span> umount -lf <span class="nv">$secure_root</span>/sys
</span><span class='line'>add_on_exit_reverse umount <span class="nv">$secure_root</span>/dev/pts <span class="o">||</span> umount -lf <span class="nv">$secure_root</span>/dev/pts
</span><span class='line'>
</span><span class='line'><span class="c"># Everything is set up, enter the chroot</span>
</span><span class='line'><span class="nb">set</span> +e
</span><span class='line'>
</span><span class='line'><span class="c"># Start the nested X server</span>
</span><span class='line'>Xephyr -screen 1024x768 -name <span class="s2">&quot;Temporary Security Mirror&quot;</span> -title <span class="s2">&quot;Temporary Security Mirror&quot;</span> :1 &amp;
</span><span class='line'>
</span><span class='line'><span class="c"># Wait for the X server to start</span>
</span><span class='line'>sleep 5
</span><span class='line'>
</span><span class='line'><span class="c"># Chroot in and startx</span>
</span><span class='line'>chroot <span class="nv">$secure_root</span> env <span class="nv">DISPLAY</span><span class="o">=</span>localhost:1 /usr/bin/fluxbox
</span><span class='line'>
</span><span class='line'><span class="c"># Wait for things to settle down</span>
</span><span class='line'>sleep 5
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
